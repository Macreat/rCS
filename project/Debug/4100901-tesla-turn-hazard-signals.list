
4100901-tesla-turn-hazard-signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a4  080039a4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039ac  080039ac  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080039c0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080039c0  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4f  00000000  00000000  00011222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00012f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077e  00000000  00000000  00013940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259f9  00000000  00000000  000140be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c20e  00000000  00000000  00039ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7775  00000000  00000000  00045cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d43a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  0012d480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003944 	.word	0x08003944

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003944 	.word	0x08003944

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 faa7 	bl	8000a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f806 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f886 	bl	80005d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f854 	bl	8000574 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <main+0x14>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b096      	sub	sp, #88	@ 0x58
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2244      	movs	r2, #68	@ 0x44
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 fa03 	bl	80038ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004f6:	f000 fe77 	bl	80011e8 <HAL_PWREx_ControlVoltageScaling>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000500:	f000 f966 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000504:	2310      	movs	r3, #16
 8000506:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000510:	2360      	movs	r3, #96	@ 0x60
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000518:	2301      	movs	r3, #1
 800051a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000520:	2328      	movs	r3, #40	@ 0x28
 8000522:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000524:	2307      	movs	r3, #7
 8000526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000528:	2302      	movs	r3, #2
 800052a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052c:	2302      	movs	r3, #2
 800052e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fead 	bl	8001294 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000540:	f000 f946 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	2303      	movs	r3, #3
 800054a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	2104      	movs	r1, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f001 fa75 	bl	8001a4c <HAL_RCC_ClockConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000568:	f000 f932 	bl	80007d0 <Error_Handler>
  }
}
 800056c:	bf00      	nop
 800056e:	3758      	adds	r7, #88	@ 0x58
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <MX_USART2_UART_Init+0x5c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 8000580:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005b8:	f002 f928 	bl	800280c <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c2:	f000 f905 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <MX_GPIO_Init+0x130>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a45      	ldr	r2, [pc, #276]	@ (8000704 <MX_GPIO_Init+0x130>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b43      	ldr	r3, [pc, #268]	@ (8000704 <MX_GPIO_Init+0x130>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b40      	ldr	r3, [pc, #256]	@ (8000704 <MX_GPIO_Init+0x130>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a3f      	ldr	r2, [pc, #252]	@ (8000704 <MX_GPIO_Init+0x130>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_GPIO_Init+0x130>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_GPIO_Init+0x130>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a39      	ldr	r2, [pc, #228]	@ (8000704 <MX_GPIO_Init+0x130>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0x130>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD3_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	21a0      	movs	r1, #160	@ 0xa0
 8000636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063a:	f000 fd97 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000646:	f000 fd91 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000650:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <MX_GPIO_Init+0x134>)
 8000662:	f000 fbd9 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000666:	2312      	movs	r3, #18
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f000 fbcb 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 8000682:	23e0      	movs	r3, #224	@ 0xe0
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f000 fbbc 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4619      	mov	r1, r3
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <MX_GPIO_Init+0x138>)
 80006b6:	f000 fbaf 	bl	8000e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2006      	movs	r0, #6
 80006c0:	f000 faf5 	bl	8000cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006c4:	2006      	movs	r0, #6
 80006c6:	f000 fb0e 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2007      	movs	r0, #7
 80006d0:	f000 faed 	bl	8000cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006d4:	2007      	movs	r0, #7
 80006d6:	f000 fb06 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200a      	movs	r0, #10
 80006e0:	f000 fae5 	bl	8000cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 fafe 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2028      	movs	r0, #40	@ 0x28
 80006f0:	f000 fadd 	bl	8000cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f4:	2028      	movs	r0, #40	@ 0x28
 80006f6:	f000 faf6 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fa:	bf00      	nop
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	48000800 	.word	0x48000800
 800070c:	48000400 	.word	0x48000400

08000710 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick(); // getting actual time on MS
 800071a:	f000 f9e1 	bl	8000ae0 <HAL_GetTick>
 800071e:	60f8      	str	r0, [r7, #12]
	if (GPIO_Pin == S1_Pin)
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d120      	bne.n	8000768 <HAL_GPIO_EXTI_Callback+0x58>
	  { // Button 1 is pressed
	    if (current_time - last_button_press_left < doublePressTimeFEA)
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000732:	4293      	cmp	r3, r2
 8000734:	d207      	bcs.n	8000746 <HAL_GPIO_EXTI_Callback+0x36>
	    {
	      timmingb1++; // Increase counter button 1
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <HAL_GPIO_EXTI_Callback+0xac>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <HAL_GPIO_EXTI_Callback+0xac>)
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e002      	b.n	800074c <HAL_GPIO_EXTI_Callback+0x3c>
	    }
	    else
	    {
	      timmingb1 = 1; // Reset counter if time is 500ms or plus
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <HAL_GPIO_EXTI_Callback+0xac>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
	    }
	    last_button_press_left = current_time;
 800074c:	4a1a      	ldr	r2, [pc, #104]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6013      	str	r3, [r2, #0]
	    flag_left = !flag_left;
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf0c      	ite	eq
 800075c:	2301      	moveq	r3, #1
 800075e:	2300      	movne	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000766:	701a      	strb	r2, [r3, #0]
	  }

	  if (GPIO_Pin == S2_Pin)
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	2b10      	cmp	r3, #16
 800076c:	d120      	bne.n	80007b0 <HAL_GPIO_EXTI_Callback+0xa0>
	  { // button 2 is pressed
	    if (current_time - last_button_press_right < doublePressTimeFEA)
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800077a:	4293      	cmp	r3, r2
 800077c:	d207      	bcs.n	800078e <HAL_GPIO_EXTI_Callback+0x7e>
	    {
	      timmingb2++;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3301      	adds	r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e002      	b.n	8000794 <HAL_GPIO_EXTI_Callback+0x84>
	    }
	    else
	    {
	      timmingb2 = 1; // reset counter
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
	    }
	    last_button_press_right = current_time;
 8000794:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6013      	str	r3, [r2, #0]
	    flag_right = !flag_right;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <HAL_GPIO_EXTI_Callback+0xbc>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf0c      	ite	eq
 80007a4:	2301      	moveq	r3, #1
 80007a6:	2300      	movne	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <HAL_GPIO_EXTI_Callback+0xbc>)
 80007ae:	701a      	strb	r2, [r3, #0]
	  if (GPIO_Pin == S3_Pin)
	  {
 // to add B3 stationary control
	  }

}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000b4 	.word	0x200000b4
 80007bc:	200000b2 	.word	0x200000b2
 80007c0:	200000b0 	.word	0x200000b0
 80007c4:	200000b8 	.word	0x200000b8
 80007c8:	200000b3 	.word	0x200000b3
 80007cc:	200000b1 	.word	0x200000b1

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	@ 0x58
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ac      	sub	sp, #176	@ 0xb0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2288      	movs	r2, #136	@ 0x88
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f850 	bl	80038ea <memset>
  if(huart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <HAL_UART_MspInit+0xc0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d143      	bne.n	80008dc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fb17 	bl	8001e94 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ffb0 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <HAL_UART_MspInit+0xc4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000874:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <HAL_UART_MspInit+0xc4>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087a:	6593      	str	r3, [r2, #88]	@ 0x58
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <HAL_UART_MspInit+0xc4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <HAL_UART_MspInit+0xc4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <HAL_UART_MspInit+0xc4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <HAL_UART_MspInit+0xc4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008a0:	230c      	movs	r3, #12
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b8:	2307      	movs	r3, #7
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f000 faa6 	bl	8000e18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2026      	movs	r0, #38	@ 0x26
 80008d2:	f000 f9ec 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d6:	2026      	movs	r0, #38	@ 0x26
 80008d8:	f000 fa05 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	37b0      	adds	r7, #176	@ 0xb0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f8b9 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fc24 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 800095c:	2002      	movs	r0, #2
 800095e:	f000 fc1d 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 800096a:	2010      	movs	r0, #16
 800096c:	f000 fc16 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <USART2_IRQHandler+0x10>)
 800097a:	f001 ff95 	bl	80028a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000028 	.word	0x20000028

08000988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 800098c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000990:	f000 fc04 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 ff87 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ee:	f7ff fd63 	bl	80004b8 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a00:	080039b4 	.word	0x080039b4
  ldr r2, =_sbss
 8000a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a08:	200000c0 	.word	0x200000c0

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>

08000a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f93d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f80e 	bl	8000a40 <HAL_InitTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e001      	b.n	8000a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a30:	f7ff fed4 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d023      	beq.n	8000a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a54:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <HAL_InitTick+0x70>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f949 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10f      	bne.n	8000a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d809      	bhi.n	8000a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f913 	bl	8000cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_InitTick+0x74>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	e007      	b.n	8000aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e004      	b.n	8000aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e001      	b.n	8000aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200000bc 	.word	0x200000bc

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200000bc 	.word	0x200000bc

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d008      	beq.n	8000d44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2204      	movs	r2, #4
 8000d36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e022      	b.n	8000d8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 020e 	bic.w	r2, r2, #14
 8000d52:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d68:	f003 021c 	and.w	r2, r3, #28
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d005      	beq.n	8000dba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2204      	movs	r2, #4
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e029      	b.n	8000e0e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020e 	bic.w	r2, r2, #14
 8000dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f003 021c 	and.w	r2, r3, #28
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	4798      	blx	r3
    }
  }
  return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e17f      	b.n	8001128 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8171 	beq.w	8001122 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d118      	bne.n	8000ef8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d017      	beq.n	8000f34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ac 	beq.w	8001122 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b5f      	ldr	r3, [pc, #380]	@ (8001148 <HAL_GPIO_Init+0x330>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fce:	4a5e      	ldr	r2, [pc, #376]	@ (8001148 <HAL_GPIO_Init+0x330>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8001148 <HAL_GPIO_Init+0x330>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe2:	4a5a      	ldr	r2, [pc, #360]	@ (800114c <HAL_GPIO_Init+0x334>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800100c:	d025      	beq.n	800105a <HAL_GPIO_Init+0x242>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	@ (8001150 <HAL_GPIO_Init+0x338>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01f      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	@ (8001154 <HAL_GPIO_Init+0x33c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	@ (8001158 <HAL_GPIO_Init+0x340>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x236>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <HAL_GPIO_Init+0x344>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x232>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	@ (8001160 <HAL_GPIO_Init+0x348>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x22e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <HAL_GPIO_Init+0x34c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x22a>
 800103e:	2306      	movs	r3, #6
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001042:	2307      	movs	r3, #7
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x244>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x244>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x244>
 800105a:	2300      	movs	r3, #0
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106c:	4937      	ldr	r1, [pc, #220]	@ (800114c <HAL_GPIO_Init+0x334>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107a:	4b3b      	ldr	r3, [pc, #236]	@ (8001168 <HAL_GPIO_Init+0x350>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109e:	4a32      	ldr	r2, [pc, #200]	@ (8001168 <HAL_GPIO_Init+0x350>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <HAL_GPIO_Init+0x350>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c8:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <HAL_GPIO_Init+0x350>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ce:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <HAL_GPIO_Init+0x350>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001168 <HAL_GPIO_Init+0x350>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <HAL_GPIO_Init+0x350>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111c:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <HAL_GPIO_Init+0x350>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	f47f ae78 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	48001800 	.word	0x48001800
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001188:	e002      	b.n	8001190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff faa8 	bl	8000710 <HAL_GPIO_EXTI_Callback>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007000 	.word	0x40007000

080011e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f6:	d130      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001204:	d038      	beq.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2232      	movs	r2, #50	@ 0x32
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122c:	e002      	b.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3b01      	subs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001240:	d102      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f2      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001254:	d110      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e00f      	b.n	800127a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001266:	d007      	beq.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40007000 	.word	0x40007000
 800128c:	20000000 	.word	0x20000000
 8001290:	431bde83 	.word	0x431bde83

08001294 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e3ca      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a6:	4b97      	ldr	r3, [pc, #604]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b0:	4b94      	ldr	r3, [pc, #592]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80e4 	beq.w	8001490 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_RCC_OscConfig+0x4a>
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	f040 808b 	bne.w	80013ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f040 8087 	bne.w	80013ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012de:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x62>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e3a2      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	4b82      	ldr	r3, [pc, #520]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <HAL_RCC_OscConfig+0x7c>
 8001306:	4b7f      	ldr	r3, [pc, #508]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800130e:	e005      	b.n	800131c <HAL_RCC_OscConfig+0x88>
 8001310:	4b7c      	ldr	r3, [pc, #496]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800131c:	4293      	cmp	r3, r2
 800131e:	d223      	bcs.n	8001368 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fd55 	bl	8001dd4 <RCC_SetFlashLatencyFromMSIRange>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e383      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	4b73      	ldr	r3, [pc, #460]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a72      	ldr	r2, [pc, #456]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b70      	ldr	r3, [pc, #448]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	496d      	ldr	r1, [pc, #436]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001352:	4b6c      	ldr	r3, [pc, #432]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4968      	ldr	r1, [pc, #416]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
 8001366:	e025      	b.n	80013b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001368:	4b66      	ldr	r3, [pc, #408]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a65      	ldr	r2, [pc, #404]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b63      	ldr	r3, [pc, #396]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4960      	ldr	r1, [pc, #384]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001386:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	495b      	ldr	r1, [pc, #364]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fd15 	bl	8001dd4 <RCC_SetFlashLatencyFromMSIRange>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e343      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b4:	f000 fc4a 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b52      	ldr	r3, [pc, #328]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	4950      	ldr	r1, [pc, #320]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80013c6:	5ccb      	ldrb	r3, [r1, r3]
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
 80013d0:	4a4e      	ldr	r2, [pc, #312]	@ (800150c <HAL_RCC_OscConfig+0x278>)
 80013d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fb31 	bl	8000a40 <HAL_InitTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d052      	beq.n	800148e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	e327      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d032      	beq.n	800145a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f4:	4b43      	ldr	r3, [pc, #268]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a42      	ldr	r2, [pc, #264]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb6e 	bl	8000ae0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001408:	f7ff fb6a 	bl	8000ae0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e310      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141a:	4b3a      	ldr	r3, [pc, #232]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001426:	4b37      	ldr	r3, [pc, #220]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a36      	ldr	r2, [pc, #216]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4931      	ldr	r1, [pc, #196]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	492c      	ldr	r1, [pc, #176]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e01a      	b.n	8001490 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800145a:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a29      	ldr	r2, [pc, #164]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001466:	f7ff fb3b 	bl	8000ae0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146e:	f7ff fb37 	bl	8000ae0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e2dd      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x1da>
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800148e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d074      	beq.n	8001586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x21a>
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	d10e      	bne.n	80014c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d064      	beq.n	8001584 <HAL_RCC_OscConfig+0x2f0>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d160      	bne.n	8001584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e2ba      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x24a>
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e026      	b.n	800152c <HAL_RCC_OscConfig+0x298>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e6:	d115      	bne.n	8001514 <HAL_RCC_OscConfig+0x280>
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a02      	ldr	r2, [pc, #8]	@ (8001504 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x298>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	0800395c 	.word	0x0800395c
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004
 8001514:	4ba0      	ldr	r3, [pc, #640]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a9f      	ldr	r2, [pc, #636]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800151a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b9d      	ldr	r3, [pc, #628]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a9c      	ldr	r2, [pc, #624]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fad4 	bl	8000ae0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fad0 	bl	8000ae0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	@ 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e276      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	4b92      	ldr	r3, [pc, #584]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x2a8>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fac0 	bl	8000ae0 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fabc 	bl	8000ae0 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	@ 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e262      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001576:	4b88      	ldr	r3, [pc, #544]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x2d0>
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d060      	beq.n	8001654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x310>
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d119      	bne.n	80015d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d116      	bne.n	80015d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x328>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e23f      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b76      	ldr	r3, [pc, #472]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	4973      	ldr	r1, [pc, #460]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	e040      	b.n	8001654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d023      	beq.n	8001622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015da:	4b6f      	ldr	r3, [pc, #444]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6e      	ldr	r2, [pc, #440]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fa7b 	bl	8000ae0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fa77 	bl	8000ae0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e21d      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001600:	4b65      	ldr	r3, [pc, #404]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b62      	ldr	r3, [pc, #392]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	495f      	ldr	r1, [pc, #380]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e018      	b.n	8001654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b5d      	ldr	r3, [pc, #372]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a5c      	ldr	r2, [pc, #368]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800162c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fa57 	bl	8000ae0 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fa53 	bl	8000ae0 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1f9      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001648:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03c      	beq.n	80016da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001668:	4b4b      	ldr	r3, [pc, #300]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166e:	4a4a      	ldr	r2, [pc, #296]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fa32 	bl	8000ae0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fa2e 	bl	8000ae0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1d4      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001692:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ef      	beq.n	8001680 <HAL_RCC_OscConfig+0x3ec>
 80016a0:	e01b      	b.n	80016da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fa15 	bl	8000ae0 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ba:	f7ff fa11 	bl	8000ae0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1b7      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016cc:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ef      	bne.n	80016ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80a6 	beq.w	8001834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10d      	bne.n	8001714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	4a26      	ldr	r2, [pc, #152]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	@ 0x58
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001710:	2301      	movs	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <HAL_RCC_OscConfig+0x508>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d118      	bne.n	8001752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <HAL_RCC_OscConfig+0x508>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <HAL_RCC_OscConfig+0x508>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172c:	f7ff f9d8 	bl	8000ae0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff f9d4 	bl	8000ae0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e17a      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_RCC_OscConfig+0x508>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_RCC_OscConfig+0x4d8>
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176a:	e029      	b.n	80017c0 <HAL_RCC_OscConfig+0x52c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d115      	bne.n	80017a0 <HAL_RCC_OscConfig+0x50c>
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	4a03      	ldr	r2, [pc, #12]	@ (8001798 <HAL_RCC_OscConfig+0x504>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x52c>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40007000 	.word	0x40007000
 80017a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	4a9b      	ldr	r2, [pc, #620]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b0:	4b98      	ldr	r3, [pc, #608]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b6:	4a97      	ldr	r2, [pc, #604]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d016      	beq.n	80017f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff f98a 	bl	8000ae0 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff f986 	bl	8000ae0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e12a      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ed      	beq.n	80017d0 <HAL_RCC_OscConfig+0x53c>
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff f973 	bl	8000ae0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff f96f 	bl	8000ae0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e113      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001814:	4b7f      	ldr	r3, [pc, #508]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ed      	bne.n	80017fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7ffb      	ldrb	r3, [r7, #31]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b7a      	ldr	r3, [pc, #488]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	4a79      	ldr	r2, [pc, #484]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80fe 	beq.w	8001a3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001842:	2b02      	cmp	r3, #2
 8001844:	f040 80d0 	bne.w	80019e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001848:	4b72      	ldr	r3, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	429a      	cmp	r2, r3
 800185a:	d130      	bne.n	80018be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	3b01      	subs	r3, #1
 8001868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d127      	bne.n	80018be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001878:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d11f      	bne.n	80018be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001888:	2a07      	cmp	r2, #7
 800188a:	bf14      	ite	ne
 800188c:	2201      	movne	r2, #1
 800188e:	2200      	moveq	r2, #0
 8001890:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	4293      	cmp	r3, r2
 8001894:	d113      	bne.n	80018be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	3b01      	subs	r3, #1
 80018a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d109      	bne.n	80018be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d06e      	beq.n	800199c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d069      	beq.n	8001998 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018c4:	4b53      	ldr	r3, [pc, #332]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018d0:	4b50      	ldr	r3, [pc, #320]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0ad      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ec:	f7ff f8f8 	bl	8000ae0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f8f4 	bl	8000ae0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e09a      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001906:	4b43      	ldr	r3, [pc, #268]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001912:	4b40      	ldr	r3, [pc, #256]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	4b40      	ldr	r3, [pc, #256]	@ (8001a18 <HAL_RCC_OscConfig+0x784>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001922:	3a01      	subs	r2, #1
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800192c:	0212      	lsls	r2, r2, #8
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001934:	0852      	lsrs	r2, r2, #1
 8001936:	3a01      	subs	r2, #1
 8001938:	0552      	lsls	r2, r2, #21
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001940:	0852      	lsrs	r2, r2, #1
 8001942:	3a01      	subs	r2, #1
 8001944:	0652      	lsls	r2, r2, #25
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800194c:	0912      	lsrs	r2, r2, #4
 800194e:	0452      	lsls	r2, r2, #17
 8001950:	430a      	orrs	r2, r1
 8001952:	4930      	ldr	r1, [pc, #192]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001958:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001964:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4a2a      	ldr	r2, [pc, #168]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001970:	f7ff f8b6 	bl	8000ae0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f8b2 	bl	8000ae0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e058      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001996:	e050      	b.n	8001a3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e04f      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d148      	bne.n	8001a3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b4:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c0:	f7ff f88e 	bl	8000ae0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f88a 	bl	8000ae0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e030      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x734>
 80019e6:	e028      	b.n	8001a3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d023      	beq.n	8001a36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 80019f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f871 	bl	8000ae0 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	e00c      	b.n	8001a1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f86d 	bl	8000ae0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d905      	bls.n	8001a1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_RCC_OscConfig+0x7b0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ec      	bne.n	8001a02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_RCC_OscConfig+0x7b0>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4905      	ldr	r1, [pc, #20]	@ (8001a44 <HAL_RCC_OscConfig+0x7b0>)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x7b4>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e001      	b.n	8001a3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	feeefffc 	.word	0xfeeefffc

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0e7      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b75      	ldr	r3, [pc, #468]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b72      	ldr	r3, [pc, #456]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4970      	ldr	r1, [pc, #448]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0cf      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d908      	bls.n	8001abe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4960      	ldr	r1, [pc, #384]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d04c      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d121      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0a6      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aea:	4b54      	ldr	r3, [pc, #336]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e09a      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b02:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e08e      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e086      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b46      	ldr	r3, [pc, #280]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4943      	ldr	r1, [pc, #268]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b34:	f7fe ffd4 	bl	8000ae0 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7fe ffd0 	bl	8000ae0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e06e      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b3a      	ldr	r3, [pc, #232]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d010      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d208      	bcs.n	8001b92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	492b      	ldr	r1, [pc, #172]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d210      	bcs.n	8001bc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba0:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 0207 	bic.w	r2, r3, #7
 8001ba8:	4923      	ldr	r1, [pc, #140]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e036      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4918      	ldr	r1, [pc, #96]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4910      	ldr	r1, [pc, #64]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c00:	f000 f824 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	490b      	ldr	r1, [pc, #44]	@ (8001c40 <HAL_RCC_ClockConfig+0x1f4>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_ClockConfig+0x1fc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe ff0b 	bl	8000a40 <HAL_InitTick>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	0800395c 	.word	0x0800395c
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c64:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d121      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d11e      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c80:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c8c:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	e004      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d134      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d003      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cf0:	e005      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf4:	617b      	str	r3, [r7, #20]
      break;
 8001cf6:	e005      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cfa:	617b      	str	r3, [r7, #20]
      break;
 8001cfc:	e002      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	617b      	str	r3, [r7, #20]
      break;
 8001d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	3301      	adds	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	0e5b      	lsrs	r3, r3, #25
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	3301      	adds	r3, #1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d44:	69bb      	ldr	r3, [r7, #24]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08003974 	.word	0x08003974
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	0800396c 	.word	0x0800396c

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dac:	f7ff ffda 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0adb      	lsrs	r3, r3, #11
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4904      	ldr	r1, [pc, #16]	@ (8001dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	0800396c 	.word	0x0800396c

08001dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dec:	f7ff f9ee 	bl	80011cc <HAL_PWREx_GetVoltageRange>
 8001df0:	6178      	str	r0, [r7, #20]
 8001df2:	e014      	b.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	4a24      	ldr	r2, [pc, #144]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e00:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e0c:	f7ff f9de 	bl	80011cc <HAL_PWREx_GetVoltageRange>
 8001e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	4a1d      	ldr	r2, [pc, #116]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e24:	d10b      	bne.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	@ 0x80
 8001e2a:	d919      	bls.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e30:	d902      	bls.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e32:	2302      	movs	r3, #2
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	e013      	b.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e010      	b.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b80      	cmp	r3, #128	@ 0x80
 8001e42:	d902      	bls.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e44:	2303      	movs	r3, #3
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	e00a      	b.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b80      	cmp	r3, #128	@ 0x80
 8001e4e:	d102      	bne.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e50:	2302      	movs	r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e004      	b.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b70      	cmp	r3, #112	@ 0x70
 8001e5a:	d101      	bne.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 0207 	bic.w	r2, r3, #7
 8001e68:	4909      	ldr	r1, [pc, #36]	@ (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d041      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001eb8:	d02a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001eba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ebe:	d824      	bhi.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ec0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ec6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001eca:	d81e      	bhi.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ed4:	d010      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ed6:	e018      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed8:	4b86      	ldr	r3, [pc, #536]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a85      	ldr	r2, [pc, #532]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee4:	e015      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fabb 	bl	8002468 <RCCEx_PLLSAI1_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef6:	e00c      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3320      	adds	r3, #32
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fba6 	bl	8002650 <RCCEx_PLLSAI2_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f08:	e003      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0e:	e000      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f12:	7cfb      	ldrb	r3, [r7, #19]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f18:	4b76      	ldr	r3, [pc, #472]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f26:	4973      	ldr	r1, [pc, #460]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f2e:	e001      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d041      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f48:	d02a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f4e:	d824      	bhi.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f54:	d008      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f5a:	d81e      	bhi.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f64:	d010      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f66:	e018      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f68:	4b62      	ldr	r3, [pc, #392]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a61      	ldr	r2, [pc, #388]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f74:	e015      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa73 	bl	8002468 <RCCEx_PLLSAI1_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f86:	e00c      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3320      	adds	r3, #32
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fb5e 	bl	8002650 <RCCEx_PLLSAI2_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f98:	e003      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fa8:	4b52      	ldr	r3, [pc, #328]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fb6:	494f      	ldr	r1, [pc, #316]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fbe:	e001      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a0 	beq.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff0:	4a40      	ldr	r2, [pc, #256]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002004:	2301      	movs	r3, #1
 8002006:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002008:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3a      	ldr	r2, [pc, #232]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002014:	f7fe fd64 	bl	8000ae0 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800201a:	e009      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe fd60 	bl	8000ae0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d902      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	74fb      	strb	r3, [r7, #19]
        break;
 800202e:	e005      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002030:	4b31      	ldr	r3, [pc, #196]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d15c      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002042:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002048:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01f      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	d019      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002060:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800206a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002072:	4a20      	ldr	r2, [pc, #128]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800208c:	4a19      	ldr	r2, [pc, #100]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7fe fd1f 	bl	8000ae0 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	e00b      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe fd1b 	bl	8000ae0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d902      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	74fb      	strb	r3, [r7, #19]
            break;
 80020bc:	e006      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ec      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e2:	4904      	ldr	r1, [pc, #16]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020ea:	e009      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	74bb      	strb	r3, [r7, #18]
 80020f0:	e006      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002100:	7c7b      	ldrb	r3, [r7, #17]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b9e      	ldr	r3, [pc, #632]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	4a9d      	ldr	r2, [pc, #628]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211e:	4b98      	ldr	r3, [pc, #608]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002124:	f023 0203 	bic.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212c:	4994      	ldr	r1, [pc, #592]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002140:	4b8f      	ldr	r3, [pc, #572]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f023 020c 	bic.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214e:	498c      	ldr	r1, [pc, #560]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002162:	4b87      	ldr	r3, [pc, #540]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002168:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	4983      	ldr	r1, [pc, #524]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002184:	4b7e      	ldr	r3, [pc, #504]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	497b      	ldr	r1, [pc, #492]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021a6:	4b76      	ldr	r3, [pc, #472]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b4:	4972      	ldr	r1, [pc, #456]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	496a      	ldr	r1, [pc, #424]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	4961      	ldr	r1, [pc, #388]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800220c:	4b5c      	ldr	r3, [pc, #368]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	4959      	ldr	r1, [pc, #356]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222e:	4b54      	ldr	r3, [pc, #336]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223c:	4950      	ldr	r1, [pc, #320]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002250:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	4948      	ldr	r1, [pc, #288]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002272:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	493f      	ldr	r1, [pc, #252]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d028      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002294:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a2:	4937      	ldr	r1, [pc, #220]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b4:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a31      	ldr	r2, [pc, #196]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022be:	60d3      	str	r3, [r2, #12]
 80022c0:	e011      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	2101      	movs	r1, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f8c8 	bl	8002468 <RCCEx_PLLSAI1_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d028      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002300:	491f      	ldr	r1, [pc, #124]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002310:	d106      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4a1a      	ldr	r2, [pc, #104]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231c:	60d3      	str	r3, [r2, #12]
 800231e:	e011      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002328:	d10c      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f899 	bl	8002468 <RCCEx_PLLSAI1_Config>
 8002336:	4603      	mov	r3, r0
 8002338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02b      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800235e:	4908      	ldr	r1, [pc, #32]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800236e:	d109      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a02      	ldr	r2, [pc, #8]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
 800237c:	e014      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f867 	bl	8002468 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02f      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023c2:	4928      	ldr	r1, [pc, #160]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f844 	bl	8002468 <RCCEx_PLLSAI1_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	74bb      	strb	r3, [r7, #18]
 80023ee:	e011      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3320      	adds	r3, #32
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f925 	bl	8002650 <RCCEx_PLLSAI2_Config>
 8002406:	4603      	mov	r3, r0
 8002408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800242e:	490d      	ldr	r1, [pc, #52]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002452:	4904      	ldr	r1, [pc, #16]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800245a:	7cbb      	ldrb	r3, [r7, #18]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000

08002468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002476:	4b75      	ldr	r3, [pc, #468]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d018      	beq.n	80024b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002482:	4b72      	ldr	r3, [pc, #456]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0203 	and.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d10d      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
       ||
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800249a:	4b6c      	ldr	r3, [pc, #432]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
       ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d047      	beq.n	800253e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e044      	b.n	800253e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d018      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x86>
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d825      	bhi.n	800250c <RCCEx_PLLSAI1_Config+0xa4>
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d002      	beq.n	80024ca <RCCEx_PLLSAI1_Config+0x62>
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d009      	beq.n	80024dc <RCCEx_PLLSAI1_Config+0x74>
 80024c8:	e020      	b.n	800250c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024ca:	4b60      	ldr	r3, [pc, #384]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11d      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024da:	e01a      	b.n	8002512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024dc:	4b5b      	ldr	r3, [pc, #364]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d116      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ec:	e013      	b.n	8002516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800250a:	e006      	b.n	800251a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      break;
 8002510:	e004      	b.n	800251c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800251a:	bf00      	nop
    }

    if(status == HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10d      	bne.n	800253e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002522:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	430b      	orrs	r3, r1
 8002538:	4944      	ldr	r1, [pc, #272]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d17d      	bne.n	8002640 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a40      	ldr	r2, [pc, #256]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800254e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe fac6 	bl	8000ae0 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002556:	e009      	b.n	800256c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002558:	f7fe fac2 	bl	8000ae0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d902      	bls.n	800256c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	73fb      	strb	r3, [r7, #15]
        break;
 800256a:	e005      	b.n	8002578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800256c:	4b37      	ldr	r3, [pc, #220]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ef      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d160      	bne.n	8002640 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002584:	4b31      	ldr	r3, [pc, #196]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800258c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6892      	ldr	r2, [r2, #8]
 8002594:	0211      	lsls	r1, r2, #8
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	0912      	lsrs	r2, r2, #4
 800259c:	0452      	lsls	r2, r2, #17
 800259e:	430a      	orrs	r2, r1
 80025a0:	492a      	ldr	r1, [pc, #168]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	610b      	str	r3, [r1, #16]
 80025a6:	e027      	b.n	80025f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d112      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ae:	4b27      	ldr	r3, [pc, #156]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	0211      	lsls	r1, r2, #8
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6912      	ldr	r2, [r2, #16]
 80025c4:	0852      	lsrs	r2, r2, #1
 80025c6:	3a01      	subs	r2, #1
 80025c8:	0552      	lsls	r2, r2, #21
 80025ca:	430a      	orrs	r2, r1
 80025cc:	491f      	ldr	r1, [pc, #124]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	610b      	str	r3, [r1, #16]
 80025d2:	e011      	b.n	80025f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	0211      	lsls	r1, r2, #8
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6952      	ldr	r2, [r2, #20]
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0652      	lsls	r2, r2, #25
 80025f0:	430a      	orrs	r2, r1
 80025f2:	4916      	ldr	r1, [pc, #88]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a13      	ldr	r2, [pc, #76]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002602:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fa6c 	bl	8000ae0 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800260a:	e009      	b.n	8002620 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800260c:	f7fe fa68 	bl	8000ae0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	73fb      	strb	r3, [r7, #15]
          break;
 800261e:	e005      	b.n	800262c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002620:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ef      	beq.n	800260c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4904      	ldr	r1, [pc, #16]	@ (800264c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800265e:	4b6a      	ldr	r3, [pc, #424]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800266a:	4b67      	ldr	r3, [pc, #412]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0203 	and.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d10d      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
       ||
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002682:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
       ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d047      	beq.n	8002726 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e044      	b.n	8002726 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d018      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x86>
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d825      	bhi.n	80026f4 <RCCEx_PLLSAI2_Config+0xa4>
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d002      	beq.n	80026b2 <RCCEx_PLLSAI2_Config+0x62>
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d009      	beq.n	80026c4 <RCCEx_PLLSAI2_Config+0x74>
 80026b0:	e020      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026b2:	4b55      	ldr	r3, [pc, #340]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11d      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c2:	e01a      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c4:	4b50      	ldr	r3, [pc, #320]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e013      	b.n	80026fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026e2:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026f2:	e006      	b.n	8002702 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e004      	b.n	8002704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002702:	bf00      	nop
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800270a:	4b3f      	ldr	r3, [pc, #252]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	430b      	orrs	r3, r1
 8002720:	4939      	ldr	r1, [pc, #228]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d167      	bne.n	80027fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800272c:	4b36      	ldr	r3, [pc, #216]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a35      	ldr	r2, [pc, #212]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe f9d2 	bl	8000ae0 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002740:	f7fe f9ce 	bl	8000ae0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
        break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002754:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ef      	bne.n	8002740 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d14a      	bne.n	80027fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d111      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800276c:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6892      	ldr	r2, [r2, #8]
 800277c:	0211      	lsls	r1, r2, #8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	0912      	lsrs	r2, r2, #4
 8002784:	0452      	lsls	r2, r2, #17
 8002786:	430a      	orrs	r2, r1
 8002788:	491f      	ldr	r1, [pc, #124]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	614b      	str	r3, [r1, #20]
 800278e:	e011      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002798:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	0211      	lsls	r1, r2, #8
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6912      	ldr	r2, [r2, #16]
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4916      	ldr	r1, [pc, #88]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe f98e 	bl	8000ae0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c6:	e009      	b.n	80027dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c8:	f7fe f98a 	bl	8000ae0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	73fb      	strb	r3, [r7, #15]
          break;
 80027da:	e005      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4904      	ldr	r1, [pc, #16]	@ (8002808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e040      	b.n	80028a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fd fff8 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	@ 0x24
 8002838:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fdea 	bl	800342c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb2f 	bl	8002ebc <UART_SetConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01b      	b.n	80028a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fe69 	bl	8003570 <UART_CheckIdleState>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0ba      	sub	sp, #232	@ 0xe8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80028d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80028d6:	4013      	ands	r3, r2
 80028d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80028dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00f      	beq.n	8002910 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 82ae 	beq.w	8002e62 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
      }
      return;
 800290e:	e2a8      	b.n	8002e62 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8117 	beq.w	8002b48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800291a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002926:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800292a:	4b85      	ldr	r3, [pc, #532]	@ (8002b40 <HAL_UART_IRQHandler+0x298>)
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 810a 	beq.w	8002b48 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d011      	beq.n	8002964 <HAL_UART_IRQHandler+0xbc>
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <HAL_UART_IRQHandler+0xec>
 8002970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2202      	movs	r2, #2
 8002982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d011      	beq.n	80029c4 <HAL_UART_IRQHandler+0x11c>
 80029a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2204      	movs	r2, #4
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ba:	f043 0202 	orr.w	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2208      	movs	r2, #8
 80029ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f6:	f043 0208 	orr.w	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <HAL_UART_IRQHandler+0x18a>
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8214 	beq.w	8002e66 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	2b40      	cmp	r3, #64	@ 0x40
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d04f      	beq.n	8002b2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fe7f 	bl	800378e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	2b40      	cmp	r3, #64	@ 0x40
 8002a9c:	d141      	bne.n	8002b22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002abc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002aca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1d9      	bne.n	8002a9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d013      	beq.n	8002b1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af6:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <HAL_UART_IRQHandler+0x29c>)
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f949 	bl	8000d96 <HAL_DMA_Abort_IT>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b14:	4610      	mov	r0, r2
 8002b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	e00f      	b.n	8002b3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9b8 	bl	8002e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	e00b      	b.n	8002b3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f9b4 	bl	8002e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	e007      	b.n	8002b3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9b0 	bl	8002e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002b38:	e195      	b.n	8002e66 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3a:	bf00      	nop
    return;
 8002b3c:	e193      	b.n	8002e66 <HAL_UART_IRQHandler+0x5be>
 8002b3e:	bf00      	nop
 8002b40:	04000120 	.word	0x04000120
 8002b44:	08003857 	.word	0x08003857

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 814e 	bne.w	8002dee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8147 	beq.w	8002dee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8140 	beq.w	8002dee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2210      	movs	r2, #16
 8002b74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	f040 80b8 	bne.w	8002cf6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8167 	beq.w	8002e6a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f080 815f 	bcs.w	8002e6a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8086 	bne.w	8002cd4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1da      	bne.n	8002bc8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3308      	adds	r3, #8
 8002c18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3308      	adds	r3, #8
 8002c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e1      	bne.n	8002c12 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3308      	adds	r3, #8
 8002c54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e3      	bne.n	8002c4e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ca4:	f023 0310 	bic.w	r3, r3, #16
 8002ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e4      	bne.n	8002c94 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f823 	bl	8000d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8d8 	bl	8002ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cf4:	e0b9      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80ab 	beq.w	8002e6e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80a6 	beq.w	8002e6e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e4      	bne.n	8002d22 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	623b      	str	r3, [r7, #32]
   return(result);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3308      	adds	r3, #8
 8002d78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d84:	e841 2300 	strex	r3, r2, [r1]
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e3      	bne.n	8002d58 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f023 0310 	bic.w	r3, r3, #16
 8002db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e4      	bne.n	8002da4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f85c 	bl	8002ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dec:	e03f      	b.n	8002e6e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <HAL_UART_IRQHandler+0x570>
 8002dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fd60 	bl	80038d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e16:	e02d      	b.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
    }
    return;
 8002e40:	e017      	b.n	8002e72 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d012      	beq.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fd11 	bl	8003882 <UART_EndTransmit_IT>
    return;
 8002e60:	e008      	b.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002e62:	bf00      	nop
 8002e64:	e006      	b.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002e66:	bf00      	nop
 8002e68:	e004      	b.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002e6a:	bf00      	nop
 8002e6c:	e002      	b.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002e72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002e74:	37e8      	adds	r7, #232	@ 0xe8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop

08002e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b08a      	sub	sp, #40	@ 0x28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4ba4      	ldr	r3, [pc, #656]	@ (800317c <UART_SetConfig+0x2c0>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a99      	ldr	r2, [pc, #612]	@ (8003180 <UART_SetConfig+0x2c4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	4313      	orrs	r3, r2
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a90      	ldr	r2, [pc, #576]	@ (8003184 <UART_SetConfig+0x2c8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d126      	bne.n	8002f94 <UART_SetConfig+0xd8>
 8002f46:	4b90      	ldr	r3, [pc, #576]	@ (8003188 <UART_SetConfig+0x2cc>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d81b      	bhi.n	8002f8c <UART_SetConfig+0xd0>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <UART_SetConfig+0xa0>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f7d 	.word	0x08002f7d
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f85 	.word	0x08002f85
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f72:	e116      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002f74:	2302      	movs	r3, #2
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7a:	e112      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f82:	e10e      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002f84:	2308      	movs	r3, #8
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8a:	e10a      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f92:	e106      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a7c      	ldr	r2, [pc, #496]	@ (800318c <UART_SetConfig+0x2d0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d138      	bne.n	8003010 <UART_SetConfig+0x154>
 8002f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003188 <UART_SetConfig+0x2cc>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d82d      	bhi.n	8003008 <UART_SetConfig+0x14c>
 8002fac:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0xf8>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fe9 	.word	0x08002fe9
 8002fb8:	08003009 	.word	0x08003009
 8002fbc:	08003009 	.word	0x08003009
 8002fc0:	08003009 	.word	0x08003009
 8002fc4:	08002ff9 	.word	0x08002ff9
 8002fc8:	08003009 	.word	0x08003009
 8002fcc:	08003009 	.word	0x08003009
 8002fd0:	08003009 	.word	0x08003009
 8002fd4:	08002ff1 	.word	0x08002ff1
 8002fd8:	08003009 	.word	0x08003009
 8002fdc:	08003009 	.word	0x08003009
 8002fe0:	08003009 	.word	0x08003009
 8002fe4:	08003001 	.word	0x08003001
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fee:	e0d8      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff6:	e0d4      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e0d0      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003000:	2308      	movs	r3, #8
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e0cc      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003008:	2310      	movs	r3, #16
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e0c8      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5e      	ldr	r2, [pc, #376]	@ (8003190 <UART_SetConfig+0x2d4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d125      	bne.n	8003066 <UART_SetConfig+0x1aa>
 800301a:	4b5b      	ldr	r3, [pc, #364]	@ (8003188 <UART_SetConfig+0x2cc>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003020:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003024:	2b30      	cmp	r3, #48	@ 0x30
 8003026:	d016      	beq.n	8003056 <UART_SetConfig+0x19a>
 8003028:	2b30      	cmp	r3, #48	@ 0x30
 800302a:	d818      	bhi.n	800305e <UART_SetConfig+0x1a2>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d00a      	beq.n	8003046 <UART_SetConfig+0x18a>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d814      	bhi.n	800305e <UART_SetConfig+0x1a2>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <UART_SetConfig+0x182>
 8003038:	2b10      	cmp	r3, #16
 800303a:	d008      	beq.n	800304e <UART_SetConfig+0x192>
 800303c:	e00f      	b.n	800305e <UART_SetConfig+0x1a2>
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003044:	e0ad      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003046:	2302      	movs	r3, #2
 8003048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304c:	e0a9      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800304e:	2304      	movs	r3, #4
 8003050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003054:	e0a5      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003056:	2308      	movs	r3, #8
 8003058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305c:	e0a1      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800305e:	2310      	movs	r3, #16
 8003060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003064:	e09d      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4a      	ldr	r2, [pc, #296]	@ (8003194 <UART_SetConfig+0x2d8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d125      	bne.n	80030bc <UART_SetConfig+0x200>
 8003070:	4b45      	ldr	r3, [pc, #276]	@ (8003188 <UART_SetConfig+0x2cc>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003076:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800307a:	2bc0      	cmp	r3, #192	@ 0xc0
 800307c:	d016      	beq.n	80030ac <UART_SetConfig+0x1f0>
 800307e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003080:	d818      	bhi.n	80030b4 <UART_SetConfig+0x1f8>
 8003082:	2b80      	cmp	r3, #128	@ 0x80
 8003084:	d00a      	beq.n	800309c <UART_SetConfig+0x1e0>
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d814      	bhi.n	80030b4 <UART_SetConfig+0x1f8>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <UART_SetConfig+0x1d8>
 800308e:	2b40      	cmp	r3, #64	@ 0x40
 8003090:	d008      	beq.n	80030a4 <UART_SetConfig+0x1e8>
 8003092:	e00f      	b.n	80030b4 <UART_SetConfig+0x1f8>
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309a:	e082      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800309c:	2302      	movs	r3, #2
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a2:	e07e      	b.n	80031a2 <UART_SetConfig+0x2e6>
 80030a4:	2304      	movs	r3, #4
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030aa:	e07a      	b.n	80031a2 <UART_SetConfig+0x2e6>
 80030ac:	2308      	movs	r3, #8
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b2:	e076      	b.n	80031a2 <UART_SetConfig+0x2e6>
 80030b4:	2310      	movs	r3, #16
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ba:	e072      	b.n	80031a2 <UART_SetConfig+0x2e6>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a35      	ldr	r2, [pc, #212]	@ (8003198 <UART_SetConfig+0x2dc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d12a      	bne.n	800311c <UART_SetConfig+0x260>
 80030c6:	4b30      	ldr	r3, [pc, #192]	@ (8003188 <UART_SetConfig+0x2cc>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d4:	d01a      	beq.n	800310c <UART_SetConfig+0x250>
 80030d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030da:	d81b      	bhi.n	8003114 <UART_SetConfig+0x258>
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e0:	d00c      	beq.n	80030fc <UART_SetConfig+0x240>
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e6:	d815      	bhi.n	8003114 <UART_SetConfig+0x258>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <UART_SetConfig+0x238>
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f0:	d008      	beq.n	8003104 <UART_SetConfig+0x248>
 80030f2:	e00f      	b.n	8003114 <UART_SetConfig+0x258>
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e052      	b.n	80031a2 <UART_SetConfig+0x2e6>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e04e      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003104:	2304      	movs	r3, #4
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e04a      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800310c:	2308      	movs	r3, #8
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e046      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311a:	e042      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a17      	ldr	r2, [pc, #92]	@ (8003180 <UART_SetConfig+0x2c4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d13a      	bne.n	800319c <UART_SetConfig+0x2e0>
 8003126:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <UART_SetConfig+0x2cc>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003134:	d01a      	beq.n	800316c <UART_SetConfig+0x2b0>
 8003136:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800313a:	d81b      	bhi.n	8003174 <UART_SetConfig+0x2b8>
 800313c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003140:	d00c      	beq.n	800315c <UART_SetConfig+0x2a0>
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003146:	d815      	bhi.n	8003174 <UART_SetConfig+0x2b8>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <UART_SetConfig+0x298>
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003150:	d008      	beq.n	8003164 <UART_SetConfig+0x2a8>
 8003152:	e00f      	b.n	8003174 <UART_SetConfig+0x2b8>
 8003154:	2300      	movs	r3, #0
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315a:	e022      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800315c:	2302      	movs	r3, #2
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003162:	e01e      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003164:	2304      	movs	r3, #4
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316a:	e01a      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800316c:	2308      	movs	r3, #8
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003172:	e016      	b.n	80031a2 <UART_SetConfig+0x2e6>
 8003174:	2310      	movs	r3, #16
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e012      	b.n	80031a2 <UART_SetConfig+0x2e6>
 800317c:	efff69f3 	.word	0xefff69f3
 8003180:	40008000 	.word	0x40008000
 8003184:	40013800 	.word	0x40013800
 8003188:	40021000 	.word	0x40021000
 800318c:	40004400 	.word	0x40004400
 8003190:	40004800 	.word	0x40004800
 8003194:	40004c00 	.word	0x40004c00
 8003198:	40005000 	.word	0x40005000
 800319c:	2310      	movs	r3, #16
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a9f      	ldr	r2, [pc, #636]	@ (8003424 <UART_SetConfig+0x568>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d17a      	bne.n	80032a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d824      	bhi.n	80031fe <UART_SetConfig+0x342>
 80031b4:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <UART_SetConfig+0x300>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	080031e9 	.word	0x080031e9
 80031c8:	080031ff 	.word	0x080031ff
 80031cc:	080031ef 	.word	0x080031ef
 80031d0:	080031ff 	.word	0x080031ff
 80031d4:	080031ff 	.word	0x080031ff
 80031d8:	080031ff 	.word	0x080031ff
 80031dc:	080031f7 	.word	0x080031f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e0:	f7fe fdcc 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 80031e4:	61f8      	str	r0, [r7, #28]
        break;
 80031e6:	e010      	b.n	800320a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003428 <UART_SetConfig+0x56c>)
 80031ea:	61fb      	str	r3, [r7, #28]
        break;
 80031ec:	e00d      	b.n	800320a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ee:	f7fe fd2d 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 80031f2:	61f8      	str	r0, [r7, #28]
        break;
 80031f4:	e009      	b.n	800320a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fa:	61fb      	str	r3, [r7, #28]
        break;
 80031fc:	e005      	b.n	800320a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80fb 	beq.w	8003408 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	429a      	cmp	r2, r3
 8003220:	d305      	bcc.n	800322e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	429a      	cmp	r2, r3
 800322c:	d903      	bls.n	8003236 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003234:	e0e8      	b.n	8003408 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2200      	movs	r2, #0
 800323a:	461c      	mov	r4, r3
 800323c:	4615      	mov	r5, r2
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	022b      	lsls	r3, r5, #8
 8003248:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800324c:	0222      	lsls	r2, r4, #8
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	6849      	ldr	r1, [r1, #4]
 8003252:	0849      	lsrs	r1, r1, #1
 8003254:	2000      	movs	r0, #0
 8003256:	4688      	mov	r8, r1
 8003258:	4681      	mov	r9, r0
 800325a:	eb12 0a08 	adds.w	sl, r2, r8
 800325e:	eb43 0b09 	adc.w	fp, r3, r9
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003270:	4650      	mov	r0, sl
 8003272:	4659      	mov	r1, fp
 8003274:	f7fc ffa8 	bl	80001c8 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003286:	d308      	bcc.n	800329a <UART_SetConfig+0x3de>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328e:	d204      	bcs.n	800329a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e0b6      	b.n	8003408 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032a0:	e0b2      	b.n	8003408 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032aa:	d15e      	bne.n	800336a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d828      	bhi.n	8003306 <UART_SetConfig+0x44a>
 80032b4:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <UART_SetConfig+0x400>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	08003307 	.word	0x08003307
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	08003307 	.word	0x08003307
 80032d4:	08003307 	.word	0x08003307
 80032d8:	08003307 	.word	0x08003307
 80032dc:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe fd4c 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 80032e4:	61f8      	str	r0, [r7, #28]
        break;
 80032e6:	e014      	b.n	8003312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7fe fd5e 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 80032ec:	61f8      	str	r0, [r7, #28]
        break;
 80032ee:	e010      	b.n	8003312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003428 <UART_SetConfig+0x56c>)
 80032f2:	61fb      	str	r3, [r7, #28]
        break;
 80032f4:	e00d      	b.n	8003312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fca9 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 80032fa:	61f8      	str	r0, [r7, #28]
        break;
 80032fc:	e009      	b.n	8003312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003302:	61fb      	str	r3, [r7, #28]
        break;
 8003304:	e005      	b.n	8003312 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d077      	beq.n	8003408 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005a      	lsls	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d916      	bls.n	8003362 <UART_SetConfig+0x4a6>
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333a:	d212      	bcs.n	8003362 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f023 030f 	bic.w	r3, r3, #15
 8003344:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	b29b      	uxth	r3, r3
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	b29a      	uxth	r2, r3
 8003352:	8afb      	ldrh	r3, [r7, #22]
 8003354:	4313      	orrs	r3, r2
 8003356:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	8afa      	ldrh	r2, [r7, #22]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e052      	b.n	8003408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003368:	e04e      	b.n	8003408 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800336a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800336e:	2b08      	cmp	r3, #8
 8003370:	d827      	bhi.n	80033c2 <UART_SetConfig+0x506>
 8003372:	a201      	add	r2, pc, #4	@ (adr r2, 8003378 <UART_SetConfig+0x4bc>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033a5 	.word	0x080033a5
 8003380:	080033ad 	.word	0x080033ad
 8003384:	080033c3 	.word	0x080033c3
 8003388:	080033b3 	.word	0x080033b3
 800338c:	080033c3 	.word	0x080033c3
 8003390:	080033c3 	.word	0x080033c3
 8003394:	080033c3 	.word	0x080033c3
 8003398:	080033bb 	.word	0x080033bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800339c:	f7fe fcee 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 80033a0:	61f8      	str	r0, [r7, #28]
        break;
 80033a2:	e014      	b.n	80033ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7fe fd00 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 80033a8:	61f8      	str	r0, [r7, #28]
        break;
 80033aa:	e010      	b.n	80033ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <UART_SetConfig+0x56c>)
 80033ae:	61fb      	str	r3, [r7, #28]
        break;
 80033b0:	e00d      	b.n	80033ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b2:	f7fe fc4b 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 80033b6:	61f8      	str	r0, [r7, #28]
        break;
 80033b8:	e009      	b.n	80033ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033be:	61fb      	str	r3, [r7, #28]
        break;
 80033c0:	e005      	b.n	80033ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033cc:	bf00      	nop
    }

    if (pclk != 0U)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d019      	beq.n	8003408 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	085a      	lsrs	r2, r3, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	441a      	add	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d909      	bls.n	8003402 <UART_SetConfig+0x546>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f4:	d205      	bcs.n	8003402 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	e002      	b.n	8003408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003414:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003418:	4618      	mov	r0, r3
 800341a:	3728      	adds	r7, #40	@ 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003422:	bf00      	nop
 8003424:	40008000 	.word	0x40008000
 8003428:	00f42400 	.word	0x00f42400

0800342c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01a      	beq.n	8003542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352a:	d10a      	bne.n	8003542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b098      	sub	sp, #96	@ 0x60
 8003574:	af02      	add	r7, sp, #8
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003580:	f7fd faae 	bl	8000ae0 <HAL_GetTick>
 8003584:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d12e      	bne.n	80035f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f88c 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d021      	beq.n	80035f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e6      	bne.n	80035ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e062      	b.n	80036b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d149      	bne.n	8003694 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f856 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03c      	beq.n	8003694 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	623b      	str	r3, [r7, #32]
   return(result);
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
 800363a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800363e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60fb      	str	r3, [r7, #12]
   return(result);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800366c:	61fa      	str	r2, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69b9      	ldr	r1, [r7, #24]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	617b      	str	r3, [r7, #20]
   return(result);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e011      	b.n	80036b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3758      	adds	r7, #88	@ 0x58
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d0:	e049      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d045      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fd fa01 	bl	8000ae0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e048      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d031      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d110      	bne.n	8003732 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2208      	movs	r2, #8
 8003716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f838 	bl	800378e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2208      	movs	r2, #8
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e029      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800373c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003740:	d111      	bne.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800374a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f81e 	bl	800378e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d0a6      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800378e:	b480      	push	{r7}
 8003790:	b095      	sub	sp, #84	@ 0x54
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e5      	bne.n	80037c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	2b01      	cmp	r3, #1
 8003802:	d118      	bne.n	8003836 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	60bb      	str	r3, [r7, #8]
   return(result);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 0310 	bic.w	r3, r3, #16
 8003818:	647b      	str	r3, [r7, #68]	@ 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	613b      	str	r3, [r7, #16]
   return(result);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800384a:	bf00      	nop
 800384c:	3754      	adds	r7, #84	@ 0x54
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff fb0b 	bl	8002e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	60bb      	str	r3, [r7, #8]
   return(result);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6979      	ldr	r1, [r7, #20]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	613b      	str	r3, [r7, #16]
   return(result);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fad7 	bl	8002e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ce:	bf00      	nop
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <memset>:
 80038ea:	4402      	add	r2, r0
 80038ec:	4603      	mov	r3, r0
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d100      	bne.n	80038f4 <memset+0xa>
 80038f2:	4770      	bx	lr
 80038f4:	f803 1b01 	strb.w	r1, [r3], #1
 80038f8:	e7f9      	b.n	80038ee <memset+0x4>
	...

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	@ (8003938 <__libc_init_array+0x3c>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2600      	movs	r6, #0
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4d0b      	ldr	r5, [pc, #44]	@ (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	@ (8003940 <__libc_init_array+0x44>)
 8003910:	f000 f818 	bl	8003944 <_init>
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2600      	movs	r6, #0
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	080039ac 	.word	0x080039ac
 8003938:	080039ac 	.word	0x080039ac
 800393c:	080039ac 	.word	0x080039ac
 8003940:	080039b0 	.word	0x080039b0

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
