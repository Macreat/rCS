
4100901-tesla-turn-hazard-signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e14  08004e14  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004e1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000064  08004e80  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08004e80  0000631c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c736  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f49  00000000  00000000  000127ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00014718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f3  00000000  00000000  00015178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025381  00000000  00000000  0001596b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccbe  00000000  00000000  0003acec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6283  00000000  00000000  000479aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012dc2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e3c  00000000  00000000  0012dc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00130aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d48 	.word	0x08004d48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004d48 	.word	0x08004d48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a10      	ldr	r2, [pc, #64]	@ (80005c0 <HAL_UART_RxCpltCallback+0x50>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d10a      	bne.n	8000598 <HAL_UART_RxCpltCallback+0x28>
        ring_buffer_write(&rb_usart1, data);
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <HAL_UART_RxCpltCallback+0x54>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	480f      	ldr	r0, [pc, #60]	@ (80005c8 <HAL_UART_RxCpltCallback+0x58>)
 800058a:	f000 fa86 	bl	8000a9a <ring_buffer_write>
        HAL_UART_Receive_IT(&huart1, &data, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <HAL_UART_RxCpltCallback+0x54>)
 8000592:	480e      	ldr	r0, [pc, #56]	@ (80005cc <HAL_UART_RxCpltCallback+0x5c>)
 8000594:	f002 fc26 	bl	8002de4 <HAL_UART_Receive_IT>
    }

    if (huart->Instance == USART2) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <HAL_UART_RxCpltCallback+0x60>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10a      	bne.n	80005b8 <HAL_UART_RxCpltCallback+0x48>
        ring_buffer_write(&rb_usart2, data2);
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_UART_RxCpltCallback+0x64>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <HAL_UART_RxCpltCallback+0x68>)
 80005aa:	f000 fa76 	bl	8000a9a <ring_buffer_write>
        HAL_UART_Receive_IT(&huart2, &data2, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	4908      	ldr	r1, [pc, #32]	@ (80005d4 <HAL_UART_RxCpltCallback+0x64>)
 80005b2:	480a      	ldr	r0, [pc, #40]	@ (80005dc <HAL_UART_RxCpltCallback+0x6c>)
 80005b4:	f002 fc16 	bl	8002de4 <HAL_UART_Receive_IT>
    }
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40013800 	.word	0x40013800
 80005c4:	20000198 	.word	0x20000198
 80005c8:	200001a8 	.word	0x200001a8
 80005cc:	20000080 	.word	0x20000080
 80005d0:	40004400 	.word	0x40004400
 80005d4:	20000199 	.word	0x20000199
 80005d8:	200001bc 	.word	0x200001bc
 80005dc:	20000108 	.word	0x20000108

080005e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == S1_Pin) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d11c      	bne.n	800062a <HAL_GPIO_EXTI_Callback+0x4a>
        HAL_UART_Transmit(&huart2, (uint8_t *)"S1\r\n", 4, 10);
 80005f0:	230a      	movs	r3, #10
 80005f2:	2204      	movs	r2, #4
 80005f4:	4912      	ldr	r1, [pc, #72]	@ (8000640 <HAL_GPIO_EXTI_Callback+0x60>)
 80005f6:	4813      	ldr	r0, [pc, #76]	@ (8000644 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f8:	f002 fb6a 	bl	8002cd0 <HAL_UART_Transmit>
        if (HAL_GetTick() < (left_last_press_tick + 300)) {
 80005fc:	f000 fc6a 	bl	8000ed4 <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x68>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800060a:	429a      	cmp	r2, r3
 800060c:	d204      	bcs.n	8000618 <HAL_GPIO_EXTI_Callback+0x38>
            left_toggles = 0xFFFFFF; // Infinite toggling
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000610:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	e002      	b.n	800061e <HAL_GPIO_EXTI_Callback+0x3e>
        } else {
            left_toggles = 6;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <HAL_GPIO_EXTI_Callback+0x6c>)
 800061a:	2206      	movs	r2, #6
 800061c:	601a      	str	r2, [r3, #0]
        }
        left_last_press_tick = HAL_GetTick();
 800061e:	f000 fc59 	bl	8000ed4 <HAL_GetTick>
 8000622:	4603      	mov	r3, r0
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x68>)
 8000626:	6013      	str	r3, [r2, #0]
    } else if (GPIO_Pin == S2_Pin) {
        left_toggles = 0;
    }
}
 8000628:	e005      	b.n	8000636 <HAL_GPIO_EXTI_Callback+0x56>
    } else if (GPIO_Pin == S2_Pin) {
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b10      	cmp	r3, #16
 800062e:	d102      	bne.n	8000636 <HAL_GPIO_EXTI_Callback+0x56>
        left_toggles = 0;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08004d60 	.word	0x08004d60
 8000644:	20000108 	.word	0x20000108
 8000648:	20000194 	.word	0x20000194
 800064c:	20000190 	.word	0x20000190

08000650 <heartbeat>:
}
 *
 *
 */
void heartbeat(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    static uint32_t heartbeat_tick = 0;
    if (heartbeat_tick < HAL_GetTick()) {
 8000654:	f000 fc3e 	bl	8000ed4 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <heartbeat+0x30>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d90b      	bls.n	800067a <heartbeat+0x2a>
        heartbeat_tick = HAL_GetTick() + 500;
 8000662:	f000 fc37 	bl	8000ed4 <HAL_GetTick>
 8000666:	4603      	mov	r3, r0
 8000668:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <heartbeat+0x30>)
 800066e:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin); // Use appropriate GPIO
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f000 ff8b 	bl	8001590 <HAL_GPIO_TogglePin>
    }
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001c8 	.word	0x200001c8

08000684 <process_received_data>:

void process_received_data(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75fb      	strb	r3, [r7, #23]

    // Check if data is available in the ring buffer
    if (ring_buffer_read(&rb_usart1, &byte) != 0)
 800068e:	f107 0317 	add.w	r3, r7, #23
 8000692:	4619      	mov	r1, r3
 8000694:	481d      	ldr	r0, [pc, #116]	@ (800070c <process_received_data+0x88>)
 8000696:	f000 fa3a 	bl	8000b0e <ring_buffer_read>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d030      	beq.n	8000702 <process_received_data+0x7e>
    {
        // Debug: Print each byte received
        char debug_msg[16];
        sprintf(debug_msg, "Byte: %c\r\n", byte);
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	461a      	mov	r2, r3
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	491a      	ldr	r1, [pc, #104]	@ (8000710 <process_received_data+0x8c>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fead 	bl	8004408 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), 10);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd8d 	bl	80001d0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	1d39      	adds	r1, r7, #4
 80006bc:	230a      	movs	r3, #10
 80006be:	4815      	ldr	r0, [pc, #84]	@ (8000714 <process_received_data+0x90>)
 80006c0:	f002 fb06 	bl	8002cd0 <HAL_UART_Transmit>

        // Check if the received byte matches the expected sequence
        if (byte == doc_num[doc_num_index])
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <process_received_data+0x94>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <process_received_data+0x98>)
 80006cc:	5c9a      	ldrb	r2, [r3, r2]
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d113      	bne.n	80006fc <process_received_data+0x78>
        {
            doc_num_index++; // Proceed to next byte in the sequence
 80006d4:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <process_received_data+0x94>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <process_received_data+0x94>)
 80006de:	701a      	strb	r2, [r3, #0]

            // Check if the full sequence has been received
            if (doc_num_index == DOC_NUM_LEN)
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <process_received_data+0x94>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b08      	cmp	r3, #8
 80006e6:	d10c      	bne.n	8000702 <process_received_data+0x7e>
            {
                // Full sequence matched, print the name
                HAL_UART_Transmit(&huart2, (uint8_t *)"Nombre: Mateo Almeida \r\n", 25, 10);
 80006e8:	230a      	movs	r3, #10
 80006ea:	2219      	movs	r2, #25
 80006ec:	490c      	ldr	r1, [pc, #48]	@ (8000720 <process_received_data+0x9c>)
 80006ee:	4809      	ldr	r0, [pc, #36]	@ (8000714 <process_received_data+0x90>)
 80006f0:	f002 faee 	bl	8002cd0 <HAL_UART_Transmit>

                // Reset index for the next sequence reception
                doc_num_index = 0;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <process_received_data+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
            // If mismatch, don't reset the index immediately
            // Optionally, allow a sliding window or delay before resetting
            doc_num_index = 0;  // Reset if sequence doesn't match
        }
    }
}
 80006fa:	e002      	b.n	8000702 <process_received_data+0x7e>
            doc_num_index = 0;  // Reset if sequence doesn't match
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <process_received_data+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200001a8 	.word	0x200001a8
 8000710:	08004d68 	.word	0x08004d68
 8000714:	20000108 	.word	0x20000108
 8000718:	200001c4 	.word	0x200001c4
 800071c:	20000000 	.word	0x20000000
 8000720:	08004d74 	.word	0x08004d74

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 800072a:	f000 fb6a 	bl	8000e02 <HAL_Init>
    SystemClock_Config();
 800072e:	f000 f84f 	bl	80007d0 <SystemClock_Config>

    MX_GPIO_Init();
 8000732:	f000 f8cf 	bl	80008d4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000736:	f000 f89d 	bl	8000874 <MX_USART2_UART_Init>


    /* USER CODE BEGIN 2 */

    ring_buffer_init(&rb_usart1, mem_usart1, CAPACITY_USART1);
 800073a:	220a      	movs	r2, #10
 800073c:	491c      	ldr	r1, [pc, #112]	@ (80007b0 <main+0x8c>)
 800073e:	481d      	ldr	r0, [pc, #116]	@ (80007b4 <main+0x90>)
 8000740:	f000 f96c 	bl	8000a1c <ring_buffer_init>
    ring_buffer_init(&rb_usart2, mem_usart2, CAPACITY_USART2);
 8000744:	220a      	movs	r2, #10
 8000746:	491c      	ldr	r1, [pc, #112]	@ (80007b8 <main+0x94>)
 8000748:	481c      	ldr	r0, [pc, #112]	@ (80007bc <main+0x98>)
 800074a:	f000 f967 	bl	8000a1c <ring_buffer_init>

    HAL_UART_Receive_IT(&huart1, &data, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	491b      	ldr	r1, [pc, #108]	@ (80007c0 <main+0x9c>)
 8000752:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <main+0xa0>)
 8000754:	f002 fb46 	bl	8002de4 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, &data2, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	491b      	ldr	r1, [pc, #108]	@ (80007c8 <main+0xa4>)
 800075c:	481b      	ldr	r0, [pc, #108]	@ (80007cc <main+0xa8>)
 800075e:	f002 fb41 	bl	8002de4 <HAL_UART_Receive_IT>

    /* USER CODE END 2 */

    while (1)
    {
        process_received_data();
 8000762:	f7ff ff8f 	bl	8000684 <process_received_data>
        heartbeat();
 8000766:	f7ff ff73 	bl	8000650 <heartbeat>

        /* Additional code to handle buffer content */
        if (!ring_buffer_is_empty(&rb_usart1)) {
 800076a:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <main+0x90>)
 800076c:	f000 f97d 	bl	8000a6a <ring_buffer_is_empty>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10a      	bne.n	800078c <main+0x68>
            uint8_t byte;
            ring_buffer_read(&rb_usart1, &byte);
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	4619      	mov	r1, r3
 800077a:	480e      	ldr	r0, [pc, #56]	@ (80007b4 <main+0x90>)
 800077c:	f000 f9c7 	bl	8000b0e <ring_buffer_read>
            HAL_UART_Transmit(&huart1, &byte, 1, 10);
 8000780:	1df9      	adds	r1, r7, #7
 8000782:	230a      	movs	r3, #10
 8000784:	2201      	movs	r2, #1
 8000786:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <main+0xa0>)
 8000788:	f002 faa2 	bl	8002cd0 <HAL_UART_Transmit>
        }

        if (!ring_buffer_is_empty(&rb_usart2)) {
 800078c:	480b      	ldr	r0, [pc, #44]	@ (80007bc <main+0x98>)
 800078e:	f000 f96c 	bl	8000a6a <ring_buffer_is_empty>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1e4      	bne.n	8000762 <main+0x3e>
            uint8_t byte;
            ring_buffer_read(&rb_usart2, &byte);
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	@ (80007bc <main+0x98>)
 800079e:	f000 f9b6 	bl	8000b0e <ring_buffer_read>
            HAL_UART_Transmit(&huart2, &byte, 1, 10);
 80007a2:	1db9      	adds	r1, r7, #6
 80007a4:	230a      	movs	r3, #10
 80007a6:	2201      	movs	r2, #1
 80007a8:	4808      	ldr	r0, [pc, #32]	@ (80007cc <main+0xa8>)
 80007aa:	f002 fa91 	bl	8002cd0 <HAL_UART_Transmit>
        process_received_data();
 80007ae:	e7d8      	b.n	8000762 <main+0x3e>
 80007b0:	2000019c 	.word	0x2000019c
 80007b4:	200001a8 	.word	0x200001a8
 80007b8:	200001b0 	.word	0x200001b0
 80007bc:	200001bc 	.word	0x200001bc
 80007c0:	20000198 	.word	0x20000198
 80007c4:	20000080 	.word	0x20000080
 80007c8:	20000199 	.word	0x20000199
 80007cc:	20000108 	.word	0x20000108

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b096      	sub	sp, #88	@ 0x58
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2244      	movs	r2, #68	@ 0x44
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fe32 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007f6:	f000 ff0b 	bl	8001610 <HAL_PWREx_ControlVoltageScaling>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000800:	f000 f906 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000804:	2310      	movs	r3, #16
 8000806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000810:	2360      	movs	r3, #96	@ 0x60
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000818:	2301      	movs	r3, #1
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000820:	2328      	movs	r3, #40	@ 0x28
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000824:	2307      	movs	r3, #7
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4618      	mov	r0, r3
 8000836:	f000 ff41 	bl	80016bc <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000840:	f000 f8e6 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2303      	movs	r3, #3
 800084a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	2104      	movs	r1, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fb09 	bl	8001e74 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000868:	f000 f8d2 	bl	8000a10 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3758      	adds	r7, #88	@ 0x58
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 800087a:	4a15      	ldr	r2, [pc, #84]	@ (80008d0 <MX_USART2_UART_Init+0x5c>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 8000880:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_USART2_UART_Init+0x58>)
 80008b8:	f002 f9bc 	bl	8002c34 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f8a5 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000108 	.word	0x20000108
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b46      	ldr	r3, [pc, #280]	@ (8000a04 <MX_GPIO_Init+0x130>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a45      	ldr	r2, [pc, #276]	@ (8000a04 <MX_GPIO_Init+0x130>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b43      	ldr	r3, [pc, #268]	@ (8000a04 <MX_GPIO_Init+0x130>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b40      	ldr	r3, [pc, #256]	@ (8000a04 <MX_GPIO_Init+0x130>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a3f      	ldr	r2, [pc, #252]	@ (8000a04 <MX_GPIO_Init+0x130>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a04 <MX_GPIO_Init+0x130>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a04 <MX_GPIO_Init+0x130>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a39      	ldr	r2, [pc, #228]	@ (8000a04 <MX_GPIO_Init+0x130>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b37      	ldr	r3, [pc, #220]	@ (8000a04 <MX_GPIO_Init+0x130>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D3_Pin, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	21a0      	movs	r1, #160	@ 0xa0
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f000 fe11 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	@ 0x40
 8000942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000946:	f000 fe0b 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000950:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4829      	ldr	r0, [pc, #164]	@ (8000a08 <MX_GPIO_Init+0x134>)
 8000962:	f000 fc53 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000966:	2312      	movs	r3, #18
 8000968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f000 fc45 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin;
 8000982:	23e0      	movs	r3, #224	@ 0xe0
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f000 fc36 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	4815      	ldr	r0, [pc, #84]	@ (8000a0c <MX_GPIO_Init+0x138>)
 80009b6:	f000 fc29 	bl	800120c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2006      	movs	r0, #6
 80009c0:	f000 fb6f 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c4:	2006      	movs	r0, #6
 80009c6:	f000 fb88 	bl	80010da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fb67 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009d4:	2007      	movs	r0, #7
 80009d6:	f000 fb80 	bl	80010da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 fb5f 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f000 fb78 	bl	80010da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2028      	movs	r0, #40	@ 0x28
 80009f0:	f000 fb57 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f4:	2028      	movs	r0, #40	@ 0x28
 80009f6:	f000 fb70 	bl	80010da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000800 	.word	0x48000800
 8000a0c:	48000400 	.word	0x48000400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <ring_buffer_init>:
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap) // manage by apunter or vector
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	4613      	mov	r3, r2
 8000a28:	71fb      	strb	r3, [r7, #7]
    rb->buffer = mem_add;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	601a      	str	r2, [r3, #0]
    rb->capacity = cap;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	71da      	strb	r2, [r3, #7]
    ring_buffer_reset(rb);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f804 	bl	8000a44 <ring_buffer_reset>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <ring_buffer_reset>:

/*
 * @brief Esta función reinicia el buffer circular
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    rb->head = 0; //La flecha es por que es un apuntador
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	711a      	strb	r2, [r3, #4]
    rb->tail = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	719a      	strb	r2, [r3, #6]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <ring_buffer_is_empty>:
/*
 * @brief Esta función revisa si el buffer está vacío
 * @retval 1 si está vacío, 0 si no lo está
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *rb)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
    return (!rb->is_full && (rb->head == rb->tail)); // ?1 : 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	799b      	ldrb	r3, [r3, #6]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d107      	bne.n	8000a8a <ring_buffer_is_empty+0x20>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791a      	ldrb	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	795b      	ldrb	r3, [r3, #5]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d101      	bne.n	8000a8a <ring_buffer_is_empty+0x20>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <ring_buffer_is_empty+0x22>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <ring_buffer_write>:
/*
 * @brief Esta función escribe un dato en el buffer circular
 * @param data: el dato que se va a escribir
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
    rb->buffer[rb->head] = data;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7912      	ldrb	r2, [r2, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	78fa      	ldrb	r2, [r7, #3]
 8000ab2:	701a      	strb	r2, [r3, #0]
   // rb->head = rb-> head+ 1 // see logic

    if (rb->is_full)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	799b      	ldrb	r3, [r3, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00c      	beq.n	8000ad6 <ring_buffer_write+0x3c>
    {
        rb->tail = (rb->tail + 1) % rb->capacity;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	79d2      	ldrb	r2, [r2, #7]
 8000ac6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aca:	fb01 f202 	mul.w	r2, r1, r2
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	715a      	strb	r2, [r3, #5]
    }

    rb->head = (rb->head + 1) % rb->capacity;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	3301      	adds	r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	79d2      	ldrb	r2, [r2, #7]
 8000ae0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ae4:	fb01 f202 	mul.w	r2, r1, r2
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	711a      	strb	r2, [r3, #4]

    // Si head alcanza a tail, el buffer está lleno
    if (rb->head == rb->tail)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	791a      	ldrb	r2, [r3, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d102      	bne.n	8000b02 <ring_buffer_write+0x68>
    {
        rb->is_full = 1;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2201      	movs	r2, #1
 8000b00:	719a      	strb	r2, [r3, #6]
    }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <ring_buffer_read>:
 * @brief Esta función lee un dato del buffer circular
 * @param data: puntero a la variable donde se almacenará el dato leído
 * @retval 1 si hay datos disponibles y se leyó un byte, 0 si el buffer está vacío
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
    if (ring_buffer_is_empty(rb))
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffa6 	bl	8000a6a <ring_buffer_is_empty>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <ring_buffer_read+0x1a>
    {
        // Buffer vacío, no hay nada que leer
        return 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e018      	b.n	8000b5a <ring_buffer_read+0x4c>
    }

    *data = rb->buffer[rb->tail];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	7952      	ldrb	r2, [r2, #5]
 8000b30:	4413      	add	r3, r2
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % rb->capacity;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	79d2      	ldrb	r2, [r2, #7]
 8000b42:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b46:	fb01 f202 	mul.w	r2, r1, r2
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	719a      	strb	r2, [r3, #6]

    return 1; // Se leyó un byte correctamente
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0ac      	sub	sp, #176	@ 0xb0
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2288      	movs	r2, #136	@ 0x88
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fc3b 	bl	8004448 <memset>
  if(huart->Instance==USART2)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a25      	ldr	r2, [pc, #148]	@ (8000c6c <HAL_UART_MspInit+0xc0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d143      	bne.n	8000c64 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fb67 	bl	80022bc <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bf4:	f7ff ff0c 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <HAL_UART_MspInit+0xc4>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <HAL_UART_MspInit+0xc4>)
 8000bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <HAL_UART_MspInit+0xc4>)
 8000c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_UART_MspInit+0xc4>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	4a16      	ldr	r2, [pc, #88]	@ (8000c70 <HAL_UART_MspInit+0xc4>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0xc4>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c40:	2307      	movs	r3, #7
 8000c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f000 fadc 	bl	800120c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2026      	movs	r0, #38	@ 0x26
 8000c5a:	f000 fa22 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c5e:	2026      	movs	r0, #38	@ 0x26
 8000c60:	f000 fa3b 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	37b0      	adds	r7, #176	@ 0xb0
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40021000 	.word	0x40021000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f8ef 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 fc74 	bl	80015c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f000 fc6d 	bl	80015c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000cf2:	2010      	movs	r0, #16
 8000cf4:	f000 fc66 	bl	80015c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <USART2_IRQHandler+0x10>)
 8000d02:	f002 f8bb 	bl	8002e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000108 	.word	0x20000108

08000d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8000d14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d18:	f000 fc54 	bl	80015c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f003 fb82 	bl	8004458 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20018000 	.word	0x20018000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200001cc 	.word	0x200001cc
 8000d88:	20000320 	.word	0x20000320

08000d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff ffea 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f003 fb41 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fc9f 	bl	8000724 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000df4:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8000df8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dfc:	2000031c 	.word	0x2000031c

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>

08000e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f93d 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f80e 	bl	8000e34 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e001      	b.n	8000e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e24:	f7ff fe9e 	bl	8000b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_InitTick+0x70>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f949 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d809      	bhi.n	8000e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f913 	bl	80010a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	200001d0 	.word	0x200001d0

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001d0 	.word	0x200001d0

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d008      	beq.n	8001138 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2204      	movs	r2, #4
 800112a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e022      	b.n	800117e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 020e 	bic.w	r2, r2, #14
 8001146:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115c:	f003 021c 	and.w	r2, r3, #28
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d005      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2204      	movs	r2, #4
 80011a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e029      	b.n	8001202 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 020e 	bic.w	r2, r2, #14
 80011bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f003 021c 	and.w	r2, r3, #28
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
    }
  }
  return status;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e17f      	b.n	800151c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8171 	beq.w	8001516 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d118      	bne.n	80012ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80ac 	beq.w	8001516 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <HAL_GPIO_Init+0x330>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	4a5e      	ldr	r2, [pc, #376]	@ (800153c <HAL_GPIO_Init+0x330>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ca:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <HAL_GPIO_Init+0x330>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001400:	d025      	beq.n	800144e <HAL_GPIO_Init+0x242>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4f      	ldr	r2, [pc, #316]	@ (8001544 <HAL_GPIO_Init+0x338>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <HAL_GPIO_Init+0x23e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4e      	ldr	r2, [pc, #312]	@ (8001548 <HAL_GPIO_Init+0x33c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x23a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4d      	ldr	r2, [pc, #308]	@ (800154c <HAL_GPIO_Init+0x340>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x236>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4c      	ldr	r2, [pc, #304]	@ (8001550 <HAL_GPIO_Init+0x344>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x232>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4b      	ldr	r2, [pc, #300]	@ (8001554 <HAL_GPIO_Init+0x348>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x22e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4a      	ldr	r2, [pc, #296]	@ (8001558 <HAL_GPIO_Init+0x34c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x22a>
 8001432:	2306      	movs	r3, #6
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001436:	2307      	movs	r3, #7
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800144e:	2300      	movs	r3, #0
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001460:	4937      	ldr	r1, [pc, #220]	@ (8001540 <HAL_GPIO_Init+0x334>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <HAL_GPIO_Init+0x350>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	@ (800155c <HAL_GPIO_Init+0x350>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <HAL_GPIO_Init+0x350>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	@ (800155c <HAL_GPIO_Init+0x350>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae78 	bne.w	800121c <HAL_GPIO_Init+0x10>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800
 800154c:	48000c00 	.word	0x48000c00
 8001550:	48001000 	.word	0x48001000
 8001554:	48001400 	.word	0x48001400
 8001558:	48001800 	.word	0x48001800
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800157c:	e002      	b.n	8001584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43d9      	mvns	r1, r3
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	400b      	ands	r3, r1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ce:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fffc 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015f8:	4b04      	ldr	r3, [pc, #16]	@ (800160c <HAL_PWREx_GetVoltageRange+0x18>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40007000 	.word	0x40007000

08001610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800161e:	d130      	bne.n	8001682 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800162c:	d038      	beq.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001636:	4a1e      	ldr	r2, [pc, #120]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2232      	movs	r2, #50	@ 0x32
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0c9b      	lsrs	r3, r3, #18
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001654:	e002      	b.n	800165c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001668:	d102      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x60>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f2      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800167c:	d110      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e00f      	b.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800168a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800168e:	d007      	beq.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001698:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	431bde83 	.word	0x431bde83

080016bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e3ca      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ce:	4b97      	ldr	r3, [pc, #604]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d8:	4b94      	ldr	r3, [pc, #592]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80e4 	beq.w	80018b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_RCC_OscConfig+0x4a>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	f040 808b 	bne.w	8001814 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b01      	cmp	r3, #1
 8001702:	f040 8087 	bne.w	8001814 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001706:	4b89      	ldr	r3, [pc, #548]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x62>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e3a2      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	4b82      	ldr	r3, [pc, #520]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <HAL_RCC_OscConfig+0x7c>
 800172e:	4b7f      	ldr	r3, [pc, #508]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001736:	e005      	b.n	8001744 <HAL_RCC_OscConfig+0x88>
 8001738:	4b7c      	ldr	r3, [pc, #496]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001744:	4293      	cmp	r3, r2
 8001746:	d223      	bcs.n	8001790 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fd55 	bl	80021fc <RCC_SetFlashLatencyFromMSIRange>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e383      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175c:	4b73      	ldr	r3, [pc, #460]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a72      	ldr	r2, [pc, #456]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b70      	ldr	r3, [pc, #448]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	496d      	ldr	r1, [pc, #436]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177a:	4b6c      	ldr	r3, [pc, #432]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	4968      	ldr	r1, [pc, #416]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
 800178e:	e025      	b.n	80017dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001790:	4b66      	ldr	r3, [pc, #408]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a65      	ldr	r2, [pc, #404]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b63      	ldr	r3, [pc, #396]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4960      	ldr	r1, [pc, #384]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ae:	4b5f      	ldr	r3, [pc, #380]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	495b      	ldr	r1, [pc, #364]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fd15 	bl	80021fc <RCC_SetFlashLatencyFromMSIRange>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e343      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017dc:	f000 fc4a 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b52      	ldr	r3, [pc, #328]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	4950      	ldr	r1, [pc, #320]	@ (8001930 <HAL_RCC_OscConfig+0x274>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001934 <HAL_RCC_OscConfig+0x278>)
 80017fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fb17 	bl	8000e34 <HAL_InitTick>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d052      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	e327      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d032      	beq.n	8001882 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800181c:	4b43      	ldr	r3, [pc, #268]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a42      	ldr	r2, [pc, #264]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb54 	bl	8000ed4 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001830:	f7ff fb50 	bl	8000ed4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e310      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001842:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a36      	ldr	r2, [pc, #216]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4931      	ldr	r1, [pc, #196]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	492c      	ldr	r1, [pc, #176]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e01a      	b.n	80018b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001882:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a29      	ldr	r2, [pc, #164]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800188e:	f7ff fb21 	bl	8000ed4 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001896:	f7ff fb1d 	bl	8000ed4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e2dd      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018a8:	4b20      	ldr	r3, [pc, #128]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x1da>
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d074      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x21a>
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b0c      	cmp	r3, #12
 80018ce:	d10e      	bne.n	80018ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d10b      	bne.n	80018ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d064      	beq.n	80019ac <HAL_RCC_OscConfig+0x2f0>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d160      	bne.n	80019ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e2ba      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x24a>
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e026      	b.n	8001954 <HAL_RCC_OscConfig+0x298>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800190e:	d115      	bne.n	800193c <HAL_RCC_OscConfig+0x280>
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a05      	ldr	r2, [pc, #20]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a02      	ldr	r2, [pc, #8]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x298>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	08004d90 	.word	0x08004d90
 8001934:	20000008 	.word	0x20000008
 8001938:	2000000c 	.word	0x2000000c
 800193c:	4ba0      	ldr	r3, [pc, #640]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a9f      	ldr	r2, [pc, #636]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b9d      	ldr	r3, [pc, #628]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a9c      	ldr	r2, [pc, #624]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff faba 	bl	8000ed4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fab6 	bl	8000ed4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e276      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	4b92      	ldr	r3, [pc, #584]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x2a8>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff faa6 	bl	8000ed4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff faa2 	bl	8000ed4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e262      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x2d0>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d060      	beq.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x310>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d116      	bne.n	80019fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_OscConfig+0x328>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e23f      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b76      	ldr	r3, [pc, #472]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	4973      	ldr	r1, [pc, #460]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f8:	e040      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d023      	beq.n	8001a4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a02:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fa61 	bl	8000ed4 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fa5d 	bl	8000ed4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e21d      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b62      	ldr	r3, [pc, #392]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	495f      	ldr	r1, [pc, #380]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e018      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff fa3d 	bl	8000ed4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fa39 	bl	8000ed4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1f9      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a70:	4b53      	ldr	r3, [pc, #332]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d03c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01c      	beq.n	8001aca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a90:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a96:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fa18 	bl	8000ed4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fa14 	bl	8000ed4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1d4      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ef      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x3ec>
 8001ac8:	e01b      	b.n	8001b02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aca:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff f9fb 	bl	8000ed4 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f9f7 	bl	8000ed4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1b7      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af4:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ef      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80a6 	beq.w	8001c5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b24:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d118      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b48:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b54:	f7ff f9be 	bl	8000ed4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff f9ba 	bl	8000ed4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e17a      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_OscConfig+0x4d8>
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b92:	e029      	b.n	8001be8 <HAL_RCC_OscConfig+0x52c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d115      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x50c>
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba2:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb2:	4a03      	ldr	r2, [pc, #12]	@ (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_OscConfig+0x52c>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	4b9c      	ldr	r3, [pc, #624]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bce:	4a9b      	ldr	r2, [pc, #620]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bd8:	4b98      	ldr	r3, [pc, #608]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bde:	4a97      	ldr	r2, [pc, #604]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d016      	beq.n	8001c1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f970 	bl	8000ed4 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f96c 	bl	8000ed4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e12a      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ed      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x53c>
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f959 	bl	8000ed4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff f955 	bl	8000ed4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e113      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ed      	bne.n	8001c26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	4a79      	ldr	r2, [pc, #484]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80fe 	beq.w	8001e62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	f040 80d0 	bne.w	8001e10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c70:	4b72      	ldr	r3, [pc, #456]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d130      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d127      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d11f      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cb0:	2a07      	cmp	r2, #7
 8001cb2:	bf14      	ite	ne
 8001cb4:	2201      	movne	r2, #1
 8001cb6:	2200      	moveq	r2, #0
 8001cb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d113      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc8:	085b      	lsrs	r3, r3, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d06e      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d069      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cec:	4b53      	ldr	r3, [pc, #332]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cf8:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0ad      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d08:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d14:	f7ff f8de 	bl	8000ed4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f8da 	bl	8000ed4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e09a      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	4b43      	ldr	r3, [pc, #268]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3a:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <HAL_RCC_OscConfig+0x784>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d4a:	3a01      	subs	r2, #1
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d54:	0212      	lsls	r2, r2, #8
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d5c:	0852      	lsrs	r2, r2, #1
 8001d5e:	3a01      	subs	r2, #1
 8001d60:	0552      	lsls	r2, r2, #21
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d68:	0852      	lsrs	r2, r2, #1
 8001d6a:	3a01      	subs	r2, #1
 8001d6c:	0652      	lsls	r2, r2, #25
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d74:	0912      	lsrs	r2, r2, #4
 8001d76:	0452      	lsls	r2, r2, #17
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	4930      	ldr	r1, [pc, #192]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d80:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2d      	ldr	r2, [pc, #180]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a2a      	ldr	r2, [pc, #168]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d98:	f7ff f89c 	bl	8000ed4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f898 	bl	8000ed4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e058      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dbe:	e050      	b.n	8001e62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e04f      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d148      	bne.n	8001e62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de8:	f7ff f874 	bl	8000ed4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff f870 	bl	8000ed4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e030      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x734>
 8001e0e:	e028      	b.n	8001e62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d023      	beq.n	8001e5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_RCC_OscConfig+0x780>)
 8001e1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f857 	bl	8000ed4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e00c      	b.n	8001e44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff f853 	bl	8000ed4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d905      	bls.n	8001e44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_RCC_OscConfig+0x7b0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ec      	bne.n	8001e2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x7b0>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4905      	ldr	r1, [pc, #20]	@ (8001e6c <HAL_RCC_OscConfig+0x7b0>)
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_RCC_OscConfig+0x7b4>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
 8001e5c:	e001      	b.n	8001e62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	feeefffc 	.word	0xfeeefffc

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0e7      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b75      	ldr	r3, [pc, #468]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d910      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b72      	ldr	r3, [pc, #456]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0207 	bic.w	r2, r3, #7
 8001e9e:	4970      	ldr	r1, [pc, #448]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0cf      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b66      	ldr	r3, [pc, #408]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d908      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b63      	ldr	r3, [pc, #396]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4960      	ldr	r1, [pc, #384]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d04c      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	4b5a      	ldr	r3, [pc, #360]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d121      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0a6      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f12:	4b54      	ldr	r3, [pc, #336]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e09a      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e08e      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e086      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b46      	ldr	r3, [pc, #280]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4943      	ldr	r1, [pc, #268]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5c:	f7fe ffba 	bl	8000ed4 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe ffb6 	bl	8000ed4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e06e      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d010      	beq.n	8001fba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d208      	bcs.n	8001fba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	492b      	ldr	r1, [pc, #172]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d210      	bcs.n	8001fea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc8:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 0207 	bic.w	r2, r3, #7
 8001fd0:	4923      	ldr	r1, [pc, #140]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd8:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e036      	b.n	8002058 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4918      	ldr	r1, [pc, #96]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4910      	ldr	r1, [pc, #64]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002028:	f000 f824 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	490b      	ldr	r1, [pc, #44]	@ (8002068 <HAL_RCC_ClockConfig+0x1f4>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
 8002044:	4a09      	ldr	r2, [pc, #36]	@ (800206c <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_RCC_ClockConfig+0x1fc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fef1 	bl	8000e34 <HAL_InitTick>
 8002052:	4603      	mov	r3, r0
 8002054:	72fb      	strb	r3, [r7, #11]

  return status;
 8002056:	7afb      	ldrb	r3, [r7, #11]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40022000 	.word	0x40022000
 8002064:	40021000 	.word	0x40021000
 8002068:	08004d90 	.word	0x08004d90
 800206c:	20000008 	.word	0x20000008
 8002070:	2000000c 	.word	0x2000000c

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002082:	4b3e      	ldr	r3, [pc, #248]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208c:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x34>
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d11e      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a8:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10d      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ec:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e004      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f8:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x114>)
 80020fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d134      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002102:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0xa6>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d003      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0xac>
 8002118:	e005      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x110>)
 800211c:	617b      	str	r3, [r7, #20]
      break;
 800211e:	e005      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002120:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x114>)
 8002122:	617b      	str	r3, [r7, #20]
      break;
 8002124:	e002      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	617b      	str	r3, [r7, #20]
      break;
 800212a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	3301      	adds	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	fb03 f202 	mul.w	r2, r3, r2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	0e5b      	lsrs	r3, r3, #25
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	3301      	adds	r3, #1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800216c:	69bb      	ldr	r3, [r7, #24]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	08004da8 	.word	0x08004da8
 8002184:	00f42400 	.word	0x00f42400
 8002188:	007a1200 	.word	0x007a1200

0800218c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008

080021a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a8:	f7ff fff0 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4904      	ldr	r1, [pc, #16]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004da0 	.word	0x08004da0

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d4:	f7ff ffda 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0adb      	lsrs	r3, r3, #11
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4904      	ldr	r1, [pc, #16]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08004da0 	.word	0x08004da0

080021fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002208:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002214:	f7ff f9ee 	bl	80015f4 <HAL_PWREx_GetVoltageRange>
 8002218:	6178      	str	r0, [r7, #20]
 800221a:	e014      	b.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b25      	ldr	r3, [pc, #148]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002220:	4a24      	ldr	r2, [pc, #144]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002226:	6593      	str	r3, [r2, #88]	@ 0x58
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002234:	f7ff f9de 	bl	80015f4 <HAL_PWREx_GetVoltageRange>
 8002238:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	4a1d      	ldr	r2, [pc, #116]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800224c:	d10b      	bne.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b80      	cmp	r3, #128	@ 0x80
 8002252:	d919      	bls.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2ba0      	cmp	r3, #160	@ 0xa0
 8002258:	d902      	bls.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800225a:	2302      	movs	r3, #2
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e013      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e010      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	@ 0x80
 800226a:	d902      	bls.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800226c:	2303      	movs	r3, #3
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e00a      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b80      	cmp	r3, #128	@ 0x80
 8002276:	d102      	bne.n	800227e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002278:	2302      	movs	r3, #2
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e004      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b70      	cmp	r3, #112	@ 0x70
 8002282:	d101      	bne.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 0207 	bic.w	r2, r3, #7
 8002290:	4909      	ldr	r1, [pc, #36]	@ (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002298:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022c4:	2300      	movs	r3, #0
 80022c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c8:	2300      	movs	r3, #0
 80022ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d041      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022e0:	d02a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022e6:	d824      	bhi.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022ec:	d008      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022f2:	d81e      	bhi.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022fc:	d010      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022fe:	e018      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002300:	4b86      	ldr	r3, [pc, #536]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a85      	ldr	r2, [pc, #532]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230c:	e015      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fabb 	bl	8002890 <RCCEx_PLLSAI1_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231e:	e00c      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3320      	adds	r3, #32
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fba6 	bl	8002a78 <RCCEx_PLLSAI2_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002330:	e003      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	74fb      	strb	r3, [r7, #19]
      break;
 8002336:	e000      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002340:	4b76      	ldr	r3, [pc, #472]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234e:	4973      	ldr	r1, [pc, #460]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002356:	e001      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d041      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800236c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002370:	d02a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002372:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002376:	d824      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800237e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002382:	d81e      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238c:	d010      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800238e:	e018      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002390:	4b62      	ldr	r3, [pc, #392]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a61      	ldr	r2, [pc, #388]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800239a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239c:	e015      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fa73 	bl	8002890 <RCCEx_PLLSAI1_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ae:	e00c      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3320      	adds	r3, #32
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fb5e 	bl	8002a78 <RCCEx_PLLSAI2_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c0:	e003      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	74fb      	strb	r3, [r7, #19]
      break;
 80023c6:	e000      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d0:	4b52      	ldr	r3, [pc, #328]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023de:	494f      	ldr	r1, [pc, #316]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023e6:	e001      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a0 	beq.w	800253a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023fe:	4b47      	ldr	r3, [pc, #284]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002414:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002418:	4a40      	ldr	r2, [pc, #256]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002420:	4b3e      	ldr	r3, [pc, #248]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242c:	2301      	movs	r3, #1
 800242e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002430:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a3a      	ldr	r2, [pc, #232]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800243c:	f7fe fd4a 	bl	8000ed4 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002442:	e009      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7fe fd46 	bl	8000ed4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d902      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	74fb      	strb	r3, [r7, #19]
        break;
 8002456:	e005      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002458:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ef      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d15c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800246a:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002474:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01f      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	d019      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002488:	4b24      	ldr	r3, [pc, #144]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249a:	4a20      	ldr	r2, [pc, #128]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024aa:	4a1c      	ldr	r2, [pc, #112]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fd05 	bl	8000ed4 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024cc:	e00b      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fd01 	bl	8000ed4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d902      	bls.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	74fb      	strb	r3, [r7, #19]
            break;
 80024e4:	e006      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ec      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250a:	4904      	ldr	r1, [pc, #16]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002512:	e009      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
 8002518:	e006      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002528:	7c7b      	ldrb	r3, [r7, #17]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b9e      	ldr	r3, [pc, #632]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	4a9d      	ldr	r2, [pc, #628]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002546:	4b98      	ldr	r3, [pc, #608]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254c:	f023 0203 	bic.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	4994      	ldr	r1, [pc, #592]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002568:	4b8f      	ldr	r3, [pc, #572]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f023 020c 	bic.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002576:	498c      	ldr	r1, [pc, #560]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800258a:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002590:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	4983      	ldr	r1, [pc, #524]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ac:	4b7e      	ldr	r3, [pc, #504]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	497b      	ldr	r1, [pc, #492]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ce:	4b76      	ldr	r3, [pc, #472]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	4972      	ldr	r1, [pc, #456]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f0:	4b6d      	ldr	r3, [pc, #436]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	496a      	ldr	r1, [pc, #424]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002612:	4b65      	ldr	r3, [pc, #404]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002618:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	4961      	ldr	r1, [pc, #388]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002634:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	4959      	ldr	r1, [pc, #356]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002656:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002664:	4950      	ldr	r1, [pc, #320]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002678:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002686:	4948      	ldr	r1, [pc, #288]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269a:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	493f      	ldr	r1, [pc, #252]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d028      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026bc:	4b3a      	ldr	r3, [pc, #232]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ca:	4937      	ldr	r1, [pc, #220]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026da:	d106      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b32      	ldr	r3, [pc, #200]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a31      	ldr	r2, [pc, #196]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
 80026e8:	e011      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026f2:	d10c      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f8c8 	bl	8002890 <RCCEx_PLLSAI1_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d028      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800271a:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002720:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	491f      	ldr	r1, [pc, #124]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002738:	d106      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273a:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002744:	60d3      	str	r3, [r2, #12]
 8002746:	e011      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002750:	d10c      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f899 	bl	8002890 <RCCEx_PLLSAI1_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02b      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002786:	4908      	ldr	r1, [pc, #32]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002796:	d109      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a02      	ldr	r2, [pc, #8]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027a2:	60d3      	str	r3, [r2, #12]
 80027a4:	e014      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f867 	bl	8002890 <RCCEx_PLLSAI1_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02f      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027dc:	4b2b      	ldr	r3, [pc, #172]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ea:	4928      	ldr	r1, [pc, #160]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027fa:	d10d      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f844 	bl	8002890 <RCCEx_PLLSAI1_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d014      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	74bb      	strb	r3, [r7, #18]
 8002816:	e011      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800281c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002820:	d10c      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3320      	adds	r3, #32
 8002826:	2102      	movs	r1, #2
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f925 	bl	8002a78 <RCCEx_PLLSAI2_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002856:	490d      	ldr	r1, [pc, #52]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800287a:	4904      	ldr	r1, [pc, #16]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002882:	7cbb      	ldrb	r3, [r7, #18]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000

08002890 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289e:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d018      	beq.n	80028dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028aa:	4b72      	ldr	r3, [pc, #456]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0203 	and.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d10d      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
       ||
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
       ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d047      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e044      	b.n	8002966 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d018      	beq.n	8002916 <RCCEx_PLLSAI1_Config+0x86>
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d825      	bhi.n	8002934 <RCCEx_PLLSAI1_Config+0xa4>
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d002      	beq.n	80028f2 <RCCEx_PLLSAI1_Config+0x62>
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d009      	beq.n	8002904 <RCCEx_PLLSAI1_Config+0x74>
 80028f0:	e020      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028f2:	4b60      	ldr	r3, [pc, #384]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11d      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002902:	e01a      	b.n	800293a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002904:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e013      	b.n	800293e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002916:	4b57      	ldr	r3, [pc, #348]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002922:	4b54      	ldr	r3, [pc, #336]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002932:	e006      	b.n	8002942 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      break;
 8002938:	e004      	b.n	8002944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
 800293c:	e002      	b.n	8002944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002942:	bf00      	nop
    }

    if(status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800294a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	430b      	orrs	r3, r1
 8002960:	4944      	ldr	r1, [pc, #272]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d17d      	bne.n	8002a68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800296c:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a40      	ldr	r2, [pc, #256]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002978:	f7fe faac 	bl	8000ed4 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297e:	e009      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002980:	f7fe faa8 	bl	8000ed4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d902      	bls.n	8002994 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	73fb      	strb	r3, [r7, #15]
        break;
 8002992:	e005      	b.n	80029a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002994:	4b37      	ldr	r3, [pc, #220]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ef      	bne.n	8002980 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d160      	bne.n	8002a68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ac:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6892      	ldr	r2, [r2, #8]
 80029bc:	0211      	lsls	r1, r2, #8
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68d2      	ldr	r2, [r2, #12]
 80029c2:	0912      	lsrs	r2, r2, #4
 80029c4:	0452      	lsls	r2, r2, #17
 80029c6:	430a      	orrs	r2, r1
 80029c8:	492a      	ldr	r1, [pc, #168]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	610b      	str	r3, [r1, #16]
 80029ce:	e027      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d112      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d6:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	0211      	lsls	r1, r2, #8
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6912      	ldr	r2, [r2, #16]
 80029ec:	0852      	lsrs	r2, r2, #1
 80029ee:	3a01      	subs	r2, #1
 80029f0:	0552      	lsls	r2, r2, #21
 80029f2:	430a      	orrs	r2, r1
 80029f4:	491f      	ldr	r1, [pc, #124]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	610b      	str	r3, [r1, #16]
 80029fa:	e011      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6892      	ldr	r2, [r2, #8]
 8002a0c:	0211      	lsls	r1, r2, #8
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6952      	ldr	r2, [r2, #20]
 8002a12:	0852      	lsrs	r2, r2, #1
 8002a14:	3a01      	subs	r2, #1
 8002a16:	0652      	lsls	r2, r2, #25
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	4916      	ldr	r1, [pc, #88]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a13      	ldr	r2, [pc, #76]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fa52 	bl	8000ed4 <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a32:	e009      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a34:	f7fe fa4e 	bl	8000ed4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	73fb      	strb	r3, [r7, #15]
          break;
 8002a46:	e005      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	4904      	ldr	r1, [pc, #16]	@ (8002a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a86:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d018      	beq.n	8002ac4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a92:	4b67      	ldr	r3, [pc, #412]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0203 	and.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10d      	bne.n	8002abe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
       ||
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aaa:	4b61      	ldr	r3, [pc, #388]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d047      	beq.n	8002b4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e044      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d018      	beq.n	8002afe <RCCEx_PLLSAI2_Config+0x86>
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d825      	bhi.n	8002b1c <RCCEx_PLLSAI2_Config+0xa4>
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d002      	beq.n	8002ada <RCCEx_PLLSAI2_Config+0x62>
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d009      	beq.n	8002aec <RCCEx_PLLSAI2_Config+0x74>
 8002ad8:	e020      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ada:	4b55      	ldr	r3, [pc, #340]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11d      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aea:	e01a      	b.n	8002b22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aec:	4b50      	ldr	r3, [pc, #320]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d116      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afc:	e013      	b.n	8002b26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afe:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b0a:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b1a:	e006      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e004      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b32:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	430b      	orrs	r3, r1
 8002b48:	4939      	ldr	r1, [pc, #228]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d167      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b54:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a35      	ldr	r2, [pc, #212]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7fe f9b8 	bl	8000ed4 <HAL_GetTick>
 8002b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b66:	e009      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b68:	f7fe f9b4 	bl	8000ed4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d902      	bls.n	8002b7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	73fb      	strb	r3, [r7, #15]
        break;
 8002b7a:	e005      	b.n	8002b88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ef      	bne.n	8002b68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d14a      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b94:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	0211      	lsls	r1, r2, #8
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68d2      	ldr	r2, [r2, #12]
 8002baa:	0912      	lsrs	r2, r2, #4
 8002bac:	0452      	lsls	r2, r2, #17
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	491f      	ldr	r1, [pc, #124]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	614b      	str	r3, [r1, #20]
 8002bb6:	e011      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	0211      	lsls	r1, r2, #8
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6912      	ldr	r2, [r2, #16]
 8002bce:	0852      	lsrs	r2, r2, #1
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0652      	lsls	r2, r2, #25
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	4916      	ldr	r1, [pc, #88]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe f974 	bl	8000ed4 <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bee:	e009      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf0:	f7fe f970 	bl	8000ed4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	73fb      	strb	r3, [r7, #15]
          break;
 8002c02:	e005      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c04:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4904      	ldr	r1, [pc, #16]	@ (8002c30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e040      	b.n	8002cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ffa8 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	@ 0x24
 8002c60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fedc 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fc21 	bl	80034c8 <UART_SetConfig>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e01b      	b.n	8002cc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 ff5b 	bl	8003b7c <UART_CheckIdleState>
 8002cc6:	4603      	mov	r3, r0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d177      	bne.n	8002dd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Transmit+0x24>
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e070      	b.n	8002dda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2221      	movs	r2, #33	@ 0x21
 8002d04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d06:	f7fe f8e5 	bl	8000ed4 <HAL_GetTick>
 8002d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x68>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d40:	e02f      	b.n	8002da2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	@ 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 ffbd 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03b      	b.n	8002dda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d74:	b292      	uxth	r2, r2
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e007      	b.n	8002d90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1c9      	bne.n	8002d42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2140      	movs	r1, #64	@ 0x40
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 ff87 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e005      	b.n	8002dda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d137      	bne.n	8002e6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Receive_IT+0x24>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e030      	b.n	8002e6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	@ (8002e78 <HAL_UART_Receive_IT+0x94>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01f      	beq.n	8002e5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	613b      	str	r3, [r7, #16]
   return(result);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	69f9      	ldr	r1, [r7, #28]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e6      	bne.n	8002e2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 ffa0 	bl	8003da8 <UART_Start_Receive_IT>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	e000      	b.n	8002e6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3728      	adds	r7, #40	@ 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40008000 	.word	0x40008000

08002e7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ea2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ea6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002eaa:	4013      	ands	r3, r2
 8002eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d115      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00f      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 82ca 	beq.w	800346e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
      }
      return;
 8002ee2:	e2c4      	b.n	800346e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8117 	beq.w	800311c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002efa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002efe:	4b85      	ldr	r3, [pc, #532]	@ (8003114 <HAL_UART_IRQHandler+0x298>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 810a 	beq.w	800311c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <HAL_UART_IRQHandler+0xbc>
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d011      	beq.n	8002f68 <HAL_UART_IRQHandler+0xec>
 8002f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2202      	movs	r2, #2
 8002f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <HAL_UART_IRQHandler+0x11c>
 8002f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fca:	f043 0208 	orr.w	r2, r3, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <HAL_UART_IRQHandler+0x18a>
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00c      	beq.n	8003006 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8230 	beq.w	8003472 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d005      	beq.n	800305e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003056:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d04f      	beq.n	80030fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 ff68 	bl	8003f34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b40      	cmp	r3, #64	@ 0x40
 8003070:	d141      	bne.n	80030f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3308      	adds	r3, #8
 8003078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800308c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800309e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80030a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80030aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80030b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1d9      	bne.n	8003072 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d013      	beq.n	80030ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ca:	4a13      	ldr	r2, [pc, #76]	@ (8003118 <HAL_UART_IRQHandler+0x29c>)
 80030cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f859 	bl	800118a <HAL_DMA_Abort_IT>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030e8:	4610      	mov	r0, r2
 80030ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ec:	e00f      	b.n	800310e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9d4 	bl	800349c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	e00b      	b.n	800310e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9d0 	bl	800349c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	e007      	b.n	800310e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9cc 	bl	800349c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800310c:	e1b1      	b.n	8003472 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310e:	bf00      	nop
    return;
 8003110:	e1af      	b.n	8003472 <HAL_UART_IRQHandler+0x5f6>
 8003112:	bf00      	nop
 8003114:	04000120 	.word	0x04000120
 8003118:	08003ffd 	.word	0x08003ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003120:	2b01      	cmp	r3, #1
 8003122:	f040 816a 	bne.w	80033fa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8163 	beq.w	80033fa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 815c 	beq.w	80033fa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2210      	movs	r2, #16
 8003148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	f040 80d4 	bne.w	8003302 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003166:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80ad 	beq.w	80032ca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800317a:	429a      	cmp	r2, r3
 800317c:	f080 80a5 	bcs.w	80032ca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003186:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 8086 	bne.w	80032a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80031b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1da      	bne.n	800319c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3308      	adds	r3, #8
 80031ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80031f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3308      	adds	r3, #8
 8003206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800320a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800320e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003212:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800321c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e1      	bne.n	80031e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003248:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800324c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e3      	bne.n	8003222 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800328a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800328c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e4      	bne.n	8003268 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd ff33 	bl	800110e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8f4 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80032c8:	e0d5      	b.n	8003476 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f040 80ce 	bne.w	8003476 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	f040 80c5 	bne.w	8003476 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8d8 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
      return;
 8003300:	e0b9      	b.n	8003476 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800330e:	b29b      	uxth	r3, r3
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80ab 	beq.w	800347a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a6 	beq.w	800347a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003342:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
 8003352:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e4      	bne.n	800332e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	623b      	str	r3, [r7, #32]
   return(result);
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003388:	633a      	str	r2, [r7, #48]	@ 0x30
 800338a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800338e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e3      	bne.n	8003364 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f023 0310 	bic.w	r3, r3, #16
 80033c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	69b9      	ldr	r1, [r7, #24]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	617b      	str	r3, [r7, #20]
   return(result);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e4      	bne.n	80033b0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f85c 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033f8:	e03f      	b.n	800347a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <HAL_UART_IRQHandler+0x5a8>
 8003406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800341a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 ffe9 	bl	80043f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003422:	e02d      	b.n	8003480 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01c      	beq.n	800347e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
    }
    return;
 800344c:	e017      	b.n	800347e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d012      	beq.n	8003480 <HAL_UART_IRQHandler+0x604>
 800345a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fdde 	bl	8004028 <UART_EndTransmit_IT>
    return;
 800346c:	e008      	b.n	8003480 <HAL_UART_IRQHandler+0x604>
      return;
 800346e:	bf00      	nop
 8003470:	e006      	b.n	8003480 <HAL_UART_IRQHandler+0x604>
    return;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_UART_IRQHandler+0x604>
      return;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_UART_IRQHandler+0x604>
      return;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_UART_IRQHandler+0x604>
    return;
 800347e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003480:	37e8      	adds	r7, #232	@ 0xe8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop

08003488 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b08a      	sub	sp, #40	@ 0x28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4ba4      	ldr	r3, [pc, #656]	@ (8003788 <UART_SetConfig+0x2c0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003500:	430b      	orrs	r3, r1
 8003502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a99      	ldr	r2, [pc, #612]	@ (800378c <UART_SetConfig+0x2c4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	4313      	orrs	r3, r2
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a90      	ldr	r2, [pc, #576]	@ (8003790 <UART_SetConfig+0x2c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d126      	bne.n	80035a0 <UART_SetConfig+0xd8>
 8003552:	4b90      	ldr	r3, [pc, #576]	@ (8003794 <UART_SetConfig+0x2cc>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d81b      	bhi.n	8003598 <UART_SetConfig+0xd0>
 8003560:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <UART_SetConfig+0xa0>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	08003579 	.word	0x08003579
 800356c:	08003589 	.word	0x08003589
 8003570:	08003581 	.word	0x08003581
 8003574:	08003591 	.word	0x08003591
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357e:	e116      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003580:	2302      	movs	r3, #2
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003586:	e112      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003588:	2304      	movs	r3, #4
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358e:	e10e      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003590:	2308      	movs	r3, #8
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e10a      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003598:	2310      	movs	r3, #16
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359e:	e106      	b.n	80037ae <UART_SetConfig+0x2e6>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003798 <UART_SetConfig+0x2d0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d138      	bne.n	800361c <UART_SetConfig+0x154>
 80035aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003794 <UART_SetConfig+0x2cc>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d82d      	bhi.n	8003614 <UART_SetConfig+0x14c>
 80035b8:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <UART_SetConfig+0xf8>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035f5 	.word	0x080035f5
 80035c4:	08003615 	.word	0x08003615
 80035c8:	08003615 	.word	0x08003615
 80035cc:	08003615 	.word	0x08003615
 80035d0:	08003605 	.word	0x08003605
 80035d4:	08003615 	.word	0x08003615
 80035d8:	08003615 	.word	0x08003615
 80035dc:	08003615 	.word	0x08003615
 80035e0:	080035fd 	.word	0x080035fd
 80035e4:	08003615 	.word	0x08003615
 80035e8:	08003615 	.word	0x08003615
 80035ec:	08003615 	.word	0x08003615
 80035f0:	0800360d 	.word	0x0800360d
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fa:	e0d8      	b.n	80037ae <UART_SetConfig+0x2e6>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e0d4      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003604:	2304      	movs	r3, #4
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e0d0      	b.n	80037ae <UART_SetConfig+0x2e6>
 800360c:	2308      	movs	r3, #8
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e0cc      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003614:	2310      	movs	r3, #16
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e0c8      	b.n	80037ae <UART_SetConfig+0x2e6>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a5e      	ldr	r2, [pc, #376]	@ (800379c <UART_SetConfig+0x2d4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d125      	bne.n	8003672 <UART_SetConfig+0x1aa>
 8003626:	4b5b      	ldr	r3, [pc, #364]	@ (8003794 <UART_SetConfig+0x2cc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003630:	2b30      	cmp	r3, #48	@ 0x30
 8003632:	d016      	beq.n	8003662 <UART_SetConfig+0x19a>
 8003634:	2b30      	cmp	r3, #48	@ 0x30
 8003636:	d818      	bhi.n	800366a <UART_SetConfig+0x1a2>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d00a      	beq.n	8003652 <UART_SetConfig+0x18a>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d814      	bhi.n	800366a <UART_SetConfig+0x1a2>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <UART_SetConfig+0x182>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d008      	beq.n	800365a <UART_SetConfig+0x192>
 8003648:	e00f      	b.n	800366a <UART_SetConfig+0x1a2>
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003650:	e0ad      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003652:	2302      	movs	r3, #2
 8003654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003658:	e0a9      	b.n	80037ae <UART_SetConfig+0x2e6>
 800365a:	2304      	movs	r3, #4
 800365c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003660:	e0a5      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003662:	2308      	movs	r3, #8
 8003664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003668:	e0a1      	b.n	80037ae <UART_SetConfig+0x2e6>
 800366a:	2310      	movs	r3, #16
 800366c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003670:	e09d      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4a      	ldr	r2, [pc, #296]	@ (80037a0 <UART_SetConfig+0x2d8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d125      	bne.n	80036c8 <UART_SetConfig+0x200>
 800367c:	4b45      	ldr	r3, [pc, #276]	@ (8003794 <UART_SetConfig+0x2cc>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003686:	2bc0      	cmp	r3, #192	@ 0xc0
 8003688:	d016      	beq.n	80036b8 <UART_SetConfig+0x1f0>
 800368a:	2bc0      	cmp	r3, #192	@ 0xc0
 800368c:	d818      	bhi.n	80036c0 <UART_SetConfig+0x1f8>
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d00a      	beq.n	80036a8 <UART_SetConfig+0x1e0>
 8003692:	2b80      	cmp	r3, #128	@ 0x80
 8003694:	d814      	bhi.n	80036c0 <UART_SetConfig+0x1f8>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <UART_SetConfig+0x1d8>
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d008      	beq.n	80036b0 <UART_SetConfig+0x1e8>
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x1f8>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a6:	e082      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036a8:	2302      	movs	r3, #2
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ae:	e07e      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036b0:	2304      	movs	r3, #4
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b6:	e07a      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036b8:	2308      	movs	r3, #8
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036be:	e076      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036c0:	2310      	movs	r3, #16
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c6:	e072      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a35      	ldr	r2, [pc, #212]	@ (80037a4 <UART_SetConfig+0x2dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d12a      	bne.n	8003728 <UART_SetConfig+0x260>
 80036d2:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <UART_SetConfig+0x2cc>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e0:	d01a      	beq.n	8003718 <UART_SetConfig+0x250>
 80036e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e6:	d81b      	bhi.n	8003720 <UART_SetConfig+0x258>
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ec:	d00c      	beq.n	8003708 <UART_SetConfig+0x240>
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f2:	d815      	bhi.n	8003720 <UART_SetConfig+0x258>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x238>
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fc:	d008      	beq.n	8003710 <UART_SetConfig+0x248>
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x258>
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e052      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003708:	2302      	movs	r3, #2
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370e:	e04e      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003710:	2304      	movs	r3, #4
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003716:	e04a      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003718:	2308      	movs	r3, #8
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371e:	e046      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003726:	e042      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a17      	ldr	r2, [pc, #92]	@ (800378c <UART_SetConfig+0x2c4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d13a      	bne.n	80037a8 <UART_SetConfig+0x2e0>
 8003732:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <UART_SetConfig+0x2cc>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003738:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800373c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003740:	d01a      	beq.n	8003778 <UART_SetConfig+0x2b0>
 8003742:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003746:	d81b      	bhi.n	8003780 <UART_SetConfig+0x2b8>
 8003748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374c:	d00c      	beq.n	8003768 <UART_SetConfig+0x2a0>
 800374e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003752:	d815      	bhi.n	8003780 <UART_SetConfig+0x2b8>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <UART_SetConfig+0x298>
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375c:	d008      	beq.n	8003770 <UART_SetConfig+0x2a8>
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x2b8>
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003766:	e022      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376e:	e01e      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003776:	e01a      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377e:	e016      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003786:	e012      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003788:	efff69f3 	.word	0xefff69f3
 800378c:	40008000 	.word	0x40008000
 8003790:	40013800 	.word	0x40013800
 8003794:	40021000 	.word	0x40021000
 8003798:	40004400 	.word	0x40004400
 800379c:	40004800 	.word	0x40004800
 80037a0:	40004c00 	.word	0x40004c00
 80037a4:	40005000 	.word	0x40005000
 80037a8:	2310      	movs	r3, #16
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003a30 <UART_SetConfig+0x568>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d17a      	bne.n	80038ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d824      	bhi.n	800380a <UART_SetConfig+0x342>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <UART_SetConfig+0x300>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	0800380b 	.word	0x0800380b
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	080037fb 	.word	0x080037fb
 80037dc:	0800380b 	.word	0x0800380b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800380b 	.word	0x0800380b
 80037e8:	08003803 	.word	0x08003803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7fe fcda 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 80037f0:	61f8      	str	r0, [r7, #28]
        break;
 80037f2:	e010      	b.n	8003816 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003a34 <UART_SetConfig+0x56c>)
 80037f6:	61fb      	str	r3, [r7, #28]
        break;
 80037f8:	e00d      	b.n	8003816 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fa:	f7fe fc3b 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 80037fe:	61f8      	str	r0, [r7, #28]
        break;
 8003800:	e009      	b.n	8003816 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003806:	61fb      	str	r3, [r7, #28]
        break;
 8003808:	e005      	b.n	8003816 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80fb 	beq.w	8003a14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	429a      	cmp	r2, r3
 800382c:	d305      	bcc.n	800383a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	429a      	cmp	r2, r3
 8003838:	d903      	bls.n	8003842 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003840:	e0e8      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2200      	movs	r2, #0
 8003846:	461c      	mov	r4, r3
 8003848:	4615      	mov	r5, r2
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	022b      	lsls	r3, r5, #8
 8003854:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003858:	0222      	lsls	r2, r4, #8
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	6849      	ldr	r1, [r1, #4]
 800385e:	0849      	lsrs	r1, r1, #1
 8003860:	2000      	movs	r0, #0
 8003862:	4688      	mov	r8, r1
 8003864:	4681      	mov	r9, r0
 8003866:	eb12 0a08 	adds.w	sl, r2, r8
 800386a:	eb43 0b09 	adc.w	fp, r3, r9
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800387c:	4650      	mov	r0, sl
 800387e:	4659      	mov	r1, fp
 8003880:	f7fc fcfe 	bl	8000280 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003892:	d308      	bcc.n	80038a6 <UART_SetConfig+0x3de>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800389a:	d204      	bcs.n	80038a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e0b6      	b.n	8003a14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038ac:	e0b2      	b.n	8003a14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b6:	d15e      	bne.n	8003976 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d828      	bhi.n	8003912 <UART_SetConfig+0x44a>
 80038c0:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <UART_SetConfig+0x400>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	08003913 	.word	0x08003913
 80038d8:	08003903 	.word	0x08003903
 80038dc:	08003913 	.word	0x08003913
 80038e0:	08003913 	.word	0x08003913
 80038e4:	08003913 	.word	0x08003913
 80038e8:	0800390b 	.word	0x0800390b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7fe fc5a 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 80038f0:	61f8      	str	r0, [r7, #28]
        break;
 80038f2:	e014      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7fe fc6c 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 80038f8:	61f8      	str	r0, [r7, #28]
        break;
 80038fa:	e010      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003a34 <UART_SetConfig+0x56c>)
 80038fe:	61fb      	str	r3, [r7, #28]
        break;
 8003900:	e00d      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7fe fbb7 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8003906:	61f8      	str	r0, [r7, #28]
        break;
 8003908:	e009      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800390e:	61fb      	str	r3, [r7, #28]
        break;
 8003910:	e005      	b.n	800391e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800391c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d077      	beq.n	8003a14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005a      	lsls	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d916      	bls.n	800396e <UART_SetConfig+0x4a6>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003946:	d212      	bcs.n	800396e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	b29b      	uxth	r3, r3
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	b29a      	uxth	r2, r3
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	4313      	orrs	r3, r2
 8003962:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	8afa      	ldrh	r2, [r7, #22]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e052      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003974:	e04e      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003976:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800397a:	2b08      	cmp	r3, #8
 800397c:	d827      	bhi.n	80039ce <UART_SetConfig+0x506>
 800397e:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <UART_SetConfig+0x4bc>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039b1 	.word	0x080039b1
 800398c:	080039b9 	.word	0x080039b9
 8003990:	080039cf 	.word	0x080039cf
 8003994:	080039bf 	.word	0x080039bf
 8003998:	080039cf 	.word	0x080039cf
 800399c:	080039cf 	.word	0x080039cf
 80039a0:	080039cf 	.word	0x080039cf
 80039a4:	080039c7 	.word	0x080039c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7fe fbfc 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 80039ac:	61f8      	str	r0, [r7, #28]
        break;
 80039ae:	e014      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b0:	f7fe fc0e 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 80039b4:	61f8      	str	r0, [r7, #28]
        break;
 80039b6:	e010      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a34 <UART_SetConfig+0x56c>)
 80039ba:	61fb      	str	r3, [r7, #28]
        break;
 80039bc:	e00d      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039be:	f7fe fb59 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 80039c2:	61f8      	str	r0, [r7, #28]
        break;
 80039c4:	e009      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ca:	61fb      	str	r3, [r7, #28]
        break;
 80039cc:	e005      	b.n	80039da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039d8:	bf00      	nop
    }

    if (pclk != 0U)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	085a      	lsrs	r2, r3, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	d909      	bls.n	8003a0e <UART_SetConfig+0x546>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a00:	d205      	bcs.n	8003a0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e002      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	@ 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2e:	bf00      	nop
 8003a30:	40008000 	.word	0x40008000
 8003a34:	00f42400 	.word	0x00f42400

08003a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b36:	d10a      	bne.n	8003b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b098      	sub	sp, #96	@ 0x60
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fd f9a2 	bl	8000ed4 <HAL_GetTick>
 8003b90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d12e      	bne.n	8003bfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f88c 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d021      	beq.n	8003bfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e062      	b.n	8003cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d149      	bne.n	8003ca0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f856 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	623b      	str	r3, [r7, #32]
   return(result);
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3308      	adds	r3, #8
 8003c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c78:	61fa      	str	r2, [r7, #28]
 8003c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	69b9      	ldr	r1, [r7, #24]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	617b      	str	r3, [r7, #20]
   return(result);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e011      	b.n	8003cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3758      	adds	r7, #88	@ 0x58
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cdc:	e04f      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d04b      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fd f8f5 	bl	8000ed4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e04e      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d037      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b80      	cmp	r3, #128	@ 0x80
 8003d12:	d034      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b40      	cmp	r3, #64	@ 0x40
 8003d18:	d031      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d110      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f8ff 	bl	8003f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e029      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d58:	d111      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f8e5 	bl	8003f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e00f      	b.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d0a0      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b097      	sub	sp, #92	@ 0x5c
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	d10e      	bne.n	8003dfa <UART_Start_Receive_IT+0x52>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <UART_Start_Receive_IT+0x48>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003dea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003dee:	e02d      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	22ff      	movs	r2, #255	@ 0xff
 8003df4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003df8:	e028      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <UART_Start_Receive_IT+0x76>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <UART_Start_Receive_IT+0x6c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	22ff      	movs	r2, #255	@ 0xff
 8003e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e12:	e01b      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	227f      	movs	r2, #127	@ 0x7f
 8003e18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e1c:	e016      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e26:	d10d      	bne.n	8003e44 <UART_Start_Receive_IT+0x9c>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <UART_Start_Receive_IT+0x92>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	227f      	movs	r2, #127	@ 0x7f
 8003e34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e38:	e008      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	223f      	movs	r2, #63	@ 0x3f
 8003e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e42:	e003      	b.n	8003e4c <UART_Start_Receive_IT+0xa4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2222      	movs	r2, #34	@ 0x22
 8003e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003e7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e98:	d107      	bne.n	8003eaa <UART_Start_Receive_IT+0x102>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <UART_Start_Receive_IT+0x184>)
 8003ea6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ea8:	e002      	b.n	8003eb0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a20      	ldr	r2, [pc, #128]	@ (8003f30 <UART_Start_Receive_IT+0x188>)
 8003eae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e6      	bne.n	8003eb8 <UART_Start_Receive_IT+0x110>
 8003eea:	e018      	b.n	8003f1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	69f9      	ldr	r1, [r7, #28]
 8003f10:	6a3a      	ldr	r2, [r7, #32]
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e6      	bne.n	8003eec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	375c      	adds	r7, #92	@ 0x5c
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	08004239 	.word	0x08004239
 8003f30:	0800407d 	.word	0x0800407d

08003f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b095      	sub	sp, #84	@ 0x54
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d118      	bne.n	8003fdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ff0:	bf00      	nop
 8003ff2:	3754      	adds	r7, #84	@ 0x54
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fa3e 	bl	800349c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	60bb      	str	r3, [r7, #8]
   return(result);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	613b      	str	r3, [r7, #16]
   return(result);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e6      	bne.n	8004030 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fa0a 	bl	8003488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004074:	bf00      	nop
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b09c      	sub	sp, #112	@ 0x70
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800408a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004094:	2b22      	cmp	r3, #34	@ 0x22
 8004096:	f040 80be 	bne.w	8004216 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80040a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040a8:	b2d9      	uxtb	r1, r3
 80040aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b4:	400a      	ands	r2, r1
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 80a3 	bne.w	800422a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004102:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004104:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e6      	bne.n	80040e4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	667b      	str	r3, [r7, #100]	@ 0x64
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3308      	adds	r3, #8
 8004134:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004136:	647a      	str	r2, [r7, #68]	@ 0x44
 8004138:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800413c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e5      	bne.n	8004116 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a34      	ldr	r2, [pc, #208]	@ (8004234 <UART_RxISR_8BIT+0x1b8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01f      	beq.n	80041a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	623b      	str	r3, [r7, #32]
   return(result);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800418a:	663b      	str	r3, [r7, #96]	@ 0x60
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004194:	633b      	str	r3, [r7, #48]	@ 0x30
 8004196:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d12e      	bne.n	800420e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	617b      	str	r3, [r7, #20]
   return(result);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e6      	bne.n	80041b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d103      	bne.n	80041fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2210      	movs	r2, #16
 80041fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff f952 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800420c:	e00d      	b.n	800422a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc f9ae 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8004214:	e009      	b.n	800422a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	8b1b      	ldrh	r3, [r3, #24]
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0208 	orr.w	r2, r2, #8
 8004226:	b292      	uxth	r2, r2
 8004228:	831a      	strh	r2, [r3, #24]
}
 800422a:	bf00      	nop
 800422c:	3770      	adds	r7, #112	@ 0x70
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40008000 	.word	0x40008000

08004238 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b09c      	sub	sp, #112	@ 0x70
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004246:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004250:	2b22      	cmp	r3, #34	@ 0x22
 8004252:	f040 80be 	bne.w	80043d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800425c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004264:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004266:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800426a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800426e:	4013      	ands	r3, r2
 8004270:	b29a      	uxth	r2, r3
 8004272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004274:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 80a3 	bne.w	80043e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80042ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042be:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80042c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80042cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80042f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a34      	ldr	r2, [pc, #208]	@ (80043f0 <UART_RxISR_16BIT+0x1b8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d01f      	beq.n	8004364 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d018      	beq.n	8004364 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004352:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	2b01      	cmp	r3, #1
 800436a:	d12e      	bne.n	80043ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f023 0310 	bic.w	r3, r3, #16
 8004386:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	613b      	str	r3, [r7, #16]
   return(result);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e6      	bne.n	8004372 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d103      	bne.n	80043ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2210      	movs	r2, #16
 80043b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff f874 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043c8:	e00d      	b.n	80043e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc f8d0 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 80043d0:	e009      	b.n	80043e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	8b1b      	ldrh	r3, [r3, #24]
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	b292      	uxth	r2, r2
 80043e4:	831a      	strh	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	3770      	adds	r7, #112	@ 0x70
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40008000 	.word	0x40008000

080043f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	b500      	push	{lr}
 800440c:	b09c      	sub	sp, #112	@ 0x70
 800440e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	9006      	str	r0, [sp, #24]
 8004414:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004418:	4809      	ldr	r0, [pc, #36]	@ (8004440 <siprintf+0x38>)
 800441a:	9107      	str	r1, [sp, #28]
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	4909      	ldr	r1, [pc, #36]	@ (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	a902      	add	r1, sp, #8
 800442c:	f000 f994 	bl	8004758 <_svfiprintf_r>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	@ 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000014 	.word	0x20000014
 8004444:	ffff0208 	.word	0xffff0208

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	@ (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000014 	.word	0x20000014

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4d0d      	ldr	r5, [pc, #52]	@ (800449c <__libc_init_array+0x38>)
 8004468:	4c0d      	ldr	r4, [pc, #52]	@ (80044a0 <__libc_init_array+0x3c>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	2600      	movs	r6, #0
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	4d0b      	ldr	r5, [pc, #44]	@ (80044a4 <__libc_init_array+0x40>)
 8004476:	4c0c      	ldr	r4, [pc, #48]	@ (80044a8 <__libc_init_array+0x44>)
 8004478:	f000 fc66 	bl	8004d48 <_init>
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	2600      	movs	r6, #0
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	08004e14 	.word	0x08004e14
 80044a0:	08004e14 	.word	0x08004e14
 80044a4:	08004e14 	.word	0x08004e14
 80044a8:	08004e18 	.word	0x08004e18

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <_free_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4605      	mov	r5, r0
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d041      	beq.n	800453c <_free_r+0x8c>
 80044b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044bc:	1f0c      	subs	r4, r1, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb8      	it	lt
 80044c2:	18e4      	addlt	r4, r4, r3
 80044c4:	f000 f8e0 	bl	8004688 <__malloc_lock>
 80044c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <_free_r+0x90>)
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	b933      	cbnz	r3, 80044dc <_free_r+0x2c>
 80044ce:	6063      	str	r3, [r4, #4]
 80044d0:	6014      	str	r4, [r2, #0]
 80044d2:	4628      	mov	r0, r5
 80044d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d8:	f000 b8dc 	b.w	8004694 <__malloc_unlock>
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d908      	bls.n	80044f2 <_free_r+0x42>
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	1821      	adds	r1, r4, r0
 80044e4:	428b      	cmp	r3, r1
 80044e6:	bf01      	itttt	eq
 80044e8:	6819      	ldreq	r1, [r3, #0]
 80044ea:	685b      	ldreq	r3, [r3, #4]
 80044ec:	1809      	addeq	r1, r1, r0
 80044ee:	6021      	streq	r1, [r4, #0]
 80044f0:	e7ed      	b.n	80044ce <_free_r+0x1e>
 80044f2:	461a      	mov	r2, r3
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b10b      	cbz	r3, 80044fc <_free_r+0x4c>
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d9fa      	bls.n	80044f2 <_free_r+0x42>
 80044fc:	6811      	ldr	r1, [r2, #0]
 80044fe:	1850      	adds	r0, r2, r1
 8004500:	42a0      	cmp	r0, r4
 8004502:	d10b      	bne.n	800451c <_free_r+0x6c>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	4401      	add	r1, r0
 8004508:	1850      	adds	r0, r2, r1
 800450a:	4283      	cmp	r3, r0
 800450c:	6011      	str	r1, [r2, #0]
 800450e:	d1e0      	bne.n	80044d2 <_free_r+0x22>
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	6053      	str	r3, [r2, #4]
 8004516:	4408      	add	r0, r1
 8004518:	6010      	str	r0, [r2, #0]
 800451a:	e7da      	b.n	80044d2 <_free_r+0x22>
 800451c:	d902      	bls.n	8004524 <_free_r+0x74>
 800451e:	230c      	movs	r3, #12
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	e7d6      	b.n	80044d2 <_free_r+0x22>
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	1821      	adds	r1, r4, r0
 8004528:	428b      	cmp	r3, r1
 800452a:	bf04      	itt	eq
 800452c:	6819      	ldreq	r1, [r3, #0]
 800452e:	685b      	ldreq	r3, [r3, #4]
 8004530:	6063      	str	r3, [r4, #4]
 8004532:	bf04      	itt	eq
 8004534:	1809      	addeq	r1, r1, r0
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	6054      	str	r4, [r2, #4]
 800453a:	e7ca      	b.n	80044d2 <_free_r+0x22>
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	bf00      	nop
 8004540:	20000318 	.word	0x20000318

08004544 <sbrk_aligned>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4e0f      	ldr	r6, [pc, #60]	@ (8004584 <sbrk_aligned+0x40>)
 8004548:	460c      	mov	r4, r1
 800454a:	6831      	ldr	r1, [r6, #0]
 800454c:	4605      	mov	r5, r0
 800454e:	b911      	cbnz	r1, 8004556 <sbrk_aligned+0x12>
 8004550:	f000 fba6 	bl	8004ca0 <_sbrk_r>
 8004554:	6030      	str	r0, [r6, #0]
 8004556:	4621      	mov	r1, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f000 fba1 	bl	8004ca0 <_sbrk_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	d103      	bne.n	800456a <sbrk_aligned+0x26>
 8004562:	f04f 34ff 	mov.w	r4, #4294967295
 8004566:	4620      	mov	r0, r4
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	1cc4      	adds	r4, r0, #3
 800456c:	f024 0403 	bic.w	r4, r4, #3
 8004570:	42a0      	cmp	r0, r4
 8004572:	d0f8      	beq.n	8004566 <sbrk_aligned+0x22>
 8004574:	1a21      	subs	r1, r4, r0
 8004576:	4628      	mov	r0, r5
 8004578:	f000 fb92 	bl	8004ca0 <_sbrk_r>
 800457c:	3001      	adds	r0, #1
 800457e:	d1f2      	bne.n	8004566 <sbrk_aligned+0x22>
 8004580:	e7ef      	b.n	8004562 <sbrk_aligned+0x1e>
 8004582:	bf00      	nop
 8004584:	20000314 	.word	0x20000314

08004588 <_malloc_r>:
 8004588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800458c:	1ccd      	adds	r5, r1, #3
 800458e:	f025 0503 	bic.w	r5, r5, #3
 8004592:	3508      	adds	r5, #8
 8004594:	2d0c      	cmp	r5, #12
 8004596:	bf38      	it	cc
 8004598:	250c      	movcc	r5, #12
 800459a:	2d00      	cmp	r5, #0
 800459c:	4606      	mov	r6, r0
 800459e:	db01      	blt.n	80045a4 <_malloc_r+0x1c>
 80045a0:	42a9      	cmp	r1, r5
 80045a2:	d904      	bls.n	80045ae <_malloc_r+0x26>
 80045a4:	230c      	movs	r3, #12
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	2000      	movs	r0, #0
 80045aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004684 <_malloc_r+0xfc>
 80045b2:	f000 f869 	bl	8004688 <__malloc_lock>
 80045b6:	f8d8 3000 	ldr.w	r3, [r8]
 80045ba:	461c      	mov	r4, r3
 80045bc:	bb44      	cbnz	r4, 8004610 <_malloc_r+0x88>
 80045be:	4629      	mov	r1, r5
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff ffbf 	bl	8004544 <sbrk_aligned>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	4604      	mov	r4, r0
 80045ca:	d158      	bne.n	800467e <_malloc_r+0xf6>
 80045cc:	f8d8 4000 	ldr.w	r4, [r8]
 80045d0:	4627      	mov	r7, r4
 80045d2:	2f00      	cmp	r7, #0
 80045d4:	d143      	bne.n	800465e <_malloc_r+0xd6>
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	d04b      	beq.n	8004672 <_malloc_r+0xea>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	4639      	mov	r1, r7
 80045de:	4630      	mov	r0, r6
 80045e0:	eb04 0903 	add.w	r9, r4, r3
 80045e4:	f000 fb5c 	bl	8004ca0 <_sbrk_r>
 80045e8:	4581      	cmp	r9, r0
 80045ea:	d142      	bne.n	8004672 <_malloc_r+0xea>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	1a6d      	subs	r5, r5, r1
 80045f0:	4629      	mov	r1, r5
 80045f2:	4630      	mov	r0, r6
 80045f4:	f7ff ffa6 	bl	8004544 <sbrk_aligned>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d03a      	beq.n	8004672 <_malloc_r+0xea>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	442b      	add	r3, r5
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	f8d8 3000 	ldr.w	r3, [r8]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	bb62      	cbnz	r2, 8004664 <_malloc_r+0xdc>
 800460a:	f8c8 7000 	str.w	r7, [r8]
 800460e:	e00f      	b.n	8004630 <_malloc_r+0xa8>
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	1b52      	subs	r2, r2, r5
 8004614:	d420      	bmi.n	8004658 <_malloc_r+0xd0>
 8004616:	2a0b      	cmp	r2, #11
 8004618:	d917      	bls.n	800464a <_malloc_r+0xc2>
 800461a:	1961      	adds	r1, r4, r5
 800461c:	42a3      	cmp	r3, r4
 800461e:	6025      	str	r5, [r4, #0]
 8004620:	bf18      	it	ne
 8004622:	6059      	strne	r1, [r3, #4]
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	bf08      	it	eq
 8004628:	f8c8 1000 	streq.w	r1, [r8]
 800462c:	5162      	str	r2, [r4, r5]
 800462e:	604b      	str	r3, [r1, #4]
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f82f 	bl	8004694 <__malloc_unlock>
 8004636:	f104 000b 	add.w	r0, r4, #11
 800463a:	1d23      	adds	r3, r4, #4
 800463c:	f020 0007 	bic.w	r0, r0, #7
 8004640:	1ac2      	subs	r2, r0, r3
 8004642:	bf1c      	itt	ne
 8004644:	1a1b      	subne	r3, r3, r0
 8004646:	50a3      	strne	r3, [r4, r2]
 8004648:	e7af      	b.n	80045aa <_malloc_r+0x22>
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	42a3      	cmp	r3, r4
 800464e:	bf0c      	ite	eq
 8004650:	f8c8 2000 	streq.w	r2, [r8]
 8004654:	605a      	strne	r2, [r3, #4]
 8004656:	e7eb      	b.n	8004630 <_malloc_r+0xa8>
 8004658:	4623      	mov	r3, r4
 800465a:	6864      	ldr	r4, [r4, #4]
 800465c:	e7ae      	b.n	80045bc <_malloc_r+0x34>
 800465e:	463c      	mov	r4, r7
 8004660:	687f      	ldr	r7, [r7, #4]
 8004662:	e7b6      	b.n	80045d2 <_malloc_r+0x4a>
 8004664:	461a      	mov	r2, r3
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	42a3      	cmp	r3, r4
 800466a:	d1fb      	bne.n	8004664 <_malloc_r+0xdc>
 800466c:	2300      	movs	r3, #0
 800466e:	6053      	str	r3, [r2, #4]
 8004670:	e7de      	b.n	8004630 <_malloc_r+0xa8>
 8004672:	230c      	movs	r3, #12
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f80c 	bl	8004694 <__malloc_unlock>
 800467c:	e794      	b.n	80045a8 <_malloc_r+0x20>
 800467e:	6005      	str	r5, [r0, #0]
 8004680:	e7d6      	b.n	8004630 <_malloc_r+0xa8>
 8004682:	bf00      	nop
 8004684:	20000318 	.word	0x20000318

08004688 <__malloc_lock>:
 8004688:	4801      	ldr	r0, [pc, #4]	@ (8004690 <__malloc_lock+0x8>)
 800468a:	f7ff bf0f 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000310 	.word	0x20000310

08004694 <__malloc_unlock>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__malloc_unlock+0x8>)
 8004696:	f7ff bf0a 	b.w	80044ae <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000310 	.word	0x20000310

080046a0 <__ssputs_r>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	688e      	ldr	r6, [r1, #8]
 80046a6:	461f      	mov	r7, r3
 80046a8:	42be      	cmp	r6, r7
 80046aa:	680b      	ldr	r3, [r1, #0]
 80046ac:	4682      	mov	sl, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	4690      	mov	r8, r2
 80046b2:	d82d      	bhi.n	8004710 <__ssputs_r+0x70>
 80046b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046bc:	d026      	beq.n	800470c <__ssputs_r+0x6c>
 80046be:	6965      	ldr	r5, [r4, #20]
 80046c0:	6909      	ldr	r1, [r1, #16]
 80046c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c6:	eba3 0901 	sub.w	r9, r3, r1
 80046ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ce:	1c7b      	adds	r3, r7, #1
 80046d0:	444b      	add	r3, r9
 80046d2:	106d      	asrs	r5, r5, #1
 80046d4:	429d      	cmp	r5, r3
 80046d6:	bf38      	it	cc
 80046d8:	461d      	movcc	r5, r3
 80046da:	0553      	lsls	r3, r2, #21
 80046dc:	d527      	bpl.n	800472e <__ssputs_r+0x8e>
 80046de:	4629      	mov	r1, r5
 80046e0:	f7ff ff52 	bl	8004588 <_malloc_r>
 80046e4:	4606      	mov	r6, r0
 80046e6:	b360      	cbz	r0, 8004742 <__ssputs_r+0xa2>
 80046e8:	6921      	ldr	r1, [r4, #16]
 80046ea:	464a      	mov	r2, r9
 80046ec:	f000 fae8 	bl	8004cc0 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	6165      	str	r5, [r4, #20]
 8004700:	444e      	add	r6, r9
 8004702:	eba5 0509 	sub.w	r5, r5, r9
 8004706:	6026      	str	r6, [r4, #0]
 8004708:	60a5      	str	r5, [r4, #8]
 800470a:	463e      	mov	r6, r7
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x72>
 8004710:	463e      	mov	r6, r7
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	4632      	mov	r2, r6
 8004716:	4641      	mov	r1, r8
 8004718:	f000 faa8 	bl	8004c6c <memmove>
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	1b9b      	subs	r3, r3, r6
 8004720:	60a3      	str	r3, [r4, #8]
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	4433      	add	r3, r6
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472e:	462a      	mov	r2, r5
 8004730:	f000 fad4 	bl	8004cdc <_realloc_r>
 8004734:	4606      	mov	r6, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d1e0      	bne.n	80046fc <__ssputs_r+0x5c>
 800473a:	6921      	ldr	r1, [r4, #16]
 800473c:	4650      	mov	r0, sl
 800473e:	f7ff feb7 	bl	80044b0 <_free_r>
 8004742:	230c      	movs	r3, #12
 8004744:	f8ca 3000 	str.w	r3, [sl]
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474e:	81a3      	strh	r3, [r4, #12]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e7e9      	b.n	800472a <__ssputs_r+0x8a>
	...

08004758 <_svfiprintf_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4698      	mov	r8, r3
 800475e:	898b      	ldrh	r3, [r1, #12]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	b09d      	sub	sp, #116	@ 0x74
 8004764:	4607      	mov	r7, r0
 8004766:	460d      	mov	r5, r1
 8004768:	4614      	mov	r4, r2
 800476a:	d510      	bpl.n	800478e <_svfiprintf_r+0x36>
 800476c:	690b      	ldr	r3, [r1, #16]
 800476e:	b973      	cbnz	r3, 800478e <_svfiprintf_r+0x36>
 8004770:	2140      	movs	r1, #64	@ 0x40
 8004772:	f7ff ff09 	bl	8004588 <_malloc_r>
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	6128      	str	r0, [r5, #16]
 800477a:	b930      	cbnz	r0, 800478a <_svfiprintf_r+0x32>
 800477c:	230c      	movs	r3, #12
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	b01d      	add	sp, #116	@ 0x74
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	2340      	movs	r3, #64	@ 0x40
 800478c:	616b      	str	r3, [r5, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	9309      	str	r3, [sp, #36]	@ 0x24
 8004792:	2320      	movs	r3, #32
 8004794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004798:	f8cd 800c 	str.w	r8, [sp, #12]
 800479c:	2330      	movs	r3, #48	@ 0x30
 800479e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800493c <_svfiprintf_r+0x1e4>
 80047a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047a6:	f04f 0901 	mov.w	r9, #1
 80047aa:	4623      	mov	r3, r4
 80047ac:	469a      	mov	sl, r3
 80047ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b2:	b10a      	cbz	r2, 80047b8 <_svfiprintf_r+0x60>
 80047b4:	2a25      	cmp	r2, #37	@ 0x25
 80047b6:	d1f9      	bne.n	80047ac <_svfiprintf_r+0x54>
 80047b8:	ebba 0b04 	subs.w	fp, sl, r4
 80047bc:	d00b      	beq.n	80047d6 <_svfiprintf_r+0x7e>
 80047be:	465b      	mov	r3, fp
 80047c0:	4622      	mov	r2, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ff6b 	bl	80046a0 <__ssputs_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	f000 80a7 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d2:	445a      	add	r2, fp
 80047d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d6:	f89a 3000 	ldrb.w	r3, [sl]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 809f 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ea:	f10a 0a01 	add.w	sl, sl, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f8:	4654      	mov	r4, sl
 80047fa:	2205      	movs	r2, #5
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	484e      	ldr	r0, [pc, #312]	@ (800493c <_svfiprintf_r+0x1e4>)
 8004802:	f7fb fced 	bl	80001e0 <memchr>
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	b9d8      	cbnz	r0, 8004842 <_svfiprintf_r+0xea>
 800480a:	06d0      	lsls	r0, r2, #27
 800480c:	bf44      	itt	mi
 800480e:	2320      	movmi	r3, #32
 8004810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004814:	0711      	lsls	r1, r2, #28
 8004816:	bf44      	itt	mi
 8004818:	232b      	movmi	r3, #43	@ 0x2b
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481e:	f89a 3000 	ldrb.w	r3, [sl]
 8004822:	2b2a      	cmp	r3, #42	@ 0x2a
 8004824:	d015      	beq.n	8004852 <_svfiprintf_r+0xfa>
 8004826:	9a07      	ldr	r2, [sp, #28]
 8004828:	4654      	mov	r4, sl
 800482a:	2000      	movs	r0, #0
 800482c:	f04f 0c0a 	mov.w	ip, #10
 8004830:	4621      	mov	r1, r4
 8004832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004836:	3b30      	subs	r3, #48	@ 0x30
 8004838:	2b09      	cmp	r3, #9
 800483a:	d94b      	bls.n	80048d4 <_svfiprintf_r+0x17c>
 800483c:	b1b0      	cbz	r0, 800486c <_svfiprintf_r+0x114>
 800483e:	9207      	str	r2, [sp, #28]
 8004840:	e014      	b.n	800486c <_svfiprintf_r+0x114>
 8004842:	eba0 0308 	sub.w	r3, r0, r8
 8004846:	fa09 f303 	lsl.w	r3, r9, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	46a2      	mov	sl, r4
 8004850:	e7d2      	b.n	80047f8 <_svfiprintf_r+0xa0>
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	9103      	str	r1, [sp, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfbb      	ittet	lt
 800485e:	425b      	neglt	r3, r3
 8004860:	f042 0202 	orrlt.w	r2, r2, #2
 8004864:	9307      	strge	r3, [sp, #28]
 8004866:	9307      	strlt	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	9204      	strlt	r2, [sp, #16]
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004870:	d10a      	bne.n	8004888 <_svfiprintf_r+0x130>
 8004872:	7863      	ldrb	r3, [r4, #1]
 8004874:	2b2a      	cmp	r3, #42	@ 0x2a
 8004876:	d132      	bne.n	80048de <_svfiprintf_r+0x186>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004884:	3402      	adds	r4, #2
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800494c <_svfiprintf_r+0x1f4>
 800488c:	7821      	ldrb	r1, [r4, #0]
 800488e:	2203      	movs	r2, #3
 8004890:	4650      	mov	r0, sl
 8004892:	f7fb fca5 	bl	80001e0 <memchr>
 8004896:	b138      	cbz	r0, 80048a8 <_svfiprintf_r+0x150>
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	eba0 000a 	sub.w	r0, r0, sl
 800489e:	2240      	movs	r2, #64	@ 0x40
 80048a0:	4082      	lsls	r2, r0
 80048a2:	4313      	orrs	r3, r2
 80048a4:	3401      	adds	r4, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	4824      	ldr	r0, [pc, #144]	@ (8004940 <_svfiprintf_r+0x1e8>)
 80048ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048b2:	2206      	movs	r2, #6
 80048b4:	f7fb fc94 	bl	80001e0 <memchr>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d036      	beq.n	800492a <_svfiprintf_r+0x1d2>
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <_svfiprintf_r+0x1ec>)
 80048be:	bb1b      	cbnz	r3, 8004908 <_svfiprintf_r+0x1b0>
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	3307      	adds	r3, #7
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	3308      	adds	r3, #8
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ce:	4433      	add	r3, r6
 80048d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d2:	e76a      	b.n	80047aa <_svfiprintf_r+0x52>
 80048d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d8:	460c      	mov	r4, r1
 80048da:	2001      	movs	r0, #1
 80048dc:	e7a8      	b.n	8004830 <_svfiprintf_r+0xd8>
 80048de:	2300      	movs	r3, #0
 80048e0:	3401      	adds	r4, #1
 80048e2:	9305      	str	r3, [sp, #20]
 80048e4:	4619      	mov	r1, r3
 80048e6:	f04f 0c0a 	mov.w	ip, #10
 80048ea:	4620      	mov	r0, r4
 80048ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f0:	3a30      	subs	r2, #48	@ 0x30
 80048f2:	2a09      	cmp	r2, #9
 80048f4:	d903      	bls.n	80048fe <_svfiprintf_r+0x1a6>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c6      	beq.n	8004888 <_svfiprintf_r+0x130>
 80048fa:	9105      	str	r1, [sp, #20]
 80048fc:	e7c4      	b.n	8004888 <_svfiprintf_r+0x130>
 80048fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004902:	4604      	mov	r4, r0
 8004904:	2301      	movs	r3, #1
 8004906:	e7f0      	b.n	80048ea <_svfiprintf_r+0x192>
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462a      	mov	r2, r5
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <_svfiprintf_r+0x1f0>)
 8004910:	a904      	add	r1, sp, #16
 8004912:	4638      	mov	r0, r7
 8004914:	f3af 8000 	nop.w
 8004918:	1c42      	adds	r2, r0, #1
 800491a:	4606      	mov	r6, r0
 800491c:	d1d6      	bne.n	80048cc <_svfiprintf_r+0x174>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	065b      	lsls	r3, r3, #25
 8004922:	f53f af2d 	bmi.w	8004780 <_svfiprintf_r+0x28>
 8004926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004928:	e72c      	b.n	8004784 <_svfiprintf_r+0x2c>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <_svfiprintf_r+0x1f0>)
 8004932:	a904      	add	r1, sp, #16
 8004934:	4638      	mov	r0, r7
 8004936:	f000 f879 	bl	8004a2c <_printf_i>
 800493a:	e7ed      	b.n	8004918 <_svfiprintf_r+0x1c0>
 800493c:	08004dd8 	.word	0x08004dd8
 8004940:	08004de2 	.word	0x08004de2
 8004944:	00000000 	.word	0x00000000
 8004948:	080046a1 	.word	0x080046a1
 800494c:	08004dde 	.word	0x08004dde

08004950 <_printf_common>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	4698      	mov	r8, r3
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004960:	4293      	cmp	r3, r2
 8004962:	bfb8      	it	lt
 8004964:	4613      	movlt	r3, r2
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800496c:	4607      	mov	r7, r0
 800496e:	460c      	mov	r4, r1
 8004970:	b10a      	cbz	r2, 8004976 <_printf_common+0x26>
 8004972:	3301      	adds	r3, #1
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	0699      	lsls	r1, r3, #26
 800497a:	bf42      	ittt	mi
 800497c:	6833      	ldrmi	r3, [r6, #0]
 800497e:	3302      	addmi	r3, #2
 8004980:	6033      	strmi	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	f015 0506 	ands.w	r5, r5, #6
 8004988:	d106      	bne.n	8004998 <_printf_common+0x48>
 800498a:	f104 0a19 	add.w	sl, r4, #25
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	6832      	ldr	r2, [r6, #0]
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	42ab      	cmp	r3, r5
 8004996:	dc26      	bgt.n	80049e6 <_printf_common+0x96>
 8004998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	3b00      	subs	r3, #0
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d42b      	bmi.n	8004a00 <_printf_common+0xb0>
 80049a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049ac:	4641      	mov	r1, r8
 80049ae:	4638      	mov	r0, r7
 80049b0:	47c8      	blx	r9
 80049b2:	3001      	adds	r0, #1
 80049b4:	d01e      	beq.n	80049f4 <_printf_common+0xa4>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf02      	ittt	eq
 80049c2:	68e5      	ldreq	r5, [r4, #12]
 80049c4:	6833      	ldreq	r3, [r6, #0]
 80049c6:	1aed      	subeq	r5, r5, r3
 80049c8:	68a3      	ldr	r3, [r4, #8]
 80049ca:	bf0c      	ite	eq
 80049cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d0:	2500      	movne	r5, #0
 80049d2:	4293      	cmp	r3, r2
 80049d4:	bfc4      	itt	gt
 80049d6:	1a9b      	subgt	r3, r3, r2
 80049d8:	18ed      	addgt	r5, r5, r3
 80049da:	2600      	movs	r6, #0
 80049dc:	341a      	adds	r4, #26
 80049de:	42b5      	cmp	r5, r6
 80049e0:	d11a      	bne.n	8004a18 <_printf_common+0xc8>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e008      	b.n	80049f8 <_printf_common+0xa8>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4652      	mov	r2, sl
 80049ea:	4641      	mov	r1, r8
 80049ec:	4638      	mov	r0, r7
 80049ee:	47c8      	blx	r9
 80049f0:	3001      	adds	r0, #1
 80049f2:	d103      	bne.n	80049fc <_printf_common+0xac>
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fc:	3501      	adds	r5, #1
 80049fe:	e7c6      	b.n	800498e <_printf_common+0x3e>
 8004a00:	18e1      	adds	r1, r4, r3
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	2030      	movs	r0, #48	@ 0x30
 8004a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a0a:	4422      	add	r2, r4
 8004a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a14:	3302      	adds	r3, #2
 8004a16:	e7c7      	b.n	80049a8 <_printf_common+0x58>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c8      	blx	r9
 8004a22:	3001      	adds	r0, #1
 8004a24:	d0e6      	beq.n	80049f4 <_printf_common+0xa4>
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7d9      	b.n	80049de <_printf_common+0x8e>
	...

08004a2c <_printf_i>:
 8004a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	7e0f      	ldrb	r7, [r1, #24]
 8004a32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a34:	2f78      	cmp	r7, #120	@ 0x78
 8004a36:	4691      	mov	r9, r2
 8004a38:	4680      	mov	r8, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	469a      	mov	sl, r3
 8004a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a42:	d807      	bhi.n	8004a54 <_printf_i+0x28>
 8004a44:	2f62      	cmp	r7, #98	@ 0x62
 8004a46:	d80a      	bhi.n	8004a5e <_printf_i+0x32>
 8004a48:	2f00      	cmp	r7, #0
 8004a4a:	f000 80d2 	beq.w	8004bf2 <_printf_i+0x1c6>
 8004a4e:	2f58      	cmp	r7, #88	@ 0x58
 8004a50:	f000 80b9 	beq.w	8004bc6 <_printf_i+0x19a>
 8004a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a5c:	e03a      	b.n	8004ad4 <_printf_i+0xa8>
 8004a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a62:	2b15      	cmp	r3, #21
 8004a64:	d8f6      	bhi.n	8004a54 <_printf_i+0x28>
 8004a66:	a101      	add	r1, pc, #4	@ (adr r1, 8004a6c <_printf_i+0x40>)
 8004a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a6c:	08004ac5 	.word	0x08004ac5
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004a55 	.word	0x08004a55
 8004a78:	08004a55 	.word	0x08004a55
 8004a7c:	08004a55 	.word	0x08004a55
 8004a80:	08004a55 	.word	0x08004a55
 8004a84:	08004ad9 	.word	0x08004ad9
 8004a88:	08004a55 	.word	0x08004a55
 8004a8c:	08004a55 	.word	0x08004a55
 8004a90:	08004a55 	.word	0x08004a55
 8004a94:	08004a55 	.word	0x08004a55
 8004a98:	08004bd9 	.word	0x08004bd9
 8004a9c:	08004b03 	.word	0x08004b03
 8004aa0:	08004b93 	.word	0x08004b93
 8004aa4:	08004a55 	.word	0x08004a55
 8004aa8:	08004a55 	.word	0x08004a55
 8004aac:	08004bfb 	.word	0x08004bfb
 8004ab0:	08004a55 	.word	0x08004a55
 8004ab4:	08004b03 	.word	0x08004b03
 8004ab8:	08004a55 	.word	0x08004a55
 8004abc:	08004a55 	.word	0x08004a55
 8004ac0:	08004b9b 	.word	0x08004b9b
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6032      	str	r2, [r6, #0]
 8004acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e09d      	b.n	8004c14 <_printf_i+0x1e8>
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	1d19      	adds	r1, r3, #4
 8004ade:	6031      	str	r1, [r6, #0]
 8004ae0:	0606      	lsls	r6, r0, #24
 8004ae2:	d501      	bpl.n	8004ae8 <_printf_i+0xbc>
 8004ae4:	681d      	ldr	r5, [r3, #0]
 8004ae6:	e003      	b.n	8004af0 <_printf_i+0xc4>
 8004ae8:	0645      	lsls	r5, r0, #25
 8004aea:	d5fb      	bpl.n	8004ae4 <_printf_i+0xb8>
 8004aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	da03      	bge.n	8004afc <_printf_i+0xd0>
 8004af4:	232d      	movs	r3, #45	@ 0x2d
 8004af6:	426d      	negs	r5, r5
 8004af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004afc:	4859      	ldr	r0, [pc, #356]	@ (8004c64 <_printf_i+0x238>)
 8004afe:	230a      	movs	r3, #10
 8004b00:	e011      	b.n	8004b26 <_printf_i+0xfa>
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	0608      	lsls	r0, r1, #24
 8004b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b0c:	d402      	bmi.n	8004b14 <_printf_i+0xe8>
 8004b0e:	0649      	lsls	r1, r1, #25
 8004b10:	bf48      	it	mi
 8004b12:	b2ad      	uxthmi	r5, r5
 8004b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b16:	4853      	ldr	r0, [pc, #332]	@ (8004c64 <_printf_i+0x238>)
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	bf14      	ite	ne
 8004b1c:	230a      	movne	r3, #10
 8004b1e:	2308      	moveq	r3, #8
 8004b20:	2100      	movs	r1, #0
 8004b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b26:	6866      	ldr	r6, [r4, #4]
 8004b28:	60a6      	str	r6, [r4, #8]
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	bfa2      	ittt	ge
 8004b2e:	6821      	ldrge	r1, [r4, #0]
 8004b30:	f021 0104 	bicge.w	r1, r1, #4
 8004b34:	6021      	strge	r1, [r4, #0]
 8004b36:	b90d      	cbnz	r5, 8004b3c <_printf_i+0x110>
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	d04b      	beq.n	8004bd4 <_printf_i+0x1a8>
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b42:	fb03 5711 	mls	r7, r3, r1, r5
 8004b46:	5dc7      	ldrb	r7, [r0, r7]
 8004b48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b4c:	462f      	mov	r7, r5
 8004b4e:	42bb      	cmp	r3, r7
 8004b50:	460d      	mov	r5, r1
 8004b52:	d9f4      	bls.n	8004b3e <_printf_i+0x112>
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d10b      	bne.n	8004b70 <_printf_i+0x144>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07df      	lsls	r7, r3, #31
 8004b5c:	d508      	bpl.n	8004b70 <_printf_i+0x144>
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	6861      	ldr	r1, [r4, #4]
 8004b62:	4299      	cmp	r1, r3
 8004b64:	bfde      	ittt	le
 8004b66:	2330      	movle	r3, #48	@ 0x30
 8004b68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b70:	1b92      	subs	r2, r2, r6
 8004b72:	6122      	str	r2, [r4, #16]
 8004b74:	f8cd a000 	str.w	sl, [sp]
 8004b78:	464b      	mov	r3, r9
 8004b7a:	aa03      	add	r2, sp, #12
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f7ff fee6 	bl	8004950 <_printf_common>
 8004b84:	3001      	adds	r0, #1
 8004b86:	d14a      	bne.n	8004c1e <_printf_i+0x1f2>
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	b004      	add	sp, #16
 8004b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	4833      	ldr	r0, [pc, #204]	@ (8004c68 <_printf_i+0x23c>)
 8004b9c:	2778      	movs	r7, #120	@ 0x78
 8004b9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6831      	ldr	r1, [r6, #0]
 8004ba6:	061f      	lsls	r7, r3, #24
 8004ba8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bac:	d402      	bmi.n	8004bb4 <_printf_i+0x188>
 8004bae:	065f      	lsls	r7, r3, #25
 8004bb0:	bf48      	it	mi
 8004bb2:	b2ad      	uxthmi	r5, r5
 8004bb4:	6031      	str	r1, [r6, #0]
 8004bb6:	07d9      	lsls	r1, r3, #31
 8004bb8:	bf44      	itt	mi
 8004bba:	f043 0320 	orrmi.w	r3, r3, #32
 8004bbe:	6023      	strmi	r3, [r4, #0]
 8004bc0:	b11d      	cbz	r5, 8004bca <_printf_i+0x19e>
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	e7ac      	b.n	8004b20 <_printf_i+0xf4>
 8004bc6:	4827      	ldr	r0, [pc, #156]	@ (8004c64 <_printf_i+0x238>)
 8004bc8:	e7e9      	b.n	8004b9e <_printf_i+0x172>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	f023 0320 	bic.w	r3, r3, #32
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	e7f6      	b.n	8004bc2 <_printf_i+0x196>
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	e7bd      	b.n	8004b54 <_printf_i+0x128>
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	6825      	ldr	r5, [r4, #0]
 8004bdc:	6961      	ldr	r1, [r4, #20]
 8004bde:	1d18      	adds	r0, r3, #4
 8004be0:	6030      	str	r0, [r6, #0]
 8004be2:	062e      	lsls	r6, r5, #24
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	d501      	bpl.n	8004bec <_printf_i+0x1c0>
 8004be8:	6019      	str	r1, [r3, #0]
 8004bea:	e002      	b.n	8004bf2 <_printf_i+0x1c6>
 8004bec:	0668      	lsls	r0, r5, #25
 8004bee:	d5fb      	bpl.n	8004be8 <_printf_i+0x1bc>
 8004bf0:	8019      	strh	r1, [r3, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	e7bc      	b.n	8004b74 <_printf_i+0x148>
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	1d1a      	adds	r2, r3, #4
 8004bfe:	6032      	str	r2, [r6, #0]
 8004c00:	681e      	ldr	r6, [r3, #0]
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	2100      	movs	r1, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7fb faea 	bl	80001e0 <memchr>
 8004c0c:	b108      	cbz	r0, 8004c12 <_printf_i+0x1e6>
 8004c0e:	1b80      	subs	r0, r0, r6
 8004c10:	6060      	str	r0, [r4, #4]
 8004c12:	6863      	ldr	r3, [r4, #4]
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	2300      	movs	r3, #0
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1c:	e7aa      	b.n	8004b74 <_printf_i+0x148>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	4632      	mov	r2, r6
 8004c22:	4649      	mov	r1, r9
 8004c24:	4640      	mov	r0, r8
 8004c26:	47d0      	blx	sl
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d0ad      	beq.n	8004b88 <_printf_i+0x15c>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	079b      	lsls	r3, r3, #30
 8004c30:	d413      	bmi.n	8004c5a <_printf_i+0x22e>
 8004c32:	68e0      	ldr	r0, [r4, #12]
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	4298      	cmp	r0, r3
 8004c38:	bfb8      	it	lt
 8004c3a:	4618      	movlt	r0, r3
 8004c3c:	e7a6      	b.n	8004b8c <_printf_i+0x160>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4632      	mov	r2, r6
 8004c42:	4649      	mov	r1, r9
 8004c44:	4640      	mov	r0, r8
 8004c46:	47d0      	blx	sl
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d09d      	beq.n	8004b88 <_printf_i+0x15c>
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	9903      	ldr	r1, [sp, #12]
 8004c52:	1a5b      	subs	r3, r3, r1
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	dcf2      	bgt.n	8004c3e <_printf_i+0x212>
 8004c58:	e7eb      	b.n	8004c32 <_printf_i+0x206>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	f104 0619 	add.w	r6, r4, #25
 8004c60:	e7f5      	b.n	8004c4e <_printf_i+0x222>
 8004c62:	bf00      	nop
 8004c64:	08004de9 	.word	0x08004de9
 8004c68:	08004dfa 	.word	0x08004dfa

08004c6c <memmove>:
 8004c6c:	4288      	cmp	r0, r1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	eb01 0402 	add.w	r4, r1, r2
 8004c74:	d902      	bls.n	8004c7c <memmove+0x10>
 8004c76:	4284      	cmp	r4, r0
 8004c78:	4623      	mov	r3, r4
 8004c7a:	d807      	bhi.n	8004c8c <memmove+0x20>
 8004c7c:	1e43      	subs	r3, r0, #1
 8004c7e:	42a1      	cmp	r1, r4
 8004c80:	d008      	beq.n	8004c94 <memmove+0x28>
 8004c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8a:	e7f8      	b.n	8004c7e <memmove+0x12>
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4601      	mov	r1, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	d100      	bne.n	8004c96 <memmove+0x2a>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9e:	e7f7      	b.n	8004c90 <memmove+0x24>

08004ca0 <_sbrk_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d06      	ldr	r5, [pc, #24]	@ (8004cbc <_sbrk_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fc f838 	bl	8000d20 <_sbrk>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_sbrk_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_sbrk_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	2000030c 	.word	0x2000030c

08004cc0 <memcpy>:
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc8:	d100      	bne.n	8004ccc <memcpy+0xc>
 8004cca:	4770      	bx	lr
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	d1f9      	bne.n	8004cce <memcpy+0xe>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_realloc_r>:
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b921      	cbnz	r1, 8004cf2 <_realloc_r+0x16>
 8004ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	4611      	mov	r1, r2
 8004cee:	f7ff bc4b 	b.w	8004588 <_malloc_r>
 8004cf2:	b92a      	cbnz	r2, 8004d00 <_realloc_r+0x24>
 8004cf4:	f7ff fbdc 	bl	80044b0 <_free_r>
 8004cf8:	2400      	movs	r4, #0
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	f000 f81a 	bl	8004d38 <_malloc_usable_size_r>
 8004d04:	4285      	cmp	r5, r0
 8004d06:	4606      	mov	r6, r0
 8004d08:	d802      	bhi.n	8004d10 <_realloc_r+0x34>
 8004d0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d0e:	d8f4      	bhi.n	8004cfa <_realloc_r+0x1e>
 8004d10:	4629      	mov	r1, r5
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fc38 	bl	8004588 <_malloc_r>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0ec      	beq.n	8004cf8 <_realloc_r+0x1c>
 8004d1e:	42b5      	cmp	r5, r6
 8004d20:	462a      	mov	r2, r5
 8004d22:	4621      	mov	r1, r4
 8004d24:	bf28      	it	cs
 8004d26:	4632      	movcs	r2, r6
 8004d28:	f7ff ffca 	bl	8004cc0 <memcpy>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7ff fbbe 	bl	80044b0 <_free_r>
 8004d34:	463c      	mov	r4, r7
 8004d36:	e7e0      	b.n	8004cfa <_realloc_r+0x1e>

08004d38 <_malloc_usable_size_r>:
 8004d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3c:	1f18      	subs	r0, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfbc      	itt	lt
 8004d42:	580b      	ldrlt	r3, [r1, r0]
 8004d44:	18c0      	addlt	r0, r0, r3
 8004d46:	4770      	bx	lr

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
