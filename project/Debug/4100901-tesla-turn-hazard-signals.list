
4100901-tesla-turn-hazard-signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003788  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003910  08003910  00004910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003960  08003960  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003960  08003960  00004960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003964  08003964  00004964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003968  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003974  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003974  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c079  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d21  00000000  00000000  000110b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000772  00000000  00000000  00013790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259b6  00000000  00000000  00013f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1ec  00000000  00000000  000398b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7641  00000000  00000000  00045aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d0e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  0012d128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038f8 	.word	0x080038f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038f8 	.word	0x080038f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <delayMs>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// declaration of the delay function on ms
void delayMs(uint32_t ms)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < ms * 1000; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	e003      	b.n	80004ce <delayMs+0x16>
  {
    __NOP(); // mo operation
 80004c6:	bf00      	nop
  for (uint32_t i = 0; i < ms * 1000; i++)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	3301      	adds	r3, #1
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d3f3      	bcc.n	80004c6 <delayMs+0xe>
  }
}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fa5a 	bl	80009aa <HAL_Init>

  /* USER CODE BEGIN Init */

  //  clock enabled for the GPIOA port used to control our lD2 and now PC13 as gpio input (button)
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOCEN;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <main+0x78>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000564 <main+0x78>)
 80004fc:	f043 0305 	orr.w	r3, r3, #5
 8000500:	64d3      	str	r3, [r2, #76]	@ 0x4c

  // configure pa5 as output :

  LD2_GPIO_Port->MODER &= ~(3UL << (2 * LD2_Pin)); // cleaning MODER5 bits using LD2 port
 8000502:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000506:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6013      	str	r3, [r2, #0]
  LD2_GPIO_Port->MODER |= (1UL << (2 * LD2_Pin));  // LD2 as output
 800050e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000512:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6013      	str	r3, [r2, #0]

  // configure PC13 as input:
  BlueButton_GPIO_Port->MODER &= ~(3UL << (2 * BlueButton_Pin)); // Clear bits 26 and 27 for PC13
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <main+0x7c>)
 800051c:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <main+0x7c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6013      	str	r3, [r2, #0]
  // in MODER to configure blueButton as input

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f823 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8a3 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f871 	bl	8000610 <MX_USART2_UART_Init>
  while (1)
  {


	 // reading state from blue button (PC13)
	  uint32_t blueButtonState = BlueButton_GPIO_Port -> IDR & BlueButton_Pin;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <main+0x7c>)
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000536:	607b      	str	r3, [r7, #4]

	 // conditional if the button is pressed, then IDR is equal to zero, then turn the LD2

	  if (blueButtonState == 0)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d108      	bne.n	8000550 <main+0x64>
	  {
		  // turning on LD2
		  LD2_GPIO_Port->BSRR = GPIO_BSRR_BS5; // PA5 as high with BS5 register (bit set)
 800053e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000542:	2220      	movs	r2, #32
 8000544:	619a      	str	r2, [r3, #24]
		  delayMs(500);
 8000546:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800054a:	f7ff ffb5 	bl	80004b8 <delayMs>
 800054e:	e7ee      	b.n	800052e <main+0x42>


	  }else {

		  // turning off LD2
		  LD2_GPIO_Port->BSRR = GPIO_BSRR_BR5; // PA5 as low with BR5 register (bit reset)
 8000550:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000554:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000558:	619a      	str	r2, [r3, #24]
		  delayMs(500);                        // using function delay with 500 ms
 800055a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800055e:	f7ff ffab 	bl	80004b8 <delayMs>
  {
 8000562:	e7e4      	b.n	800052e <main+0x42>
 8000564:	40021000 	.word	0x40021000
 8000568:	48000800 	.word	0x48000800

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	@ 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	@ 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 f98f 	bl	800389e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000592:	f000 fe03 	bl	800119c <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f8f4 	bl	8000788 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a0:	2310      	movs	r3, #16
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ac:	2360      	movs	r3, #96	@ 0x60
 80005ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b4:	2301      	movs	r3, #1
 80005b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005bc:	2328      	movs	r3, #40	@ 0x28
 80005be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fe39 	bl	8001248 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005dc:	f000 f8d4 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fa01 	bl	8001a00 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000604:	f000 f8c0 	bl	8000788 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3758      	adds	r7, #88	@ 0x58
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	@ (800066c <MX_USART2_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000654:	f002 f8b4 	bl	80027c0 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f893 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <MX_GPIO_Init+0x10c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <MX_GPIO_Init+0x10c>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b3a      	ldr	r3, [pc, #232]	@ (800077c <MX_GPIO_Init+0x10c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b37      	ldr	r3, [pc, #220]	@ (800077c <MX_GPIO_Init+0x10c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a36      	ldr	r2, [pc, #216]	@ (800077c <MX_GPIO_Init+0x10c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b34      	ldr	r3, [pc, #208]	@ (800077c <MX_GPIO_Init+0x10c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b31      	ldr	r3, [pc, #196]	@ (800077c <MX_GPIO_Init+0x10c>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a30      	ldr	r2, [pc, #192]	@ (800077c <MX_GPIO_Init+0x10c>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b2e      	ldr	r3, [pc, #184]	@ (800077c <MX_GPIO_Init+0x10c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D3_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	21a0      	movs	r1, #160	@ 0xa0
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f000 fd17 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2140      	movs	r1, #64	@ 0x40
 80006de:	4828      	ldr	r0, [pc, #160]	@ (8000780 <MX_GPIO_Init+0x110>)
 80006e0:	f000 fd12 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <MX_GPIO_Init+0x114>)
 80006fa:	f000 fb5b 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 80006fe:	2312      	movs	r3, #18
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000702:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f000 fb4d 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D3_Pin;
 800071a:	23a0      	movs	r3, #160	@ 0xa0
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000734:	f000 fb3e 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000738:	2340      	movs	r3, #64	@ 0x40
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	480c      	ldr	r0, [pc, #48]	@ (8000780 <MX_GPIO_Init+0x110>)
 8000750:	f000 fb30 	bl	8000db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2007      	movs	r0, #7
 800075a:	f000 fa76 	bl	8000c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800075e:	2007      	movs	r0, #7
 8000760:	f000 fa8f 	bl	8000c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	200a      	movs	r0, #10
 800076a:	f000 fa6e 	bl	8000c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800076e:	200a      	movs	r0, #10
 8000770:	f000 fa87 	bl	8000c82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0ac      	sub	sp, #176	@ 0xb0
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2288      	movs	r2, #136	@ 0x88
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 f84e 	bl	800389e <memset>
  if(huart->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a25      	ldr	r2, [pc, #148]	@ (800089c <HAL_UART_MspInit+0xc0>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d143      	bne.n	8000894 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fb15 	bl	8001e48 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000824:	f7ff ffb0 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <HAL_UART_MspInit+0xc4>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082c:	4a1c      	ldr	r2, [pc, #112]	@ (80008a0 <HAL_UART_MspInit+0xc4>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000832:	6593      	str	r3, [r2, #88]	@ 0x58
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <HAL_UART_MspInit+0xc4>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <HAL_UART_MspInit+0xc4>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	4a16      	ldr	r2, [pc, #88]	@ (80008a0 <HAL_UART_MspInit+0xc4>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <HAL_UART_MspInit+0xc4>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000858:	230c      	movs	r3, #12
 800085a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000870:	2307      	movs	r3, #7
 8000872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000880:	f000 fa98 	bl	8000db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2026      	movs	r0, #38	@ 0x26
 800088a:	f000 f9de 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088e:	2026      	movs	r0, #38	@ 0x26
 8000890:	f000 f9f7 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	37b0      	adds	r7, #176	@ 0xb0
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40004400 	.word	0x40004400
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <UsageFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f8ab 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000906:	2002      	movs	r0, #2
 8000908:	f000 fc16 	bl	8001138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000914:	2010      	movs	r0, #16
 8000916:	f000 fc0f 	bl	8001138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <USART2_IRQHandler+0x10>)
 8000926:	f001 ff99 	bl	800285c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 ff93 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fdaf 	bl	80004ec <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	08003968 	.word	0x08003968
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	200000b4 	.word	0x200000b4

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>

080009aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f93d 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ba:	200f      	movs	r0, #15
 80009bc:	f000 f80e 	bl	80009dc <HAL_InitTick>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	e001      	b.n	80009d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009cc:	f7ff fee2 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <HAL_InitTick+0x6c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d023      	beq.n	8000a38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <HAL_InitTick+0x70>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <HAL_InitTick+0x6c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f949 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10f      	bne.n	8000a32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d809      	bhi.n	8000a2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f913 	bl	8000c4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_InitTick+0x74>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e007      	b.n	8000a3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	e004      	b.n	8000a3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e001      	b.n	8000a3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200000b0 	.word	0x200000b0

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200000b0 	.word	0x200000b0

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	@ (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d008      	beq.n	8000ce0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e022      	b.n	8000d26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 020e 	bic.w	r2, r2, #14
 8000cee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d04:	f003 021c 	and.w	r2, r3, #28
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d005      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e029      	b.n	8000daa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 020e 	bic.w	r2, r2, #14
 8000d64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0201 	bic.w	r2, r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f003 021c 	and.w	r2, r3, #28
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	4798      	blx	r3
    }
  }
  return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e17f      	b.n	80010c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8171 	beq.w	80010be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x40>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	f003 0201 	and.w	r2, r3, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d118      	bne.n	8000e94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	6939      	ldr	r1, [r7, #16]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80ac 	beq.w	80010be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b5f      	ldr	r3, [pc, #380]	@ (80010e4 <HAL_GPIO_Init+0x330>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80010e4 <HAL_GPIO_Init+0x330>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f72:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <HAL_GPIO_Init+0x330>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80010e8 <HAL_GPIO_Init+0x334>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x242>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4f      	ldr	r2, [pc, #316]	@ (80010ec <HAL_GPIO_Init+0x338>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x23e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4e      	ldr	r2, [pc, #312]	@ (80010f0 <HAL_GPIO_Init+0x33c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x23a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80010f4 <HAL_GPIO_Init+0x340>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x236>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80010f8 <HAL_GPIO_Init+0x344>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x232>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80010fc <HAL_GPIO_Init+0x348>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x22e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001100 <HAL_GPIO_Init+0x34c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x22a>
 8000fda:	2306      	movs	r3, #6
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x244>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001008:	4937      	ldr	r1, [pc, #220]	@ (80010e8 <HAL_GPIO_Init+0x334>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001016:	4b3b      	ldr	r3, [pc, #236]	@ (8001104 <HAL_GPIO_Init+0x350>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103a:	4a32      	ldr	r2, [pc, #200]	@ (8001104 <HAL_GPIO_Init+0x350>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001040:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <HAL_GPIO_Init+0x350>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001064:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <HAL_GPIO_Init+0x350>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <HAL_GPIO_Init+0x350>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108e:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_GPIO_Init+0x350>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_GPIO_Init+0x350>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b8:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <HAL_GPIO_Init+0x350>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa22 f303 	lsr.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f47f ae78 	bne.w	8000dc4 <HAL_GPIO_Init+0x10>
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	48001000 	.word	0x48001000
 80010fc:	48001400 	.word	0x48001400
 8001100:	48001800 	.word	0x48001800
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001124:	e002      	b.n	800112c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f806 	bl	8001168 <HAL_GPIO_EXTI_Callback>
  }
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <HAL_PWREx_GetVoltageRange+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40007000 	.word	0x40007000

0800119c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011aa:	d130      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b8:	d038      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c2:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2232      	movs	r2, #50	@ 0x32
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9b      	lsrs	r3, r3, #18
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	e002      	b.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f4:	d102      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f2      	bne.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001208:	d110      	bne.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e00f      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d007      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001224:	4a05      	ldr	r2, [pc, #20]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e3ca      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b97      	ldr	r3, [pc, #604]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001264:	4b94      	ldr	r3, [pc, #592]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80e4 	beq.w	8001444 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_RCC_OscConfig+0x4a>
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	f040 808b 	bne.w	80013a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 8087 	bne.w	80013a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001292:	4b89      	ldr	r3, [pc, #548]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x62>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3a2      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1a      	ldr	r2, [r3, #32]
 80012ae:	4b82      	ldr	r3, [pc, #520]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <HAL_RCC_OscConfig+0x7c>
 80012ba:	4b7f      	ldr	r3, [pc, #508]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012c2:	e005      	b.n	80012d0 <HAL_RCC_OscConfig+0x88>
 80012c4:	4b7c      	ldr	r3, [pc, #496]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d223      	bcs.n	800131c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fd55 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e383      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e8:	4b73      	ldr	r3, [pc, #460]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a72      	ldr	r2, [pc, #456]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	496d      	ldr	r1, [pc, #436]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001306:	4b6c      	ldr	r3, [pc, #432]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4968      	ldr	r1, [pc, #416]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e025      	b.n	8001368 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	4b66      	ldr	r3, [pc, #408]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a65      	ldr	r2, [pc, #404]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b63      	ldr	r3, [pc, #396]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4960      	ldr	r1, [pc, #384]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133a:	4b5f      	ldr	r3, [pc, #380]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	495b      	ldr	r1, [pc, #364]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fd15 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e343      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001368:	f000 fc4a 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4950      	ldr	r1, [pc, #320]	@ (80014bc <HAL_RCC_OscConfig+0x274>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a4e      	ldr	r2, [pc, #312]	@ (80014c0 <HAL_RCC_OscConfig+0x278>)
 8001386:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001388:	4b4e      	ldr	r3, [pc, #312]	@ (80014c4 <HAL_RCC_OscConfig+0x27c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fb25 	bl	80009dc <HAL_InitTick>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d052      	beq.n	8001442 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	e327      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d032      	beq.n	800140e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a42      	ldr	r2, [pc, #264]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb62 	bl	8000a7c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013bc:	f7ff fb5e 	bl	8000a7c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e310      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ce:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a36      	ldr	r2, [pc, #216]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b34      	ldr	r3, [pc, #208]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4931      	ldr	r1, [pc, #196]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f8:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	492c      	ldr	r1, [pc, #176]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e01a      	b.n	8001444 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb2f 	bl	8000a7c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001422:	f7ff fb2b 	bl	8000a7c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e2dd      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x1da>
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d074      	beq.n	800153a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x21a>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d10b      	bne.n	800147a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d064      	beq.n	8001538 <HAL_RCC_OscConfig+0x2f0>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d160      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e2ba      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x24a>
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e026      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149a:	d115      	bne.n	80014c8 <HAL_RCC_OscConfig+0x280>
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a02      	ldr	r2, [pc, #8]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	08003910 	.word	0x08003910
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
 80014c8:	4ba0      	ldr	r3, [pc, #640]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a9f      	ldr	r2, [pc, #636]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b9d      	ldr	r3, [pc, #628]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a9c      	ldr	r2, [pc, #624]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fac8 	bl	8000a7c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fac4 	bl	8000a7c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e276      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	4b92      	ldr	r3, [pc, #584]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2a8>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fab4 	bl	8000a7c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fab0 	bl	8000a7c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e262      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d0>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d060      	beq.n	8001608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x310>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d119      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d116      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x328>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e23f      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b76      	ldr	r3, [pc, #472]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	4973      	ldr	r1, [pc, #460]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001584:	e040      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d023      	beq.n	80015d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158e:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6e      	ldr	r2, [pc, #440]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fa6f 	bl	8000a7c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa6b 	bl	8000a7c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e21d      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b62      	ldr	r3, [pc, #392]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	495f      	ldr	r1, [pc, #380]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5c      	ldr	r2, [pc, #368]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa4b 	bl	8000a7c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fa47 	bl	8000a7c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1f9      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d03c      	beq.n	800168e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01c      	beq.n	8001656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161c:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fa26 	bl	8000a7c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fa22 	bl	8000a7c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1d4      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ef      	beq.n	8001634 <HAL_RCC_OscConfig+0x3ec>
 8001654:	e01b      	b.n	800168e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165c:	4a3b      	ldr	r2, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fa09 	bl	8000a7c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fa05 	bl	8000a7c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1b7      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ef      	bne.n	800166e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a6 	beq.w	80017e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	4a26      	ldr	r2, [pc, #152]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d118      	bne.n	8001706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f9cc 	bl	8000a7c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff f9c8 	bl	8000a7c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e17a      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d8>
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171e:	e029      	b.n	8001774 <HAL_RCC_OscConfig+0x52c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d115      	bne.n	8001754 <HAL_RCC_OscConfig+0x50c>
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172e:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	4a03      	ldr	r2, [pc, #12]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001748:	e014      	b.n	8001774 <HAL_RCC_OscConfig+0x52c>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	4b9c      	ldr	r3, [pc, #624]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	4a9b      	ldr	r2, [pc, #620]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001764:	4b98      	ldr	r3, [pc, #608]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	4a97      	ldr	r2, [pc, #604]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d016      	beq.n	80017aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff f97e 	bl	8000a7c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff f97a 	bl	8000a7c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e12a      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	4b8b      	ldr	r3, [pc, #556]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ed      	beq.n	8001784 <HAL_RCC_OscConfig+0x53c>
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff f967 	bl	8000a7c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff f963 	bl	8000a7c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e113      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	4b7f      	ldr	r3, [pc, #508]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ed      	bne.n	80017b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b7a      	ldr	r3, [pc, #488]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	4a79      	ldr	r2, [pc, #484]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80fe 	beq.w	80019ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f040 80d0 	bne.w	800199c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017fc:	4b72      	ldr	r3, [pc, #456]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	429a      	cmp	r2, r3
 800180e:	d130      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	3b01      	subs	r3, #1
 800181c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d127      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11f      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800183c:	2a07      	cmp	r2, #7
 800183e:	bf14      	ite	ne
 8001840:	2201      	movne	r2, #1
 8001842:	2200      	moveq	r2, #0
 8001844:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	4293      	cmp	r3, r2
 8001848:	d113      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d06e      	beq.n	8001950 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d069      	beq.n	800194c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001878:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001884:	4b50      	ldr	r3, [pc, #320]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0ad      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001894:	4b4c      	ldr	r3, [pc, #304]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a4b      	ldr	r2, [pc, #300]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800189a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a0:	f7ff f8ec 	bl	8000a7c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f8e8 	bl	8000a7c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e09a      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ba:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <HAL_RCC_OscConfig+0x784>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018d6:	3a01      	subs	r2, #1
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018e0:	0212      	lsls	r2, r2, #8
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018e8:	0852      	lsrs	r2, r2, #1
 80018ea:	3a01      	subs	r2, #1
 80018ec:	0552      	lsls	r2, r2, #21
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018f4:	0852      	lsrs	r2, r2, #1
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0652      	lsls	r2, r2, #25
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001900:	0912      	lsrs	r2, r2, #4
 8001902:	0452      	lsls	r2, r2, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	4930      	ldr	r1, [pc, #192]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001918:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a2a      	ldr	r2, [pc, #168]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001924:	f7ff f8aa 	bl	8000a7c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f8a6 	bl	8000a7c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e058      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194a:	e050      	b.n	80019ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e04f      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d148      	bne.n	80019ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a19      	ldr	r2, [pc, #100]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a16      	ldr	r2, [pc, #88]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001974:	f7ff f882 	bl	8000a7c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f87e 	bl	8000a7c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e030      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x734>
 800199a:	e028      	b.n	80019ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d023      	beq.n	80019ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80019a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f865 	bl	8000a7c <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	e00c      	b.n	80019d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f861 	bl	8000a7c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d905      	bls.n	80019d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x7b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ec      	bne.n	80019b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_RCC_OscConfig+0x7b0>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	4905      	ldr	r1, [pc, #20]	@ (80019f8 <HAL_RCC_OscConfig+0x7b0>)
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_RCC_OscConfig+0x7b4>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
 80019e8:	e001      	b.n	80019ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	feeefffc 	.word	0xfeeefffc

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0e7      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b72      	ldr	r3, [pc, #456]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4970      	ldr	r1, [pc, #448]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b6e      	ldr	r3, [pc, #440]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0cf      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d908      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b63      	ldr	r3, [pc, #396]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4960      	ldr	r1, [pc, #384]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04c      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d121      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0a6      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d115      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e09a      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e08e      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e086      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b46      	ldr	r3, [pc, #280]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4943      	ldr	r1, [pc, #268]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae8:	f7fe ffc8 	bl	8000a7c <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7fe ffc4 	bl	8000a7c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e06e      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d010      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d208      	bcs.n	8001b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	492b      	ldr	r1, [pc, #172]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b46:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d210      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 0207 	bic.w	r2, r3, #7
 8001b5c:	4923      	ldr	r1, [pc, #140]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e036      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	4918      	ldr	r1, [pc, #96]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4910      	ldr	r1, [pc, #64]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb4:	f000 f824 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	490b      	ldr	r1, [pc, #44]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1fc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe feff 	bl	80009dc <HAL_InitTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001be2:	7afb      	ldrb	r3, [r7, #11]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003910 	.word	0x08003910
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x34>
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d121      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11e      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c34:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	e004      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d134      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d003      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0xac>
 8001ca4:	e005      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca8:	617b      	str	r3, [r7, #20]
      break;
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cae:	617b      	str	r3, [r7, #20]
      break;
 8001cb0:	e002      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	617b      	str	r3, [r7, #20]
      break;
 8001cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	fb03 f202 	mul.w	r2, r3, r2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0e5b      	lsrs	r3, r3, #25
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08003928 	.word	0x08003928
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	007a1200 	.word	0x007a1200

08001d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d34:	f7ff fff0 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4904      	ldr	r1, [pc, #16]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08003920 	.word	0x08003920

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d60:	f7ff ffda 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0adb      	lsrs	r3, r3, #11
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4904      	ldr	r1, [pc, #16]	@ (8001d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08003920 	.word	0x08003920

08001d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001da0:	f7ff f9ee 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001da4:	6178      	str	r0, [r7, #20]
 8001da6:	e014      	b.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	4a24      	ldr	r2, [pc, #144]	@ (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db4:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dc0:	f7ff f9de 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd8:	d10b      	bne.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b80      	cmp	r3, #128	@ 0x80
 8001dde:	d919      	bls.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001de4:	d902      	bls.n	8001dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de6:	2302      	movs	r3, #2
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e013      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dec:	2301      	movs	r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e010      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b80      	cmp	r3, #128	@ 0x80
 8001df6:	d902      	bls.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df8:	2303      	movs	r3, #3
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e00a      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b80      	cmp	r3, #128	@ 0x80
 8001e02:	d102      	bne.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e004      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b70      	cmp	r3, #112	@ 0x70
 8001e0e:	d101      	bne.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e10:	2301      	movs	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 0207 	bic.w	r2, r3, #7
 8001e1c:	4909      	ldr	r1, [pc, #36]	@ (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40022000 	.word	0x40022000

08001e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e50:	2300      	movs	r3, #0
 8001e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e54:	2300      	movs	r3, #0
 8001e56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d041      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e6c:	d02a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e72:	d824      	bhi.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e78:	d008      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e7e:	d81e      	bhi.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e88:	d010      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e8a:	e018      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e8c:	4b86      	ldr	r3, [pc, #536]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a85      	ldr	r2, [pc, #532]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e98:	e015      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fabb 	bl	800241c <RCCEx_PLLSAI1_Config>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eaa:	e00c      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3320      	adds	r3, #32
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fba6 	bl	8002604 <RCCEx_PLLSAI2_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ebc:	e003      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ecc:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eda:	4973      	ldr	r1, [pc, #460]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ee2:	e001      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d041      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ef8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001efc:	d02a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001efe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f02:	d824      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f08:	d008      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f0e:	d81e      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f18:	d010      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f1c:	4b62      	ldr	r3, [pc, #392]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a61      	ldr	r2, [pc, #388]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f28:	e015      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fa73 	bl	800241c <RCCEx_PLLSAI1_Config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f3a:	e00c      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fb5e 	bl	8002604 <RCCEx_PLLSAI2_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f4c:	e003      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	74fb      	strb	r3, [r7, #19]
      break;
 8001f52:	e000      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f5c:	4b52      	ldr	r3, [pc, #328]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f6a:	494f      	ldr	r1, [pc, #316]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f72:	e001      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a0 	beq.w	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	4a40      	ldr	r2, [pc, #256]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fac:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fd58 	bl	8000a7c <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fce:	e009      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe fd54 	bl	8000a7c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d902      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fe4:	4b31      	ldr	r3, [pc, #196]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ef      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d15c      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002000:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01f      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d019      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800201e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002020:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	4a20      	ldr	r2, [pc, #128]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	4a1c      	ldr	r2, [pc, #112]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002040:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d016      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fd13 	bl	8000a7c <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002058:	e00b      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fd0f 	bl	8000a7c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d902      	bls.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	74fb      	strb	r3, [r7, #19]
            break;
 8002070:	e006      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ec      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002096:	4904      	ldr	r1, [pc, #16]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800209e:	e009      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
 80020a4:	e006      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b4:	7c7b      	ldrb	r3, [r7, #17]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	4a9d      	ldr	r2, [pc, #628]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d2:	4b98      	ldr	r3, [pc, #608]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f023 0203 	bic.w	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e0:	4994      	ldr	r1, [pc, #592]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f023 020c 	bic.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002102:	498c      	ldr	r1, [pc, #560]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002116:	4b87      	ldr	r3, [pc, #540]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	4983      	ldr	r1, [pc, #524]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002138:	4b7e      	ldr	r3, [pc, #504]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	497b      	ldr	r1, [pc, #492]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800215a:	4b76      	ldr	r3, [pc, #472]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002168:	4972      	ldr	r1, [pc, #456]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217c:	4b6d      	ldr	r3, [pc, #436]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	496a      	ldr	r1, [pc, #424]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800219e:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	4961      	ldr	r1, [pc, #388]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	4959      	ldr	r1, [pc, #356]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e2:	4b54      	ldr	r3, [pc, #336]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f0:	4950      	ldr	r1, [pc, #320]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002204:	4b4b      	ldr	r3, [pc, #300]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	4948      	ldr	r1, [pc, #288]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002226:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	493f      	ldr	r1, [pc, #252]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d028      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002248:	4b3a      	ldr	r3, [pc, #232]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002256:	4937      	ldr	r1, [pc, #220]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002266:	d106      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a31      	ldr	r2, [pc, #196]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
 8002274:	e011      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800227a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800227e:	d10c      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f8c8 	bl	800241c <RCCEx_PLLSAI1_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d028      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022a6:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	491f      	ldr	r1, [pc, #124]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c4:	d106      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d0:	60d3      	str	r3, [r2, #12]
 80022d2:	e011      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f899 	bl	800241c <RCCEx_PLLSAI1_Config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02b      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002322:	d109      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a02      	ldr	r2, [pc, #8]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800232e:	60d3      	str	r3, [r2, #12]
 8002330:	e014      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f867 	bl	800241c <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02f      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002376:	4928      	ldr	r1, [pc, #160]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002386:	d10d      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f844 	bl	800241c <RCCEx_PLLSAI1_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d014      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	74bb      	strb	r3, [r7, #18]
 80023a2:	e011      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3320      	adds	r3, #32
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f925 	bl	8002604 <RCCEx_PLLSAI2_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023d4:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023e2:	490d      	ldr	r1, [pc, #52]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002406:	4904      	ldr	r1, [pc, #16]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800240e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000

0800241c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800242a:	4b75      	ldr	r3, [pc, #468]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d018      	beq.n	8002468 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002436:	4b72      	ldr	r3, [pc, #456]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0203 	and.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d10d      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
       ||
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800244e:	4b6c      	ldr	r3, [pc, #432]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
       ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d047      	beq.n	80024f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	e044      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d018      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0x86>
 8002470:	2b03      	cmp	r3, #3
 8002472:	d825      	bhi.n	80024c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002474:	2b01      	cmp	r3, #1
 8002476:	d002      	beq.n	800247e <RCCEx_PLLSAI1_Config+0x62>
 8002478:	2b02      	cmp	r3, #2
 800247a:	d009      	beq.n	8002490 <RCCEx_PLLSAI1_Config+0x74>
 800247c:	e020      	b.n	80024c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800247e:	4b60      	ldr	r3, [pc, #384]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11d      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248e:	e01a      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002490:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d116      	bne.n	80024ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e013      	b.n	80024ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024a2:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ae:	4b54      	ldr	r3, [pc, #336]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024be:	e006      	b.n	80024ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e004      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c6:	bf00      	nop
 80024c8:	e002      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	430b      	orrs	r3, r1
 80024ec:	4944      	ldr	r1, [pc, #272]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d17d      	bne.n	80025f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a40      	ldr	r2, [pc, #256]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002504:	f7fe faba 	bl	8000a7c <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800250a:	e009      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800250c:	f7fe fab6 	bl	8000a7c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d902      	bls.n	8002520 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	73fb      	strb	r3, [r7, #15]
        break;
 800251e:	e005      	b.n	800252c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002520:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ef      	bne.n	800250c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d160      	bne.n	80025f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002538:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6892      	ldr	r2, [r2, #8]
 8002548:	0211      	lsls	r1, r2, #8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	0912      	lsrs	r2, r2, #4
 8002550:	0452      	lsls	r2, r2, #17
 8002552:	430a      	orrs	r2, r1
 8002554:	492a      	ldr	r1, [pc, #168]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	610b      	str	r3, [r1, #16]
 800255a:	e027      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d112      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002562:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800256a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6892      	ldr	r2, [r2, #8]
 8002572:	0211      	lsls	r1, r2, #8
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6912      	ldr	r2, [r2, #16]
 8002578:	0852      	lsrs	r2, r2, #1
 800257a:	3a01      	subs	r2, #1
 800257c:	0552      	lsls	r2, r2, #21
 800257e:	430a      	orrs	r2, r1
 8002580:	491f      	ldr	r1, [pc, #124]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	610b      	str	r3, [r1, #16]
 8002586:	e011      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002590:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6892      	ldr	r2, [r2, #8]
 8002598:	0211      	lsls	r1, r2, #8
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6952      	ldr	r2, [r2, #20]
 800259e:	0852      	lsrs	r2, r2, #1
 80025a0:	3a01      	subs	r2, #1
 80025a2:	0652      	lsls	r2, r2, #25
 80025a4:	430a      	orrs	r2, r1
 80025a6:	4916      	ldr	r1, [pc, #88]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a13      	ldr	r2, [pc, #76]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fa60 	bl	8000a7c <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025be:	e009      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c0:	f7fe fa5c 	bl	8000a7c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	73fb      	strb	r3, [r7, #15]
          break;
 80025d2:	e005      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ef      	beq.n	80025c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4904      	ldr	r1, [pc, #16]	@ (8002600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002612:	4b6a      	ldr	r3, [pc, #424]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d018      	beq.n	8002650 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800261e:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d10d      	bne.n	800264a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
       ||
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002636:	4b61      	ldr	r3, [pc, #388]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
       ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d047      	beq.n	80026da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e044      	b.n	80026da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d018      	beq.n	800268a <RCCEx_PLLSAI2_Config+0x86>
 8002658:	2b03      	cmp	r3, #3
 800265a:	d825      	bhi.n	80026a8 <RCCEx_PLLSAI2_Config+0xa4>
 800265c:	2b01      	cmp	r3, #1
 800265e:	d002      	beq.n	8002666 <RCCEx_PLLSAI2_Config+0x62>
 8002660:	2b02      	cmp	r3, #2
 8002662:	d009      	beq.n	8002678 <RCCEx_PLLSAI2_Config+0x74>
 8002664:	e020      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002666:	4b55      	ldr	r3, [pc, #340]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11d      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002676:	e01a      	b.n	80026ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002678:	4b50      	ldr	r3, [pc, #320]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d116      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e013      	b.n	80026b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800268a:	4b4c      	ldr	r3, [pc, #304]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002696:	4b49      	ldr	r3, [pc, #292]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026a6:	e006      	b.n	80026b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e004      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ae:	bf00      	nop
 80026b0:	e002      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026b2:	bf00      	nop
 80026b4:	e000      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026be:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	430b      	orrs	r3, r1
 80026d4:	4939      	ldr	r1, [pc, #228]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d167      	bne.n	80027b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026e0:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a35      	ldr	r2, [pc, #212]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fe f9c6 	bl	8000a7c <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026f2:	e009      	b.n	8002708 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026f4:	f7fe f9c2 	bl	8000a7c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
        break;
 8002706:	e005      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002708:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ef      	bne.n	80026f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d14a      	bne.n	80027b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d111      	bne.n	8002744 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002720:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6892      	ldr	r2, [r2, #8]
 8002730:	0211      	lsls	r1, r2, #8
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	0912      	lsrs	r2, r2, #4
 8002738:	0452      	lsls	r2, r2, #17
 800273a:	430a      	orrs	r2, r1
 800273c:	491f      	ldr	r1, [pc, #124]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	614b      	str	r3, [r1, #20]
 8002742:	e011      	b.n	8002768 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800274c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6892      	ldr	r2, [r2, #8]
 8002754:	0211      	lsls	r1, r2, #8
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6912      	ldr	r2, [r2, #16]
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0652      	lsls	r2, r2, #25
 8002760:	430a      	orrs	r2, r1
 8002762:	4916      	ldr	r1, [pc, #88]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe f982 	bl	8000a7c <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800277a:	e009      	b.n	8002790 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800277c:	f7fe f97e 	bl	8000a7c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	73fb      	strb	r3, [r7, #15]
          break;
 800278e:	e005      	b.n	800279c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4904      	ldr	r1, [pc, #16]	@ (80027bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e040      	b.n	8002854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fd fffa 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fdea 	bl	80033e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fb2f 	bl	8002e70 <UART_SetConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e01b      	b.n	8002854 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800282a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800283a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fe69 	bl	8003524 <UART_CheckIdleState>
 8002852:	4603      	mov	r3, r0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ba      	sub	sp, #232	@ 0xe8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800288a:	4013      	ands	r3, r2
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d115      	bne.n	80028c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00f      	beq.n	80028c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 82ae 	beq.w	8002e16 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
      }
      return;
 80028c2:	e2a8      	b.n	8002e16 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80028c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8117 	beq.w	8002afc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80028de:	4b85      	ldr	r3, [pc, #532]	@ (8002af4 <HAL_UART_IRQHandler+0x298>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 810a 	beq.w	8002afc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d011      	beq.n	8002918 <HAL_UART_IRQHandler+0xbc>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d011      	beq.n	8002948 <HAL_UART_IRQHandler+0xec>
 8002924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2202      	movs	r2, #2
 8002936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d011      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
 8002954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002994:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	f043 0208 	orr.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18a>
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8214 	beq.w	8002e1a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2e:	2b40      	cmp	r3, #64	@ 0x40
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04f      	beq.n	8002ade <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fe7f 	bl	8003742 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d141      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3308      	adds	r3, #8
 8002a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1d9      	bne.n	8002a52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d013      	beq.n	8002ace <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aaa:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <HAL_UART_IRQHandler+0x29c>)
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f93d 	bl	8000d32 <HAL_DMA_Abort_IT>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d017      	beq.n	8002aee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	e00f      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9b8 	bl	8002e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	e00b      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9b4 	bl	8002e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	e007      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9b0 	bl	8002e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002aec:	e195      	b.n	8002e1a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aee:	bf00      	nop
    return;
 8002af0:	e193      	b.n	8002e1a <HAL_UART_IRQHandler+0x5be>
 8002af2:	bf00      	nop
 8002af4:	04000120 	.word	0x04000120
 8002af8:	0800380b 	.word	0x0800380b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 814e 	bne.w	8002da2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8147 	beq.w	8002da2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8140 	beq.w	8002da2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	f040 80b8 	bne.w	8002caa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8167 	beq.w	8002e1e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	f080 815f 	bcs.w	8002e1e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8086 	bne.w	8002c88 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002baa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1da      	bne.n	8002b7c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3308      	adds	r3, #8
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e1      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3308      	adds	r3, #8
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3308      	adds	r3, #8
 8002c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c58:	f023 0310 	bic.w	r3, r3, #16
 8002c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e4      	bne.n	8002c48 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f817 	bl	8000cb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8d8 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ca8:	e0b9      	b.n	8002e1e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80ab 	beq.w	8002e22 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a6 	beq.w	8002e22 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e4      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3308      	adds	r3, #8
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d30:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e3      	bne.n	8002d0c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f023 0310 	bic.w	r3, r3, #16
 8002d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	617b      	str	r3, [r7, #20]
   return(result);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e4      	bne.n	8002d58 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f85c 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da0:	e03f      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00e      	beq.n	8002dcc <HAL_UART_IRQHandler+0x570>
 8002dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fd60 	bl	800388a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dca:	e02d      	b.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
    }
    return;
 8002df4:	e017      	b.n	8002e26 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
 8002e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fd11 	bl	8003836 <UART_EndTransmit_IT>
    return;
 8002e14:	e008      	b.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002e16:	bf00      	nop
 8002e18:	e006      	b.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002e26:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002e28:	37e8      	adds	r7, #232	@ 0xe8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop

08002e30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b08a      	sub	sp, #40	@ 0x28
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4ba4      	ldr	r3, [pc, #656]	@ (8003130 <UART_SetConfig+0x2c0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a99      	ldr	r2, [pc, #612]	@ (8003134 <UART_SetConfig+0x2c4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a90      	ldr	r2, [pc, #576]	@ (8003138 <UART_SetConfig+0x2c8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d126      	bne.n	8002f48 <UART_SetConfig+0xd8>
 8002efa:	4b90      	ldr	r3, [pc, #576]	@ (800313c <UART_SetConfig+0x2cc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d81b      	bhi.n	8002f40 <UART_SetConfig+0xd0>
 8002f08:	a201      	add	r2, pc, #4	@ (adr r2, 8002f10 <UART_SetConfig+0xa0>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f31 	.word	0x08002f31
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f39 	.word	0x08002f39
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f26:	e116      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2e:	e112      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002f30:	2304      	movs	r3, #4
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f36:	e10e      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002f38:	2308      	movs	r3, #8
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3e:	e10a      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002f40:	2310      	movs	r3, #16
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f46:	e106      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a7c      	ldr	r2, [pc, #496]	@ (8003140 <UART_SetConfig+0x2d0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d138      	bne.n	8002fc4 <UART_SetConfig+0x154>
 8002f52:	4b7a      	ldr	r3, [pc, #488]	@ (800313c <UART_SetConfig+0x2cc>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d82d      	bhi.n	8002fbc <UART_SetConfig+0x14c>
 8002f60:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <UART_SetConfig+0xf8>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f9d 	.word	0x08002f9d
 8002f6c:	08002fbd 	.word	0x08002fbd
 8002f70:	08002fbd 	.word	0x08002fbd
 8002f74:	08002fbd 	.word	0x08002fbd
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	08002fbd 	.word	0x08002fbd
 8002f80:	08002fbd 	.word	0x08002fbd
 8002f84:	08002fbd 	.word	0x08002fbd
 8002f88:	08002fa5 	.word	0x08002fa5
 8002f8c:	08002fbd 	.word	0x08002fbd
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	08002fbd 	.word	0x08002fbd
 8002f98:	08002fb5 	.word	0x08002fb5
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa2:	e0d8      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002faa:	e0d4      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002fac:	2304      	movs	r3, #4
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb2:	e0d0      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fba:	e0cc      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc2:	e0c8      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003144 <UART_SetConfig+0x2d4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d125      	bne.n	800301a <UART_SetConfig+0x1aa>
 8002fce:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <UART_SetConfig+0x2cc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fd8:	2b30      	cmp	r3, #48	@ 0x30
 8002fda:	d016      	beq.n	800300a <UART_SetConfig+0x19a>
 8002fdc:	2b30      	cmp	r3, #48	@ 0x30
 8002fde:	d818      	bhi.n	8003012 <UART_SetConfig+0x1a2>
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d00a      	beq.n	8002ffa <UART_SetConfig+0x18a>
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d814      	bhi.n	8003012 <UART_SetConfig+0x1a2>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <UART_SetConfig+0x182>
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d008      	beq.n	8003002 <UART_SetConfig+0x192>
 8002ff0:	e00f      	b.n	8003012 <UART_SetConfig+0x1a2>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff8:	e0ad      	b.n	8003156 <UART_SetConfig+0x2e6>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003000:	e0a9      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003002:	2304      	movs	r3, #4
 8003004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003008:	e0a5      	b.n	8003156 <UART_SetConfig+0x2e6>
 800300a:	2308      	movs	r3, #8
 800300c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003010:	e0a1      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003012:	2310      	movs	r3, #16
 8003014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003018:	e09d      	b.n	8003156 <UART_SetConfig+0x2e6>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4a      	ldr	r2, [pc, #296]	@ (8003148 <UART_SetConfig+0x2d8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d125      	bne.n	8003070 <UART_SetConfig+0x200>
 8003024:	4b45      	ldr	r3, [pc, #276]	@ (800313c <UART_SetConfig+0x2cc>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800302e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003030:	d016      	beq.n	8003060 <UART_SetConfig+0x1f0>
 8003032:	2bc0      	cmp	r3, #192	@ 0xc0
 8003034:	d818      	bhi.n	8003068 <UART_SetConfig+0x1f8>
 8003036:	2b80      	cmp	r3, #128	@ 0x80
 8003038:	d00a      	beq.n	8003050 <UART_SetConfig+0x1e0>
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d814      	bhi.n	8003068 <UART_SetConfig+0x1f8>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <UART_SetConfig+0x1d8>
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	d008      	beq.n	8003058 <UART_SetConfig+0x1e8>
 8003046:	e00f      	b.n	8003068 <UART_SetConfig+0x1f8>
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e082      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003050:	2302      	movs	r3, #2
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003056:	e07e      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003058:	2304      	movs	r3, #4
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305e:	e07a      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003060:	2308      	movs	r3, #8
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003066:	e076      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003068:	2310      	movs	r3, #16
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306e:	e072      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a35      	ldr	r2, [pc, #212]	@ (800314c <UART_SetConfig+0x2dc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d12a      	bne.n	80030d0 <UART_SetConfig+0x260>
 800307a:	4b30      	ldr	r3, [pc, #192]	@ (800313c <UART_SetConfig+0x2cc>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003084:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003088:	d01a      	beq.n	80030c0 <UART_SetConfig+0x250>
 800308a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800308e:	d81b      	bhi.n	80030c8 <UART_SetConfig+0x258>
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d00c      	beq.n	80030b0 <UART_SetConfig+0x240>
 8003096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800309a:	d815      	bhi.n	80030c8 <UART_SetConfig+0x258>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <UART_SetConfig+0x238>
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a4:	d008      	beq.n	80030b8 <UART_SetConfig+0x248>
 80030a6:	e00f      	b.n	80030c8 <UART_SetConfig+0x258>
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e052      	b.n	8003156 <UART_SetConfig+0x2e6>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e04e      	b.n	8003156 <UART_SetConfig+0x2e6>
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e04a      	b.n	8003156 <UART_SetConfig+0x2e6>
 80030c0:	2308      	movs	r3, #8
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e046      	b.n	8003156 <UART_SetConfig+0x2e6>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ce:	e042      	b.n	8003156 <UART_SetConfig+0x2e6>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <UART_SetConfig+0x2c4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d13a      	bne.n	8003150 <UART_SetConfig+0x2e0>
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <UART_SetConfig+0x2cc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e8:	d01a      	beq.n	8003120 <UART_SetConfig+0x2b0>
 80030ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030ee:	d81b      	bhi.n	8003128 <UART_SetConfig+0x2b8>
 80030f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f4:	d00c      	beq.n	8003110 <UART_SetConfig+0x2a0>
 80030f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030fa:	d815      	bhi.n	8003128 <UART_SetConfig+0x2b8>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <UART_SetConfig+0x298>
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003104:	d008      	beq.n	8003118 <UART_SetConfig+0x2a8>
 8003106:	e00f      	b.n	8003128 <UART_SetConfig+0x2b8>
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e022      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003110:	2302      	movs	r3, #2
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003116:	e01e      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003118:	2304      	movs	r3, #4
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e01a      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003120:	2308      	movs	r3, #8
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e016      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003128:	2310      	movs	r3, #16
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312e:	e012      	b.n	8003156 <UART_SetConfig+0x2e6>
 8003130:	efff69f3 	.word	0xefff69f3
 8003134:	40008000 	.word	0x40008000
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	40004400 	.word	0x40004400
 8003144:	40004800 	.word	0x40004800
 8003148:	40004c00 	.word	0x40004c00
 800314c:	40005000 	.word	0x40005000
 8003150:	2310      	movs	r3, #16
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a9f      	ldr	r2, [pc, #636]	@ (80033d8 <UART_SetConfig+0x568>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d17a      	bne.n	8003256 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003160:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003164:	2b08      	cmp	r3, #8
 8003166:	d824      	bhi.n	80031b2 <UART_SetConfig+0x342>
 8003168:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <UART_SetConfig+0x300>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003195 	.word	0x08003195
 8003174:	080031b3 	.word	0x080031b3
 8003178:	0800319d 	.word	0x0800319d
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031a3 	.word	0x080031a3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031b3 	.word	0x080031b3
 800318c:	080031b3 	.word	0x080031b3
 8003190:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003194:	f7fe fdcc 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8003198:	61f8      	str	r0, [r7, #28]
        break;
 800319a:	e010      	b.n	80031be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b8f      	ldr	r3, [pc, #572]	@ (80033dc <UART_SetConfig+0x56c>)
 800319e:	61fb      	str	r3, [r7, #28]
        break;
 80031a0:	e00d      	b.n	80031be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7fe fd2d 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 80031a6:	61f8      	str	r0, [r7, #28]
        break;
 80031a8:	e009      	b.n	80031be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ae:	61fb      	str	r3, [r7, #28]
        break;
 80031b0:	e005      	b.n	80031be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80fb 	beq.w	80033bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d305      	bcc.n	80031e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d903      	bls.n	80031ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031e8:	e0e8      	b.n	80033bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2200      	movs	r2, #0
 80031ee:	461c      	mov	r4, r3
 80031f0:	4615      	mov	r5, r2
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	022b      	lsls	r3, r5, #8
 80031fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003200:	0222      	lsls	r2, r4, #8
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6849      	ldr	r1, [r1, #4]
 8003206:	0849      	lsrs	r1, r1, #1
 8003208:	2000      	movs	r0, #0
 800320a:	4688      	mov	r8, r1
 800320c:	4681      	mov	r9, r0
 800320e:	eb12 0a08 	adds.w	sl, r2, r8
 8003212:	eb43 0b09 	adc.w	fp, r3, r9
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003224:	4650      	mov	r0, sl
 8003226:	4659      	mov	r1, fp
 8003228:	f7fc ffce 	bl	80001c8 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800323a:	d308      	bcc.n	800324e <UART_SetConfig+0x3de>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003242:	d204      	bcs.n	800324e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	e0b6      	b.n	80033bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003254:	e0b2      	b.n	80033bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800325e:	d15e      	bne.n	800331e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003260:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003264:	2b08      	cmp	r3, #8
 8003266:	d828      	bhi.n	80032ba <UART_SetConfig+0x44a>
 8003268:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <UART_SetConfig+0x400>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003295 	.word	0x08003295
 8003274:	0800329d 	.word	0x0800329d
 8003278:	080032a5 	.word	0x080032a5
 800327c:	080032bb 	.word	0x080032bb
 8003280:	080032ab 	.word	0x080032ab
 8003284:	080032bb 	.word	0x080032bb
 8003288:	080032bb 	.word	0x080032bb
 800328c:	080032bb 	.word	0x080032bb
 8003290:	080032b3 	.word	0x080032b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003294:	f7fe fd4c 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8003298:	61f8      	str	r0, [r7, #28]
        break;
 800329a:	e014      	b.n	80032c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800329c:	f7fe fd5e 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 80032a0:	61f8      	str	r0, [r7, #28]
        break;
 80032a2:	e010      	b.n	80032c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a4:	4b4d      	ldr	r3, [pc, #308]	@ (80033dc <UART_SetConfig+0x56c>)
 80032a6:	61fb      	str	r3, [r7, #28]
        break;
 80032a8:	e00d      	b.n	80032c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032aa:	f7fe fca9 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 80032ae:	61f8      	str	r0, [r7, #28]
        break;
 80032b0:	e009      	b.n	80032c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b6:	61fb      	str	r3, [r7, #28]
        break;
 80032b8:	e005      	b.n	80032c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d077      	beq.n	80033bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005a      	lsls	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d916      	bls.n	8003316 <UART_SetConfig+0x4a6>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ee:	d212      	bcs.n	8003316 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	b29a      	uxth	r2, r3
 8003306:	8afb      	ldrh	r3, [r7, #22]
 8003308:	4313      	orrs	r3, r2
 800330a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	8afa      	ldrh	r2, [r7, #22]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e052      	b.n	80033bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800331c:	e04e      	b.n	80033bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800331e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003322:	2b08      	cmp	r3, #8
 8003324:	d827      	bhi.n	8003376 <UART_SetConfig+0x506>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <UART_SetConfig+0x4bc>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
 8003338:	08003377 	.word	0x08003377
 800333c:	08003367 	.word	0x08003367
 8003340:	08003377 	.word	0x08003377
 8003344:	08003377 	.word	0x08003377
 8003348:	08003377 	.word	0x08003377
 800334c:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7fe fcee 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8003354:	61f8      	str	r0, [r7, #28]
        break;
 8003356:	e014      	b.n	8003382 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7fe fd00 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 800335c:	61f8      	str	r0, [r7, #28]
        break;
 800335e:	e010      	b.n	8003382 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <UART_SetConfig+0x56c>)
 8003362:	61fb      	str	r3, [r7, #28]
        break;
 8003364:	e00d      	b.n	8003382 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe fc4b 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 800336a:	61f8      	str	r0, [r7, #28]
        break;
 800336c:	e009      	b.n	8003382 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003372:	61fb      	str	r3, [r7, #28]
        break;
 8003374:	e005      	b.n	8003382 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003380:	bf00      	nop
    }

    if (pclk != 0U)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d019      	beq.n	80033bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	085a      	lsrs	r2, r3, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	d909      	bls.n	80033b6 <UART_SetConfig+0x546>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d205      	bcs.n	80033b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	e002      	b.n	80033bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3728      	adds	r7, #40	@ 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d6:	bf00      	nop
 80033d8:	40008000 	.word	0x40008000
 80033dc:	00f42400 	.word	0x00f42400

080033e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01a      	beq.n	80034f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034de:	d10a      	bne.n	80034f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b098      	sub	sp, #96	@ 0x60
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003534:	f7fd faa2 	bl	8000a7c <HAL_GetTick>
 8003538:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d12e      	bne.n	80035a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003548:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f88c 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d021      	beq.n	80035a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003576:	653b      	str	r3, [r7, #80]	@ 0x50
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
 8003582:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800358e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e6      	bne.n	8003562 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e062      	b.n	800366c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d149      	bne.n	8003648 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f856 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03c      	beq.n	8003648 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	623b      	str	r3, [r7, #32]
   return(result);
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e6      	bne.n	80035ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003620:	61fa      	str	r2, [r7, #28]
 8003622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	617b      	str	r3, [r7, #20]
   return(result);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e011      	b.n	800366c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3758      	adds	r7, #88	@ 0x58
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003684:	e049      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d045      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fd f9f5 	bl	8000a7c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e048      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d031      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d110      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2208      	movs	r2, #8
 80036ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f838 	bl	8003742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2208      	movs	r2, #8
 80036d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e029      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f4:	d111      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f81e 	bl	8003742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00f      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	429a      	cmp	r2, r3
 8003736:	d0a6      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003742:	b480      	push	{r7}
 8003744:	b095      	sub	sp, #84	@ 0x54
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800375e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003768:	643b      	str	r3, [r7, #64]	@ 0x40
 800376a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800376e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e6      	bne.n	800374a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	61fb      	str	r3, [r7, #28]
   return(result);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800379c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800379e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d118      	bne.n	80037ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 0310 	bic.w	r3, r3, #16
 80037cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6979      	ldr	r1, [r7, #20]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	613b      	str	r3, [r7, #16]
   return(result);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e6      	bne.n	80037b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037fe:	bf00      	nop
 8003800:	3754      	adds	r7, #84	@ 0x54
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fb0b 	bl	8002e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b088      	sub	sp, #32
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	60bb      	str	r3, [r7, #8]
   return(result);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6979      	ldr	r1, [r7, #20]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fad7 	bl	8002e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <memset>:
 800389e:	4402      	add	r2, r0
 80038a0:	4603      	mov	r3, r0
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d100      	bne.n	80038a8 <memset+0xa>
 80038a6:	4770      	bx	lr
 80038a8:	f803 1b01 	strb.w	r1, [r3], #1
 80038ac:	e7f9      	b.n	80038a2 <memset+0x4>
	...

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4d0d      	ldr	r5, [pc, #52]	@ (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	@ (80038ec <__libc_init_array+0x3c>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2600      	movs	r6, #0
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4d0b      	ldr	r5, [pc, #44]	@ (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	@ (80038f4 <__libc_init_array+0x44>)
 80038c4:	f000 f818 	bl	80038f8 <_init>
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2600      	movs	r6, #0
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	08003960 	.word	0x08003960
 80038ec:	08003960 	.word	0x08003960
 80038f0:	08003960 	.word	0x08003960
 80038f4:	08003964 	.word	0x08003964

080038f8 <_init>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr

08003904 <_fini>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr
