
4100901-tesla-turn-hazard-signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e00  08003e00  00005088  2**0
                  CONTENTS
  4 .ARM          00000008  08003e00  08003e00  00004e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e08  08003e08  00005088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003e10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000088  08003e98  00005088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003e98  00005144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c278  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d65  00000000  00000000  00011330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00013098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077f  00000000  00000000  00013a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259f9  00000000  00000000  000141df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c35a  00000000  00000000  00039bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e777b  00000000  00000000  00045f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d6ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  0012d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003da0 	.word	0x08003da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08003da0 	.word	0x08003da0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fc0c 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f94f 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f9cf 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f99d 	bl	8000808 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // adding logic to implement heartbeat
	     static uint32_t last_heartbeat_time = 0;
	     if (HAL_GetTick() - last_heartbeat_time >= 500)  //toggling for 1Hz (500ms on / 500ms off)
 80004ce:	f000 fc6d 	bl	8000dac <HAL_GetTick>
 80004d2:	4602      	mov	r2, r0
 80004d4:	4b95      	ldr	r3, [pc, #596]	@ (800072c <main+0x274>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004de:	d30f      	bcc.n	8000500 <main+0x48>
	     {
	       HAL_GPIO_TogglePin(GPIOA, LD3_Pin);
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f000 ffe3 	bl	80014b0 <HAL_GPIO_TogglePin>
	       last_heartbeat_time = HAL_GetTick();
 80004ea:	f000 fc5f 	bl	8000dac <HAL_GetTick>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a8e      	ldr	r2, [pc, #568]	@ (800072c <main+0x274>)
 80004f2:	6013      	str	r3, [r2, #0]
	       HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
 80004f4:	2364      	movs	r3, #100	@ 0x64
 80004f6:	2210      	movs	r2, #16
 80004f8:	498d      	ldr	r1, [pc, #564]	@ (8000730 <main+0x278>)
 80004fa:	488e      	ldr	r0, [pc, #568]	@ (8000734 <main+0x27c>)
 80004fc:	f002 fb78 	bl	8002bf0 <HAL_UART_Transmit>
	     }


	     // Logic to implement toggle led's
	     // first TURNING LEFT LED
		 if (flag_left)
 8000500:	4b8d      	ldr	r3, [pc, #564]	@ (8000738 <main+0x280>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d059      	beq.n	80005be <main+0x106>
		 {
		   flag_left = !flag_left;
 800050a:	4b8b      	ldr	r3, [pc, #556]	@ (8000738 <main+0x280>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2db      	uxtb	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	4b86      	ldr	r3, [pc, #536]	@ (8000738 <main+0x280>)
 800051e:	701a      	strb	r2, [r3, #0]
		   if (timmingb1 == 1) // checking extern interruption for button
 8000520:	4b86      	ldr	r3, [pc, #536]	@ (800073c <main+0x284>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b01      	cmp	r3, #1
 8000528:	d121      	bne.n	800056e <main+0xb6>
		   { // if b1 is pressed
			 HAL_UART_Transmit(&huart2, TL, sizeof(TL) - 1, 100);
 800052a:	2364      	movs	r3, #100	@ 0x64
 800052c:	220b      	movs	r2, #11
 800052e:	4984      	ldr	r1, [pc, #528]	@ (8000740 <main+0x288>)
 8000530:	4880      	ldr	r0, [pc, #512]	@ (8000734 <main+0x27c>)
 8000532:	f002 fb5d 	bl	8002bf0 <HAL_UART_Transmit>
			 for (int i = 0; i < 3; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e014      	b.n	8000566 <main+0xae>
			 {
				// toggle three times for each case
			   HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000544:	f000 ff9c 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125); // 4Hz = 125ms ON
 8000548:	207d      	movs	r0, #125	@ 0x7d
 800054a:	f000 fc3b 	bl	8000dc4 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2120      	movs	r1, #32
 8000552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000556:	f000 ff93 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125);
 800055a:	207d      	movs	r0, #125	@ 0x7d
 800055c:	f000 fc32 	bl	8000dc4 <HAL_Delay>
			 for (int i = 0; i < 3; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	dde7      	ble.n	800053c <main+0x84>
 800056c:	e027      	b.n	80005be <main+0x106>
			 }
		   }
		   else if (timmingb1 >= 2)// when we pressed the same button on less than 500 ms
 800056e:	4b73      	ldr	r3, [pc, #460]	@ (800073c <main+0x284>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b01      	cmp	r3, #1
 8000576:	d922      	bls.n	80005be <main+0x106>
		   { // when is pressed more than two times on less than 500 ms
			 HAL_UART_Transmit(&huart2, TLL, sizeof(TLL) - 1, 100); //  UART COMMUNICATION
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	2218      	movs	r2, #24
 800057c:	4971      	ldr	r1, [pc, #452]	@ (8000744 <main+0x28c>)
 800057e:	486d      	ldr	r0, [pc, #436]	@ (8000734 <main+0x27c>)
 8000580:	f002 fb36 	bl	8002bf0 <HAL_UART_Transmit>
			 while (1)
			 { //
			   HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_SET); // toggling indefinitely
 8000584:	2201      	movs	r2, #1
 8000586:	2120      	movs	r1, #32
 8000588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058c:	f000 ff78 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125);
 8000590:	207d      	movs	r0, #125	@ 0x7d
 8000592:	f000 fc17 	bl	8000dc4 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f000 ff6f 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125);
 80005a2:	207d      	movs	r0, #125	@ 0x7d
 80005a4:	f000 fc0e 	bl	8000dc4 <HAL_Delay>
			   if (flag_left || flag_right)
 80005a8:	4b63      	ldr	r3, [pc, #396]	@ (8000738 <main+0x280>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d105      	bne.n	80005be <main+0x106>
 80005b2:	4b65      	ldr	r3, [pc, #404]	@ (8000748 <main+0x290>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d100      	bne.n	80005be <main+0x106>
			   HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_SET); // toggling indefinitely
 80005bc:	e7e2      	b.n	8000584 <main+0xcc>
			 }
		   }
		 }

	 //  turn right implementation
		 if (flag_right)
 80005be:	4b62      	ldr	r3, [pc, #392]	@ (8000748 <main+0x290>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d059      	beq.n	800067c <main+0x1c4>
		 {
		   flag_right = !flag_right;
 80005c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000748 <main+0x290>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	4b5b      	ldr	r3, [pc, #364]	@ (8000748 <main+0x290>)
 80005dc:	701a      	strb	r2, [r3, #0]
		   if (timmingb2 == 1)
 80005de:	4b5b      	ldr	r3, [pc, #364]	@ (800074c <main+0x294>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d121      	bne.n	800062c <main+0x174>
		   {
			 HAL_UART_Transmit(&huart2, TR, sizeof(TR) - 1, 100);
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	220c      	movs	r2, #12
 80005ec:	4958      	ldr	r1, [pc, #352]	@ (8000750 <main+0x298>)
 80005ee:	4851      	ldr	r0, [pc, #324]	@ (8000734 <main+0x27c>)
 80005f0:	f002 fafe 	bl	8002bf0 <HAL_UART_Transmit>
			 for (int i = 0; i < 3; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	e014      	b.n	8000624 <main+0x16c>
			 {
			   HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2140      	movs	r1, #64	@ 0x40
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000602:	f000 ff3d 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125); // 4Hz = 125ms
 8000606:	207d      	movs	r0, #125	@ 0x7d
 8000608:	f000 fbdc 	bl	8000dc4 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f000 ff34 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125);
 8000618:	207d      	movs	r0, #125	@ 0x7d
 800061a:	f000 fbd3 	bl	8000dc4 <HAL_Delay>
			 for (int i = 0; i < 3; i++)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	dde7      	ble.n	80005fa <main+0x142>
 800062a:	e027      	b.n	800067c <main+0x1c4>
			 }
		   }
		   else if (timmingb2 >= 2)
 800062c:	4b47      	ldr	r3, [pc, #284]	@ (800074c <main+0x294>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b01      	cmp	r3, #1
 8000634:	d922      	bls.n	800067c <main+0x1c4>
		   {
			 HAL_UART_Transmit(&huart2, TRR, sizeof(TRR) - 1, 100);
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	2219      	movs	r2, #25
 800063a:	4946      	ldr	r1, [pc, #280]	@ (8000754 <main+0x29c>)
 800063c:	483d      	ldr	r0, [pc, #244]	@ (8000734 <main+0x27c>)
 800063e:	f002 fad7 	bl	8002bf0 <HAL_UART_Transmit>
			 while (1)
			 {
			   HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f000 ff19 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125);
 800064e:	207d      	movs	r0, #125	@ 0x7d
 8000650:	f000 fbb8 	bl	8000dc4 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f000 ff10 	bl	8001480 <HAL_GPIO_WritePin>
			   HAL_Delay(125);
 8000660:	207d      	movs	r0, #125	@ 0x7d
 8000662:	f000 fbaf 	bl	8000dc4 <HAL_Delay>
			   if (flag_left || flag_right)
 8000666:	4b34      	ldr	r3, [pc, #208]	@ (8000738 <main+0x280>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d105      	bne.n	800067c <main+0x1c4>
 8000670:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <main+0x290>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d100      	bne.n	800067c <main+0x1c4>
			   HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 800067a:	e7e2      	b.n	8000642 <main+0x18a>
			 }
		   }
		 }

	 // logic for the stationary mode
		 if (timmingb1 >= 2 && timmingb2 >= 2 &&
 800067c:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <main+0x284>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b01      	cmp	r3, #1
 8000684:	f67f af23 	bls.w	80004ce <main+0x16>
 8000688:	4b30      	ldr	r3, [pc, #192]	@ (800074c <main+0x294>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b01      	cmp	r3, #1
 8000690:	f67f af1d 	bls.w	80004ce <main+0x16>
			 (HAL_GetTick() - last_button_press_left < doublePressTimeFEA) &&
 8000694:	f000 fb8a 	bl	8000dac <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <main+0x2a0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
		 if (timmingb1 >= 2 && timmingb2 >= 2 &&
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f4bf af12 	bcs.w	80004ce <main+0x16>
			 (HAL_GetTick() - last_button_press_right < doublePressTimeFEA)) // check if our variables are correct for the stationary mode
 80006aa:	f000 fb7f 	bl	8000dac <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <main+0x2a4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
			 (HAL_GetTick() - last_button_press_left < doublePressTimeFEA) &&
 80006ba:	4293      	cmp	r3, r2
 80006bc:	f4bf af07 	bcs.w	80004ce <main+0x16>
		 {

		   HAL_UART_Transmit(&huart2, stac, sizeof(stac) - 1, 100);
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	2212      	movs	r2, #18
 80006c4:	4926      	ldr	r1, [pc, #152]	@ (8000760 <main+0x2a8>)
 80006c6:	481b      	ldr	r0, [pc, #108]	@ (8000734 <main+0x27c>)
 80006c8:	f002 fa92 	bl	8002bf0 <HAL_UART_Transmit>

		   while (1)
		   {
			   // defining the loop for stationary mode
			 HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2120      	movs	r1, #32
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 fed4 	bl	8001480 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2140      	movs	r1, #64	@ 0x40
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e0:	f000 fece 	bl	8001480 <HAL_GPIO_WritePin>
			 HAL_Delay(125);
 80006e4:	207d      	movs	r0, #125	@ 0x7d
 80006e6:	f000 fb6d 	bl	8000dc4 <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f2:	f000 fec5 	bl	8001480 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	@ 0x40
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fe:	f000 febf 	bl	8001480 <HAL_GPIO_WritePin>
			 HAL_Delay(125);
 8000702:	207d      	movs	r0, #125	@ 0x7d
 8000704:	f000 fb5e 	bl	8000dc4 <HAL_Delay>
			 if (flag_left || flag_right)
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <main+0x280>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <main+0x266>
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <main+0x290>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d100      	bne.n	800071e <main+0x266>
			 HAL_GPIO_WritePin(GPIOA, LD1_Pin, GPIO_PIN_SET);
 800071c:	e7d6      	b.n	80006cc <main+0x214>
			   break;
			 }
		   }

		   // Reset to contrarrest debounce
		   timmingb1 = 0;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <main+0x284>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
		   timmingb2 = 0;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <main+0x294>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
  {
 800072a:	e6d0      	b.n	80004ce <main+0x16>
 800072c:	2000013c 	.word	0x2000013c
 8000730:	20000000 	.word	0x20000000
 8000734:	200000a4 	.word	0x200000a4
 8000738:	2000012c 	.word	0x2000012c
 800073c:	2000012f 	.word	0x2000012f
 8000740:	20000014 	.word	0x20000014
 8000744:	20000030 	.word	0x20000030
 8000748:	2000012d 	.word	0x2000012d
 800074c:	20000130 	.word	0x20000130
 8000750:	20000020 	.word	0x20000020
 8000754:	2000004c 	.word	0x2000004c
 8000758:	20000134 	.word	0x20000134
 800075c:	20000138 	.word	0x20000138
 8000760:	20000068 	.word	0x20000068

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	@ 0x58
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2244      	movs	r2, #68	@ 0x44
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fae7 	bl	8003d46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000786:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078a:	f000 fed1 	bl	8001530 <HAL_PWREx_ControlVoltageScaling>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000794:	f000 f982 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000798:	2310      	movs	r3, #16
 800079a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007a4:	2360      	movs	r3, #96	@ 0x60
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007ac:	2301      	movs	r3, #1
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007b4:	2328      	movs	r3, #40	@ 0x28
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 ff07 	bl	80015dc <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007d4:	f000 f962 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2303      	movs	r3, #3
 80007de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2104      	movs	r1, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 facf 	bl	8001d94 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007fc:	f000 f94e 	bl	8000a9c <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3758      	adds	r7, #88	@ 0x58
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	@ (8000864 <MX_USART2_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000814:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800084c:	f002 f982 	bl	8002b54 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f921 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000a4 	.word	0x200000a4
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b46      	ldr	r3, [pc, #280]	@ (8000998 <MX_GPIO_Init+0x130>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a45      	ldr	r2, [pc, #276]	@ (8000998 <MX_GPIO_Init+0x130>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b43      	ldr	r3, [pc, #268]	@ (8000998 <MX_GPIO_Init+0x130>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b40      	ldr	r3, [pc, #256]	@ (8000998 <MX_GPIO_Init+0x130>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a3f      	ldr	r2, [pc, #252]	@ (8000998 <MX_GPIO_Init+0x130>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000998 <MX_GPIO_Init+0x130>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000998 <MX_GPIO_Init+0x130>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a39      	ldr	r2, [pc, #228]	@ (8000998 <MX_GPIO_Init+0x130>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <MX_GPIO_Init+0x130>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD3_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	21a0      	movs	r1, #160	@ 0xa0
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ce:	f000 fdd7 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	@ 0x40
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f000 fdd1 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	4829      	ldr	r0, [pc, #164]	@ (800099c <MX_GPIO_Init+0x134>)
 80008f6:	f000 fc19 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f000 fc0b 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 8000916:	23e0      	movs	r3, #224	@ 0xe0
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f000 fbfc 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8000934:	2301      	movs	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4815      	ldr	r0, [pc, #84]	@ (80009a0 <MX_GPIO_Init+0x138>)
 800094a:	f000 fbef 	bl	800112c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2006      	movs	r0, #6
 8000954:	f000 fb35 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000958:	2006      	movs	r0, #6
 800095a:	f000 fb4e 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2007      	movs	r0, #7
 8000964:	f000 fb2d 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000968:	2007      	movs	r0, #7
 800096a:	f000 fb46 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200a      	movs	r0, #10
 8000974:	f000 fb25 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fb3e 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2028      	movs	r0, #40	@ 0x28
 8000984:	f000 fb1d 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000988:	2028      	movs	r0, #40	@ 0x28
 800098a:	f000 fb36 	bl	8000ffa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	48000800 	.word	0x48000800
 80009a0:	48000400 	.word	0x48000400

080009a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick(); // getting actual time on MS
 80009ae:	f000 f9fd 	bl	8000dac <HAL_GetTick>
 80009b2:	60f8      	str	r0, [r7, #12]
	if (GPIO_Pin == S1_Pin)
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d120      	bne.n	80009fc <HAL_GPIO_EXTI_Callback+0x58>
	  { // Button 1 is pressed
	    if (current_time - last_button_press_left < doublePressTimeFEA)
 80009ba:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d207      	bcs.n	80009da <HAL_GPIO_EXTI_Callback+0x36>
	    {
	      timmingb1++; // Increase counter button 1
 80009ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0xe0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	3301      	adds	r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0xe0>)
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e002      	b.n	80009e0 <HAL_GPIO_EXTI_Callback+0x3c>
	    }
	    else
	    {
	      timmingb1 = 1; // Reset counter if time is 500ms or plus
 80009da:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0xe0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
	    }
	    last_button_press_left = current_time;
 80009e0:	4a27      	ldr	r2, [pc, #156]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6013      	str	r3, [r2, #0]
	    flag_left = !flag_left;
 80009e6:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <HAL_GPIO_EXTI_Callback+0xe4>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <HAL_GPIO_EXTI_Callback+0xe4>)
 80009fa:	701a      	strb	r2, [r3, #0]
	  }

	  if (GPIO_Pin == S2_Pin)
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	2b10      	cmp	r3, #16
 8000a00:	d120      	bne.n	8000a44 <HAL_GPIO_EXTI_Callback+0xa0>
	  { // button 2 is pressed
	    if (current_time - last_button_press_right < doublePressTimeFEA)
 8000a02:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d207      	bcs.n	8000a22 <HAL_GPIO_EXTI_Callback+0x7e>
	    {
	      timmingb2++;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_GPIO_EXTI_Callback+0xec>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_GPIO_EXTI_Callback+0xec>)
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_EXTI_Callback+0x84>
	    }
	    else
	    {
	      timmingb2 = 1; // reset counter
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <HAL_GPIO_EXTI_Callback+0xec>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
	    }
	    last_button_press_right = current_time;
 8000a28:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6013      	str	r3, [r2, #0]
	    flag_right = !flag_right;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf0c      	ite	eq
 8000a38:	2301      	moveq	r3, #1
 8000a3a:	2300      	movne	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000a42:	701a      	strb	r2, [r3, #0]
	  }
	  if (GPIO_Pin == S3_Pin)
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d116      	bne.n	8000a78 <HAL_GPIO_EXTI_Callback+0xd4>
	  {
 // to add B3 stationary control
		timmingb1 = 2;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
		timmingb2 = 2;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_GPIO_EXTI_Callback+0xec>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	701a      	strb	r2, [r3, #0]
		flag_stat = !flag_stat;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf0c      	ite	eq
 8000a60:	2301      	moveq	r3, #1
 8000a62:	2300      	movne	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000a6a:	701a      	strb	r2, [r3, #0]
		last_button_press_left = current_time;
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6013      	str	r3, [r2, #0]
		last_button_press_right = current_time;
 8000a72:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6013      	str	r3, [r2, #0]
	  }
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000134 	.word	0x20000134
 8000a84:	2000012f 	.word	0x2000012f
 8000a88:	2000012c 	.word	0x2000012c
 8000a8c:	20000138 	.word	0x20000138
 8000a90:	20000130 	.word	0x20000130
 8000a94:	2000012d 	.word	0x2000012d
 8000a98:	2000012e 	.word	0x2000012e

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ac      	sub	sp, #176	@ 0xb0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2288      	movs	r2, #136	@ 0x88
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 f918 	bl	8003d46 <memset>
  if(huart->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a25      	ldr	r2, [pc, #148]	@ (8000bb0 <HAL_UART_MspInit+0xc0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d143      	bne.n	8000ba8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fb55 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b38:	f7ff ffb0 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <HAL_UART_MspInit+0xc4>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b40:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <HAL_UART_MspInit+0xc4>)
 8000b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b48:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <HAL_UART_MspInit+0xc4>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <HAL_UART_MspInit+0xc4>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b58:	4a16      	ldr	r2, [pc, #88]	@ (8000bb4 <HAL_UART_MspInit+0xc4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_UART_MspInit+0xc4>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 faca 	bl	800112c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2026      	movs	r0, #38	@ 0x26
 8000b9e:	f000 fa10 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba2:	2026      	movs	r0, #38	@ 0x26
 8000ba4:	f000 fa29 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	37b0      	adds	r7, #176	@ 0xb0
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f8b9 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f000 fc62 	bl	80014e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 fc5b 	bl	80014e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000c36:	2010      	movs	r0, #16
 8000c38:	f000 fc54 	bl	80014e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <USART2_IRQHandler+0x10>)
 8000c46:	f002 f85d 	bl	8002d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000a4 	.word	0x200000a4

08000c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8000c58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c5c:	f000 fc42 	bl	80014e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f003 f84f 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fbfd 	bl	80004b8 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ccc:	08003e10 	.word	0x08003e10
  ldr r2, =_sbss
 8000cd0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cd4:	20000144 	.word	0x20000144

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f961 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	200f      	movs	r0, #15
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fed4 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d023      	beq.n	8000d68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_InitTick+0x70>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f96d 	bl	8001016 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d809      	bhi.n	8000d5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f937 	bl	8000fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_InitTick+0x74>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e001      	b.n	8000d6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000084 	.word	0x20000084
 8000d7c:	2000007c 	.word	0x2000007c
 8000d80:	20000080 	.word	0x20000080

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000084 	.word	0x20000084
 8000da8:	20000140 	.word	0x20000140

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000140 	.word	0x20000140

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000084 	.word	0x20000084

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d008      	beq.n	8001058 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2204      	movs	r2, #4
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e022      	b.n	800109e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 020e 	bic.w	r2, r2, #14
 8001066:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107c:	f003 021c 	and.w	r2, r3, #28
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d005      	beq.n	80010ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e029      	b.n	8001122 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020e 	bic.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f003 021c 	and.w	r2, r3, #28
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
    }
  }
  return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e17f      	b.n	800143c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8171 	beq.w	8001436 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x40>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 0201 	and.w	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d118      	bne.n	800120c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80ac 	beq.w	8001436 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b5f      	ldr	r3, [pc, #380]	@ (800145c <HAL_GPIO_Init+0x330>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	4a5e      	ldr	r2, [pc, #376]	@ (800145c <HAL_GPIO_Init+0x330>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <HAL_GPIO_Init+0x330>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001460 <HAL_GPIO_Init+0x334>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x242>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	@ (8001464 <HAL_GPIO_Init+0x338>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x23e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_GPIO_Init+0x33c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x23a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	@ (800146c <HAL_GPIO_Init+0x340>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x236>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	@ (8001470 <HAL_GPIO_Init+0x344>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x232>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	@ (8001474 <HAL_GPIO_Init+0x348>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4a      	ldr	r2, [pc, #296]	@ (8001478 <HAL_GPIO_Init+0x34c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x22a>
 8001352:	2306      	movs	r3, #6
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001356:	2307      	movs	r3, #7
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800136e:	2300      	movs	r3, #0
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001380:	4937      	ldr	r1, [pc, #220]	@ (8001460 <HAL_GPIO_Init+0x334>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138e:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <HAL_GPIO_Init+0x350>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001406:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_GPIO_Init+0x350>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_GPIO_Init+0x350>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <HAL_GPIO_Init+0x350>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f47f ae78 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	48000c00 	.word	0x48000c00
 8001470:	48001000 	.word	0x48001000
 8001474:	48001400 	.word	0x48001400
 8001478:	48001800 	.word	0x48001800
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43d9      	mvns	r1, r3
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	400b      	ands	r3, r1
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fa4e 	bl	80009a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <HAL_PWREx_GetVoltageRange+0x18>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40007000 	.word	0x40007000

08001530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800153e:	d130      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001540:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800154c:	d038      	beq.n	80015c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800154e:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001556:	4a1e      	ldr	r2, [pc, #120]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001558:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800155e:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2232      	movs	r2, #50	@ 0x32
 8001564:	fb02 f303 	mul.w	r3, r2, r3
 8001568:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	3301      	adds	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001574:	e002      	b.n	800157c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001588:	d102      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x60>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f2      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159c:	d110      	bne.n	80015c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e00f      	b.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ae:	d007      	beq.n	80015c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000
 80015d4:	2000007c 	.word	0x2000007c
 80015d8:	431bde83 	.word	0x431bde83

080015dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e3ca      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4b97      	ldr	r3, [pc, #604]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f8:	4b94      	ldr	r3, [pc, #592]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80e4 	beq.w	80017d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <HAL_RCC_OscConfig+0x4a>
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	2b0c      	cmp	r3, #12
 800161a:	f040 808b 	bne.w	8001734 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b01      	cmp	r3, #1
 8001622:	f040 8087 	bne.w	8001734 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001626:	4b89      	ldr	r3, [pc, #548]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x62>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e3a2      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	4b82      	ldr	r3, [pc, #520]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_RCC_OscConfig+0x7c>
 800164e:	4b7f      	ldr	r3, [pc, #508]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001656:	e005      	b.n	8001664 <HAL_RCC_OscConfig+0x88>
 8001658:	4b7c      	ldr	r3, [pc, #496]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001664:	4293      	cmp	r3, r2
 8001666:	d223      	bcs.n	80016b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fd55 	bl	800211c <RCC_SetFlashLatencyFromMSIRange>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e383      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167c:	4b73      	ldr	r3, [pc, #460]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a72      	ldr	r2, [pc, #456]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b70      	ldr	r3, [pc, #448]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	496d      	ldr	r1, [pc, #436]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169a:	4b6c      	ldr	r3, [pc, #432]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	4968      	ldr	r1, [pc, #416]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
 80016ae:	e025      	b.n	80016fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b0:	4b66      	ldr	r3, [pc, #408]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b63      	ldr	r3, [pc, #396]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4960      	ldr	r1, [pc, #384]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b5f      	ldr	r3, [pc, #380]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	495b      	ldr	r1, [pc, #364]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fd15 	bl	800211c <RCC_SetFlashLatencyFromMSIRange>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e343      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016fc:	f000 fc4a 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b52      	ldr	r3, [pc, #328]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	4950      	ldr	r1, [pc, #320]	@ (8001850 <HAL_RCC_OscConfig+0x274>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	4a4e      	ldr	r2, [pc, #312]	@ (8001854 <HAL_RCC_OscConfig+0x278>)
 800171a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800171c:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff faf3 	bl	8000d0c <HAL_InitTick>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d052      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	e327      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d032      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800173c:	4b43      	ldr	r3, [pc, #268]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a42      	ldr	r2, [pc, #264]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001748:	f7ff fb30 	bl	8000dac <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001750:	f7ff fb2c 	bl	8000dac <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e310      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001762:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176e:	4b37      	ldr	r3, [pc, #220]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a36      	ldr	r2, [pc, #216]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b34      	ldr	r3, [pc, #208]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4931      	ldr	r1, [pc, #196]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800178c:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	492c      	ldr	r1, [pc, #176]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
 80017a0:	e01a      	b.n	80017d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a29      	ldr	r2, [pc, #164]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fafd 	bl	8000dac <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b6:	f7ff faf9 	bl	8000dac <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e2dd      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c8:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x1da>
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d074      	beq.n	80018ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x21a>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d10e      	bne.n	800180e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d10b      	bne.n	800180e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d064      	beq.n	80018cc <HAL_RCC_OscConfig+0x2f0>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d160      	bne.n	80018cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e2ba      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x24a>
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e026      	b.n	8001874 <HAL_RCC_OscConfig+0x298>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800182e:	d115      	bne.n	800185c <HAL_RCC_OscConfig+0x280>
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a05      	ldr	r2, [pc, #20]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001836:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a02      	ldr	r2, [pc, #8]	@ (800184c <HAL_RCC_OscConfig+0x270>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x298>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	08003db8 	.word	0x08003db8
 8001854:	2000007c 	.word	0x2000007c
 8001858:	20000080 	.word	0x20000080
 800185c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a9f      	ldr	r2, [pc, #636]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b9d      	ldr	r3, [pc, #628]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fa96 	bl	8000dac <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fa92 	bl	8000dac <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e276      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	4b92      	ldr	r3, [pc, #584]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x2a8>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fa82 	bl	8000dac <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fa7e 	bl	8000dac <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	@ 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e262      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018be:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x2d0>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d060      	beq.n	800199c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x310>
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d119      	bne.n	800191a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d116      	bne.n	800191a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_OscConfig+0x328>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e23f      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	4973      	ldr	r1, [pc, #460]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	e040      	b.n	800199c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d023      	beq.n	800196a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001922:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff fa3d 	bl	8000dac <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fa39 	bl	8000dac <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e21d      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	4b65      	ldr	r3, [pc, #404]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b62      	ldr	r3, [pc, #392]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	495f      	ldr	r1, [pc, #380]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
 8001968:	e018      	b.n	800199c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff fa19 	bl	8000dac <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fa15 	bl	8000dac <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1f9      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001990:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d03c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01c      	beq.n	80019ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff f9f4 	bl	8000dac <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff f9f0 	bl	8000dac <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1d4      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ef      	beq.n	80019c8 <HAL_RCC_OscConfig+0x3ec>
 80019e8:	e01b      	b.n	8001a22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f9d7 	bl	8000dac <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f9d3 	bl	8000dac <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1b7      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a14:	4b32      	ldr	r3, [pc, #200]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ef      	bne.n	8001a02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80a6 	beq.w	8001b7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	4a26      	ldr	r2, [pc, #152]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <HAL_RCC_OscConfig+0x508>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d118      	bne.n	8001a9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <HAL_RCC_OscConfig+0x508>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae4 <HAL_RCC_OscConfig+0x508>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a74:	f7ff f99a 	bl	8000dac <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7c:	f7ff f996 	bl	8000dac <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e17a      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_RCC_OscConfig+0x508>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4d8>
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ab2:	e029      	b.n	8001b08 <HAL_RCC_OscConfig+0x52c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d115      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x50c>
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac2:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad2:	4a03      	ldr	r2, [pc, #12]	@ (8001ae0 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x52c>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	4a9b      	ldr	r2, [pc, #620]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001af8:	4b98      	ldr	r3, [pc, #608]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afe:	4a97      	ldr	r2, [pc, #604]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d016      	beq.n	8001b3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f94c 	bl	8000dac <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff f948 	bl	8000dac <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e12a      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ed      	beq.n	8001b18 <HAL_RCC_OscConfig+0x53c>
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f935 	bl	8000dac <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff f931 	bl	8000dac <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e113      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b5c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ed      	bne.n	8001b46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6a:	7ffb      	ldrb	r3, [r7, #31]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b70:	4b7a      	ldr	r3, [pc, #488]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	4a79      	ldr	r2, [pc, #484]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80fe 	beq.w	8001d82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	f040 80d0 	bne.w	8001d30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b90:	4b72      	ldr	r3, [pc, #456]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d130      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d127      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d11f      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bd0:	2a07      	cmp	r2, #7
 8001bd2:	bf14      	ite	ne
 8001bd4:	2201      	movne	r2, #1
 8001bd6:	2200      	moveq	r2, #0
 8001bd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d113      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	3b01      	subs	r3, #1
 8001bec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d06e      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	d069      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c18:	4b50      	ldr	r3, [pc, #320]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0ad      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c28:	4b4c      	ldr	r3, [pc, #304]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c34:	f7ff f8ba 	bl	8000dac <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f8b6 	bl	8000dac <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e09a      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5a:	4b40      	ldr	r3, [pc, #256]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b40      	ldr	r3, [pc, #256]	@ (8001d60 <HAL_RCC_OscConfig+0x784>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c74:	0212      	lsls	r2, r2, #8
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c7c:	0852      	lsrs	r2, r2, #1
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	0552      	lsls	r2, r2, #21
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c88:	0852      	lsrs	r2, r2, #1
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	0652      	lsls	r2, r2, #25
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c94:	0912      	lsrs	r2, r2, #4
 8001c96:	0452      	lsls	r2, r2, #17
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	4930      	ldr	r1, [pc, #192]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cac:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb8:	f7ff f878 	bl	8000dac <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f874 	bl	8000dac <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e058      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cde:	e050      	b.n	8001d82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e04f      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d148      	bne.n	8001d82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a16      	ldr	r2, [pc, #88]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d08:	f7ff f850 	bl	8000dac <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f84c 	bl	8000dac <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e030      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x734>
 8001d2e:	e028      	b.n	8001d82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d023      	beq.n	8001d7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <HAL_RCC_OscConfig+0x780>)
 8001d3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f833 	bl	8000dac <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	e00c      	b.n	8001d64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff f82f 	bl	8000dac <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d905      	bls.n	8001d64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e013      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_RCC_OscConfig+0x7b0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ec      	bne.n	8001d4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_OscConfig+0x7b0>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4905      	ldr	r1, [pc, #20]	@ (8001d8c <HAL_RCC_OscConfig+0x7b0>)
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_RCC_OscConfig+0x7b4>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
 8001d7c:	e001      	b.n	8001d82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	feeefffc 	.word	0xfeeefffc

08001d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0e7      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b75      	ldr	r3, [pc, #468]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b72      	ldr	r3, [pc, #456]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4970      	ldr	r1, [pc, #448]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0cf      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b66      	ldr	r3, [pc, #408]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d908      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b63      	ldr	r3, [pc, #396]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4960      	ldr	r1, [pc, #384]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d04c      	beq.n	8001eac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d121      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0a6      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e32:	4b54      	ldr	r3, [pc, #336]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d115      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e09a      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e08e      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e086      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4943      	ldr	r1, [pc, #268]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7c:	f7fe ff96 	bl	8000dac <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7fe ff92 	bl	8000dac <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e06e      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d010      	beq.n	8001eda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d208      	bcs.n	8001eda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	492b      	ldr	r1, [pc, #172]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eda:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d210      	bcs.n	8001f0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4923      	ldr	r1, [pc, #140]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef8:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <HAL_RCC_ClockConfig+0x1ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e036      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f16:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4918      	ldr	r1, [pc, #96]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4910      	ldr	r1, [pc, #64]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f48:	f000 f824 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	490b      	ldr	r1, [pc, #44]	@ (8001f88 <HAL_RCC_ClockConfig+0x1f4>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_ClockConfig+0x1fc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fecd 	bl	8000d0c <HAL_InitTick>
 8001f72:	4603      	mov	r3, r0
 8001f74:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f76:	7afb      	ldrb	r3, [r7, #11]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40022000 	.word	0x40022000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003db8 	.word	0x08003db8
 8001f8c:	2000007c 	.word	0x2000007c
 8001f90:	20000080 	.word	0x20000080

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fac:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d121      	bne.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d11e      	bne.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc8:	4b34      	ldr	r3, [pc, #208]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd4:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002004:	e00a      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d102      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800200c:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	e004      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d101      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002018:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800201a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d134      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0xa6>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d003      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0xac>
 8002038:	e005      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800203c:	617b      	str	r3, [r7, #20]
      break;
 800203e:	e005      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002042:	617b      	str	r3, [r7, #20]
      break;
 8002044:	e002      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	617b      	str	r3, [r7, #20]
      break;
 800204a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	fb03 f202 	mul.w	r2, r3, r2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	0e5b      	lsrs	r3, r3, #25
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	3301      	adds	r3, #1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800208c:	69bb      	ldr	r3, [r7, #24]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	@ 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003dd0 	.word	0x08003dd0
 80020a4:	00f42400 	.word	0x00f42400
 80020a8:	007a1200 	.word	0x007a1200

080020ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000007c 	.word	0x2000007c

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020c8:	f7ff fff0 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4904      	ldr	r1, [pc, #16]	@ (80020ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08003dc8 	.word	0x08003dc8

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020f4:	f7ff ffda 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0adb      	lsrs	r3, r3, #11
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4904      	ldr	r1, [pc, #16]	@ (8002118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08003dc8 	.word	0x08003dc8

0800211c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002128:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002134:	f7ff f9ee 	bl	8001514 <HAL_PWREx_GetVoltageRange>
 8002138:	6178      	str	r0, [r7, #20]
 800213a:	e014      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	4a24      	ldr	r2, [pc, #144]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	@ 0x58
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002154:	f7ff f9de 	bl	8001514 <HAL_PWREx_GetVoltageRange>
 8002158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800216c:	d10b      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	@ 0x80
 8002172:	d919      	bls.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2ba0      	cmp	r3, #160	@ 0xa0
 8002178:	d902      	bls.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800217a:	2302      	movs	r3, #2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e013      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e010      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b80      	cmp	r3, #128	@ 0x80
 800218a:	d902      	bls.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800218c:	2303      	movs	r3, #3
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e00a      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b80      	cmp	r3, #128	@ 0x80
 8002196:	d102      	bne.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e004      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b70      	cmp	r3, #112	@ 0x70
 80021a2:	d101      	bne.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 0207 	bic.w	r2, r3, #7
 80021b0:	4909      	ldr	r1, [pc, #36]	@ (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b8:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d041      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002200:	d02a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002202:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002206:	d824      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002208:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800220c:	d008      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800220e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002212:	d81e      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800221c:	d010      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800221e:	e018      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002220:	4b86      	ldr	r3, [pc, #536]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a85      	ldr	r2, [pc, #532]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222c:	e015      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fabb 	bl	80027b0 <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800223e:	e00c      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3320      	adds	r3, #32
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fba6 	bl	8002998 <RCCEx_PLLSAI2_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002250:	e003      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	74fb      	strb	r3, [r7, #19]
      break;
 8002256:	e000      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002260:	4b76      	ldr	r3, [pc, #472]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800226e:	4973      	ldr	r1, [pc, #460]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002276:	e001      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d041      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800228c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002290:	d02a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002296:	d824      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800229c:	d008      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800229e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022a2:	d81e      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ae:	e018      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b0:	4b62      	ldr	r3, [pc, #392]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a61      	ldr	r2, [pc, #388]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022bc:	e015      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fa73 	bl	80027b0 <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ce:	e00c      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3320      	adds	r3, #32
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fb5e 	bl	8002998 <RCCEx_PLLSAI2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e0:	e003      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	74fb      	strb	r3, [r7, #19]
      break;
 80022e6:	e000      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022f0:	4b52      	ldr	r3, [pc, #328]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022fe:	494f      	ldr	r1, [pc, #316]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002306:	e001      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80a0 	beq.w	800245a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	4b41      	ldr	r3, [pc, #260]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	4a40      	ldr	r2, [pc, #256]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234c:	2301      	movs	r3, #1
 800234e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002350:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a3a      	ldr	r2, [pc, #232]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800235c:	f7fe fd26 	bl	8000dac <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002362:	e009      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002364:	f7fe fd22 	bl	8000dac <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d902      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	74fb      	strb	r3, [r7, #19]
        break;
 8002376:	e005      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002378:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ef      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d15c      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800238a:	4b2c      	ldr	r3, [pc, #176]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002394:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01f      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d019      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b4:	4b21      	ldr	r3, [pc, #132]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	4a20      	ldr	r2, [pc, #128]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d4:	4a19      	ldr	r2, [pc, #100]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7fe fce1 	bl	8000dac <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ec:	e00b      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fcdd 	bl	8000dac <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d902      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	74fb      	strb	r3, [r7, #19]
            break;
 8002404:	e006      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ec      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800242a:	4904      	ldr	r1, [pc, #16]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002432:	e009      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
 8002438:	e006      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002448:	7c7b      	ldrb	r3, [r7, #17]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b9e      	ldr	r3, [pc, #632]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	4a9d      	ldr	r2, [pc, #628]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002458:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002466:	4b98      	ldr	r3, [pc, #608]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246c:	f023 0203 	bic.w	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002474:	4994      	ldr	r1, [pc, #592]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002488:	4b8f      	ldr	r3, [pc, #572]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248e:	f023 020c 	bic.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	498c      	ldr	r1, [pc, #560]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024aa:	4b87      	ldr	r3, [pc, #540]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	4983      	ldr	r1, [pc, #524]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024cc:	4b7e      	ldr	r3, [pc, #504]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	497b      	ldr	r1, [pc, #492]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ee:	4b76      	ldr	r3, [pc, #472]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fc:	4972      	ldr	r1, [pc, #456]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002510:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	496a      	ldr	r1, [pc, #424]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b65      	ldr	r3, [pc, #404]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002540:	4961      	ldr	r1, [pc, #388]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002554:	4b5c      	ldr	r3, [pc, #368]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	4959      	ldr	r1, [pc, #356]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002576:	4b54      	ldr	r3, [pc, #336]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002584:	4950      	ldr	r1, [pc, #320]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002598:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	4948      	ldr	r1, [pc, #288]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ba:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	493f      	ldr	r1, [pc, #252]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d028      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025dc:	4b3a      	ldr	r3, [pc, #232]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ea:	4937      	ldr	r1, [pc, #220]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025fa:	d106      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025fc:	4b32      	ldr	r3, [pc, #200]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a31      	ldr	r2, [pc, #196]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002606:	60d3      	str	r3, [r2, #12]
 8002608:	e011      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800260e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002612:	d10c      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f8c8 	bl	80027b0 <RCCEx_PLLSAI1_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d028      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800263a:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	491f      	ldr	r1, [pc, #124]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002658:	d106      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265a:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4a1a      	ldr	r2, [pc, #104]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002664:	60d3      	str	r3, [r2, #12]
 8002666:	e011      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002670:	d10c      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f899 	bl	80027b0 <RCCEx_PLLSAI1_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02b      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026b6:	d109      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b8:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a02      	ldr	r2, [pc, #8]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026c2:	60d3      	str	r3, [r2, #12]
 80026c4:	e014      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f867 	bl	80027b0 <RCCEx_PLLSAI1_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02f      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026fc:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800270a:	4928      	ldr	r1, [pc, #160]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800271a:	d10d      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	2102      	movs	r1, #2
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f844 	bl	80027b0 <RCCEx_PLLSAI1_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d014      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	74bb      	strb	r3, [r7, #18]
 8002736:	e011      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800273c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3320      	adds	r3, #32
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f925 	bl	8002998 <RCCEx_PLLSAI2_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002768:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002776:	490d      	ldr	r1, [pc, #52]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800279a:	4904      	ldr	r1, [pc, #16]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000

080027b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027be:	4b75      	ldr	r3, [pc, #468]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d018      	beq.n	80027fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ca:	4b72      	ldr	r3, [pc, #456]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0203 	and.w	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d10d      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
       ||
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
       ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d047      	beq.n	8002886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e044      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d018      	beq.n	8002836 <RCCEx_PLLSAI1_Config+0x86>
 8002804:	2b03      	cmp	r3, #3
 8002806:	d825      	bhi.n	8002854 <RCCEx_PLLSAI1_Config+0xa4>
 8002808:	2b01      	cmp	r3, #1
 800280a:	d002      	beq.n	8002812 <RCCEx_PLLSAI1_Config+0x62>
 800280c:	2b02      	cmp	r3, #2
 800280e:	d009      	beq.n	8002824 <RCCEx_PLLSAI1_Config+0x74>
 8002810:	e020      	b.n	8002854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002812:	4b60      	ldr	r3, [pc, #384]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11d      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002822:	e01a      	b.n	800285a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002824:	4b5b      	ldr	r3, [pc, #364]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002834:	e013      	b.n	800285e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002836:	4b57      	ldr	r3, [pc, #348]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002842:	4b54      	ldr	r3, [pc, #336]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002852:	e006      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e004      	b.n	8002864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285a:	bf00      	nop
 800285c:	e002      	b.n	8002864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002862:	bf00      	nop
    }

    if(status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800286a:	4b4a      	ldr	r3, [pc, #296]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	430b      	orrs	r3, r1
 8002880:	4944      	ldr	r1, [pc, #272]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d17d      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800288c:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a40      	ldr	r2, [pc, #256]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002898:	f7fe fa88 	bl	8000dac <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800289e:	e009      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a0:	f7fe fa84 	bl	8000dac <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	73fb      	strb	r3, [r7, #15]
        break;
 80028b2:	e005      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b4:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ef      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d160      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028cc:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	0211      	lsls	r1, r2, #8
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d2      	ldr	r2, [r2, #12]
 80028e2:	0912      	lsrs	r2, r2, #4
 80028e4:	0452      	lsls	r2, r2, #17
 80028e6:	430a      	orrs	r2, r1
 80028e8:	492a      	ldr	r1, [pc, #168]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]
 80028ee:	e027      	b.n	8002940 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d112      	bne.n	800291c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f6:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6892      	ldr	r2, [r2, #8]
 8002906:	0211      	lsls	r1, r2, #8
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6912      	ldr	r2, [r2, #16]
 800290c:	0852      	lsrs	r2, r2, #1
 800290e:	3a01      	subs	r2, #1
 8002910:	0552      	lsls	r2, r2, #21
 8002912:	430a      	orrs	r2, r1
 8002914:	491f      	ldr	r1, [pc, #124]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
 800291a:	e011      	b.n	8002940 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002924:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	0211      	lsls	r1, r2, #8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6952      	ldr	r2, [r2, #20]
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0652      	lsls	r2, r2, #25
 8002938:	430a      	orrs	r2, r1
 800293a:	4916      	ldr	r1, [pc, #88]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800294a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fa2e 	bl	8000dac <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002954:	f7fe fa2a 	bl	8000dac <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
          break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002968:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4904      	ldr	r1, [pc, #16]	@ (8002994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d018      	beq.n	80029e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029b2:	4b67      	ldr	r3, [pc, #412]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d10d      	bne.n	80029de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
       ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ca:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
       ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d047      	beq.n	8002a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e044      	b.n	8002a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d018      	beq.n	8002a1e <RCCEx_PLLSAI2_Config+0x86>
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d825      	bhi.n	8002a3c <RCCEx_PLLSAI2_Config+0xa4>
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d002      	beq.n	80029fa <RCCEx_PLLSAI2_Config+0x62>
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d009      	beq.n	8002a0c <RCCEx_PLLSAI2_Config+0x74>
 80029f8:	e020      	b.n	8002a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029fa:	4b55      	ldr	r3, [pc, #340]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11d      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0a:	e01a      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a0c:	4b50      	ldr	r3, [pc, #320]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1c:	e013      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a2a:	4b49      	ldr	r3, [pc, #292]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a3a:	e006      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e004      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a52:	4b3f      	ldr	r3, [pc, #252]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	430b      	orrs	r3, r1
 8002a68:	4939      	ldr	r1, [pc, #228]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d167      	bne.n	8002b44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a74:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a35      	ldr	r2, [pc, #212]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a80:	f7fe f994 	bl	8000dac <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a86:	e009      	b.n	8002a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a88:	f7fe f990 	bl	8000dac <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	73fb      	strb	r3, [r7, #15]
        break;
 8002a9a:	e005      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ef      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d14a      	bne.n	8002b44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab4:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	0211      	lsls	r1, r2, #8
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68d2      	ldr	r2, [r2, #12]
 8002aca:	0912      	lsrs	r2, r2, #4
 8002acc:	0452      	lsls	r2, r2, #17
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	491f      	ldr	r1, [pc, #124]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	614b      	str	r3, [r1, #20]
 8002ad6:	e011      	b.n	8002afc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ae0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6892      	ldr	r2, [r2, #8]
 8002ae8:	0211      	lsls	r1, r2, #8
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6912      	ldr	r2, [r2, #16]
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4916      	ldr	r1, [pc, #88]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe f950 	bl	8000dac <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b0e:	e009      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b10:	f7fe f94c 	bl	8000dac <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	73fb      	strb	r3, [r7, #15]
          break;
 8002b22:	e005      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4904      	ldr	r1, [pc, #16]	@ (8002b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e040      	b.n	8002be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd ffba 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	@ 0x24
 8002b80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fe74 	bl	8003888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fbb9 	bl	8003318 <UART_SetConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e01b      	b.n	8002be8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fef3 	bl	80039cc <UART_CheckIdleState>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d177      	bne.n	8002cf8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Transmit+0x24>
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e070      	b.n	8002cfa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2221      	movs	r2, #33	@ 0x21
 8002c24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c26:	f7fe f8c1 	bl	8000dac <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c44:	d108      	bne.n	8002c58 <HAL_UART_Transmit+0x68>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e003      	b.n	8002c60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c60:	e02f      	b.n	8002cc2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2180      	movs	r1, #128	@ 0x80
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 ff55 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e03b      	b.n	8002cfa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c94:	b292      	uxth	r2, r2
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e007      	b.n	8002cb0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3301      	adds	r3, #1
 8002cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1c9      	bne.n	8002c62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2140      	movs	r1, #64	@ 0x40
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 ff1f 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e005      	b.n	8002cfa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b0ba      	sub	sp, #232	@ 0xe8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002d2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002d32:	4013      	ands	r3, r2
 8002d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d115      	bne.n	8002d6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00f      	beq.n	8002d6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 82ae 	beq.w	80032be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
      }
      return;
 8002d6a:	e2a8      	b.n	80032be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8117 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d86:	4b85      	ldr	r3, [pc, #532]	@ (8002f9c <HAL_UART_IRQHandler+0x298>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 810a 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0xbc>
 8002d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d011      	beq.n	8002df0 <HAL_UART_IRQHandler+0xec>
 8002dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d011      	beq.n	8002e20 <HAL_UART_IRQHandler+0x11c>
 8002dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e52:	f043 0208 	orr.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <HAL_UART_IRQHandler+0x18a>
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8214 	beq.w	80032c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d005      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ede:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04f      	beq.n	8002f86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe7f 	bl	8003bea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	d141      	bne.n	8002f7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3308      	adds	r3, #8
 8002f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3308      	adds	r3, #8
 8002f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1d9      	bne.n	8002efa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d013      	beq.n	8002f76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f52:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <HAL_UART_IRQHandler+0x29c>)
 8002f54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe f8a5 	bl	80010aa <HAL_DMA_Abort_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d017      	beq.n	8002f96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f70:	4610      	mov	r0, r2
 8002f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	e00f      	b.n	8002f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f9b8 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	e00b      	b.n	8002f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9b4 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	e007      	b.n	8002f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9b0 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002f94:	e195      	b.n	80032c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f96:	bf00      	nop
    return;
 8002f98:	e193      	b.n	80032c2 <HAL_UART_IRQHandler+0x5be>
 8002f9a:	bf00      	nop
 8002f9c:	04000120 	.word	0x04000120
 8002fa0:	08003cb3 	.word	0x08003cb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	f040 814e 	bne.w	800324a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8147 	beq.w	800324a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8140 	beq.w	800324a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	f040 80b8 	bne.w	8003152 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8167 	beq.w	80032c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003002:	429a      	cmp	r2, r3
 8003004:	f080 815f 	bcs.w	80032c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800300e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 8086 	bne.w	8003130 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800304e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003052:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800305a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1da      	bne.n	8003024 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3308      	adds	r3, #8
 8003074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800307e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003092:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003096:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800309a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e1      	bne.n	800306e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3308      	adds	r3, #8
 80030b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3308      	adds	r3, #8
 80030ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e3      	bne.n	80030aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003112:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003114:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e4      	bne.n	80030f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd ff7f 	bl	800102e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003142:	b29b      	uxth	r3, r3
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8d8 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003150:	e0b9      	b.n	80032c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800315e:	b29b      	uxth	r3, r3
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80ab 	beq.w	80032ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a6 	beq.w	80032ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e4      	bne.n	800317e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3308      	adds	r3, #8
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	623b      	str	r3, [r7, #32]
   return(result);
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3308      	adds	r3, #8
 80031d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80031da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e3      	bne.n	80031b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	60fb      	str	r3, [r7, #12]
   return(result);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0310 	bic.w	r3, r3, #16
 8003214:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	617b      	str	r3, [r7, #20]
   return(result);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e4      	bne.n	8003200 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f85c 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003248:	e03f      	b.n	80032ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <HAL_UART_IRQHandler+0x570>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800326a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fd60 	bl	8003d32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003272:	e02d      	b.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01c      	beq.n	80032ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
    }
    return;
 800329c:	e017      	b.n	80032ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fd11 	bl	8003cde <UART_EndTransmit_IT>
    return;
 80032bc:	e008      	b.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80032be:	bf00      	nop
 80032c0:	e006      	b.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80032c2:	bf00      	nop
 80032c4:	e004      	b.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80032ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032d0:	37e8      	adds	r7, #232	@ 0xe8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop

080032d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b08a      	sub	sp, #40	@ 0x28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	4313      	orrs	r3, r2
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4ba4      	ldr	r3, [pc, #656]	@ (80035d8 <UART_SetConfig+0x2c0>)
 8003348:	4013      	ands	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a99      	ldr	r2, [pc, #612]	@ (80035dc <UART_SetConfig+0x2c4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003380:	4313      	orrs	r3, r2
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a90      	ldr	r2, [pc, #576]	@ (80035e0 <UART_SetConfig+0x2c8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d126      	bne.n	80033f0 <UART_SetConfig+0xd8>
 80033a2:	4b90      	ldr	r3, [pc, #576]	@ (80035e4 <UART_SetConfig+0x2cc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d81b      	bhi.n	80033e8 <UART_SetConfig+0xd0>
 80033b0:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <UART_SetConfig+0xa0>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033d9 	.word	0x080033d9
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e1 	.word	0x080033e1
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e116      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e112      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e10e      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e6:	e10a      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e106      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7c      	ldr	r2, [pc, #496]	@ (80035e8 <UART_SetConfig+0x2d0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d138      	bne.n	800346c <UART_SetConfig+0x154>
 80033fa:	4b7a      	ldr	r3, [pc, #488]	@ (80035e4 <UART_SetConfig+0x2cc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d82d      	bhi.n	8003464 <UART_SetConfig+0x14c>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <UART_SetConfig+0xf8>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003445 	.word	0x08003445
 8003414:	08003465 	.word	0x08003465
 8003418:	08003465 	.word	0x08003465
 800341c:	08003465 	.word	0x08003465
 8003420:	08003455 	.word	0x08003455
 8003424:	08003465 	.word	0x08003465
 8003428:	08003465 	.word	0x08003465
 800342c:	08003465 	.word	0x08003465
 8003430:	0800344d 	.word	0x0800344d
 8003434:	08003465 	.word	0x08003465
 8003438:	08003465 	.word	0x08003465
 800343c:	08003465 	.word	0x08003465
 8003440:	0800345d 	.word	0x0800345d
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344a:	e0d8      	b.n	80035fe <UART_SetConfig+0x2e6>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003452:	e0d4      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345a:	e0d0      	b.n	80035fe <UART_SetConfig+0x2e6>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003462:	e0cc      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346a:	e0c8      	b.n	80035fe <UART_SetConfig+0x2e6>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5e      	ldr	r2, [pc, #376]	@ (80035ec <UART_SetConfig+0x2d4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d125      	bne.n	80034c2 <UART_SetConfig+0x1aa>
 8003476:	4b5b      	ldr	r3, [pc, #364]	@ (80035e4 <UART_SetConfig+0x2cc>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003480:	2b30      	cmp	r3, #48	@ 0x30
 8003482:	d016      	beq.n	80034b2 <UART_SetConfig+0x19a>
 8003484:	2b30      	cmp	r3, #48	@ 0x30
 8003486:	d818      	bhi.n	80034ba <UART_SetConfig+0x1a2>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d00a      	beq.n	80034a2 <UART_SetConfig+0x18a>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d814      	bhi.n	80034ba <UART_SetConfig+0x1a2>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <UART_SetConfig+0x182>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d008      	beq.n	80034aa <UART_SetConfig+0x192>
 8003498:	e00f      	b.n	80034ba <UART_SetConfig+0x1a2>
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a0:	e0ad      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034a2:	2302      	movs	r3, #2
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a8:	e0a9      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034aa:	2304      	movs	r3, #4
 80034ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b0:	e0a5      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034b2:	2308      	movs	r3, #8
 80034b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b8:	e0a1      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034ba:	2310      	movs	r3, #16
 80034bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c0:	e09d      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4a      	ldr	r2, [pc, #296]	@ (80035f0 <UART_SetConfig+0x2d8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <UART_SetConfig+0x200>
 80034cc:	4b45      	ldr	r3, [pc, #276]	@ (80035e4 <UART_SetConfig+0x2cc>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034d8:	d016      	beq.n	8003508 <UART_SetConfig+0x1f0>
 80034da:	2bc0      	cmp	r3, #192	@ 0xc0
 80034dc:	d818      	bhi.n	8003510 <UART_SetConfig+0x1f8>
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d00a      	beq.n	80034f8 <UART_SetConfig+0x1e0>
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d814      	bhi.n	8003510 <UART_SetConfig+0x1f8>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <UART_SetConfig+0x1d8>
 80034ea:	2b40      	cmp	r3, #64	@ 0x40
 80034ec:	d008      	beq.n	8003500 <UART_SetConfig+0x1e8>
 80034ee:	e00f      	b.n	8003510 <UART_SetConfig+0x1f8>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f6:	e082      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fe:	e07e      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003506:	e07a      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350e:	e076      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003516:	e072      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a35      	ldr	r2, [pc, #212]	@ (80035f4 <UART_SetConfig+0x2dc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12a      	bne.n	8003578 <UART_SetConfig+0x260>
 8003522:	4b30      	ldr	r3, [pc, #192]	@ (80035e4 <UART_SetConfig+0x2cc>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003530:	d01a      	beq.n	8003568 <UART_SetConfig+0x250>
 8003532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003536:	d81b      	bhi.n	8003570 <UART_SetConfig+0x258>
 8003538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800353c:	d00c      	beq.n	8003558 <UART_SetConfig+0x240>
 800353e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003542:	d815      	bhi.n	8003570 <UART_SetConfig+0x258>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <UART_SetConfig+0x238>
 8003548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354c:	d008      	beq.n	8003560 <UART_SetConfig+0x248>
 800354e:	e00f      	b.n	8003570 <UART_SetConfig+0x258>
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003556:	e052      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003558:	2302      	movs	r3, #2
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355e:	e04e      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003560:	2304      	movs	r3, #4
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003566:	e04a      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003568:	2308      	movs	r3, #8
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800356e:	e046      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003570:	2310      	movs	r3, #16
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003576:	e042      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a17      	ldr	r2, [pc, #92]	@ (80035dc <UART_SetConfig+0x2c4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d13a      	bne.n	80035f8 <UART_SetConfig+0x2e0>
 8003582:	4b18      	ldr	r3, [pc, #96]	@ (80035e4 <UART_SetConfig+0x2cc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003588:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800358c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003590:	d01a      	beq.n	80035c8 <UART_SetConfig+0x2b0>
 8003592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003596:	d81b      	bhi.n	80035d0 <UART_SetConfig+0x2b8>
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800359c:	d00c      	beq.n	80035b8 <UART_SetConfig+0x2a0>
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a2:	d815      	bhi.n	80035d0 <UART_SetConfig+0x2b8>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <UART_SetConfig+0x298>
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ac:	d008      	beq.n	80035c0 <UART_SetConfig+0x2a8>
 80035ae:	e00f      	b.n	80035d0 <UART_SetConfig+0x2b8>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b6:	e022      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035be:	e01e      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035c0:	2304      	movs	r3, #4
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c6:	e01a      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035c8:	2308      	movs	r3, #8
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ce:	e016      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035d0:	2310      	movs	r3, #16
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d6:	e012      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035d8:	efff69f3 	.word	0xefff69f3
 80035dc:	40008000 	.word	0x40008000
 80035e0:	40013800 	.word	0x40013800
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40004400 	.word	0x40004400
 80035ec:	40004800 	.word	0x40004800
 80035f0:	40004c00 	.word	0x40004c00
 80035f4:	40005000 	.word	0x40005000
 80035f8:	2310      	movs	r3, #16
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a9f      	ldr	r2, [pc, #636]	@ (8003880 <UART_SetConfig+0x568>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d17a      	bne.n	80036fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800360c:	2b08      	cmp	r3, #8
 800360e:	d824      	bhi.n	800365a <UART_SetConfig+0x342>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <UART_SetConfig+0x300>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800363d 	.word	0x0800363d
 800361c:	0800365b 	.word	0x0800365b
 8003620:	08003645 	.word	0x08003645
 8003624:	0800365b 	.word	0x0800365b
 8003628:	0800364b 	.word	0x0800364b
 800362c:	0800365b 	.word	0x0800365b
 8003630:	0800365b 	.word	0x0800365b
 8003634:	0800365b 	.word	0x0800365b
 8003638:	08003653 	.word	0x08003653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363c:	f7fe fd42 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 8003640:	61f8      	str	r0, [r7, #28]
        break;
 8003642:	e010      	b.n	8003666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b8f      	ldr	r3, [pc, #572]	@ (8003884 <UART_SetConfig+0x56c>)
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e00d      	b.n	8003666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7fe fca3 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 800364e:	61f8      	str	r0, [r7, #28]
        break;
 8003650:	e009      	b.n	8003666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003656:	61fb      	str	r3, [r7, #28]
        break;
 8003658:	e005      	b.n	8003666 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80fb 	beq.w	8003864 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	429a      	cmp	r2, r3
 800367c:	d305      	bcc.n	800368a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	429a      	cmp	r2, r3
 8003688:	d903      	bls.n	8003692 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003690:	e0e8      	b.n	8003864 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2200      	movs	r2, #0
 8003696:	461c      	mov	r4, r3
 8003698:	4615      	mov	r5, r2
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	022b      	lsls	r3, r5, #8
 80036a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036a8:	0222      	lsls	r2, r4, #8
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6849      	ldr	r1, [r1, #4]
 80036ae:	0849      	lsrs	r1, r1, #1
 80036b0:	2000      	movs	r0, #0
 80036b2:	4688      	mov	r8, r1
 80036b4:	4681      	mov	r9, r0
 80036b6:	eb12 0a08 	adds.w	sl, r2, r8
 80036ba:	eb43 0b09 	adc.w	fp, r3, r9
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036cc:	4650      	mov	r0, sl
 80036ce:	4659      	mov	r1, fp
 80036d0:	f7fc fd7a 	bl	80001c8 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e2:	d308      	bcc.n	80036f6 <UART_SetConfig+0x3de>
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ea:	d204      	bcs.n	80036f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	e0b6      	b.n	8003864 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036fc:	e0b2      	b.n	8003864 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003706:	d15e      	bne.n	80037c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003708:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800370c:	2b08      	cmp	r3, #8
 800370e:	d828      	bhi.n	8003762 <UART_SetConfig+0x44a>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <UART_SetConfig+0x400>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800373d 	.word	0x0800373d
 800371c:	08003745 	.word	0x08003745
 8003720:	0800374d 	.word	0x0800374d
 8003724:	08003763 	.word	0x08003763
 8003728:	08003753 	.word	0x08003753
 800372c:	08003763 	.word	0x08003763
 8003730:	08003763 	.word	0x08003763
 8003734:	08003763 	.word	0x08003763
 8003738:	0800375b 	.word	0x0800375b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800373c:	f7fe fcc2 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 8003740:	61f8      	str	r0, [r7, #28]
        break;
 8003742:	e014      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7fe fcd4 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8003748:	61f8      	str	r0, [r7, #28]
        break;
 800374a:	e010      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800374c:	4b4d      	ldr	r3, [pc, #308]	@ (8003884 <UART_SetConfig+0x56c>)
 800374e:	61fb      	str	r3, [r7, #28]
        break;
 8003750:	e00d      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003752:	f7fe fc1f 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8003756:	61f8      	str	r0, [r7, #28]
        break;
 8003758:	e009      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800375e:	61fb      	str	r3, [r7, #28]
        break;
 8003760:	e005      	b.n	800376e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800376c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d077      	beq.n	8003864 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005a      	lsls	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	441a      	add	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d916      	bls.n	80037be <UART_SetConfig+0x4a6>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003796:	d212      	bcs.n	80037be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f023 030f 	bic.w	r3, r3, #15
 80037a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	8afb      	ldrh	r3, [r7, #22]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	8afa      	ldrh	r2, [r7, #22]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e052      	b.n	8003864 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037c4:	e04e      	b.n	8003864 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d827      	bhi.n	800381e <UART_SetConfig+0x506>
 80037ce:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <UART_SetConfig+0x4bc>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fc64 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 80037fc:	61f8      	str	r0, [r7, #28]
        break;
 80037fe:	e014      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fc76 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8003804:	61f8      	str	r0, [r7, #28]
        break;
 8003806:	e010      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <UART_SetConfig+0x56c>)
 800380a:	61fb      	str	r3, [r7, #28]
        break;
 800380c:	e00d      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe fbc1 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8003812:	61f8      	str	r0, [r7, #28]
        break;
 8003814:	e009      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381a:	61fb      	str	r3, [r7, #28]
        break;
 800381c:	e005      	b.n	800382a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003828:	bf00      	nop
    }

    if (pclk != 0U)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d019      	beq.n	8003864 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	085a      	lsrs	r2, r3, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	441a      	add	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d909      	bls.n	800385e <UART_SetConfig+0x546>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d205      	bcs.n	800385e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e002      	b.n	8003864 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003870:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003874:	4618      	mov	r0, r3
 8003876:	3728      	adds	r7, #40	@ 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	40008000 	.word	0x40008000
 8003884:	00f42400 	.word	0x00f42400

08003888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01a      	beq.n	800399e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003986:	d10a      	bne.n	800399e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b098      	sub	sp, #96	@ 0x60
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039dc:	f7fd f9e6 	bl	8000dac <HAL_GetTick>
 80039e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d12e      	bne.n	8003a4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	2200      	movs	r2, #0
 80039fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f88c 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d021      	beq.n	8003a4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e6      	bne.n	8003a0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e062      	b.n	8003b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d149      	bne.n	8003af0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a64:	2200      	movs	r2, #0
 8003a66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f856 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03c      	beq.n	8003af0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	623b      	str	r3, [r7, #32]
   return(result);
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e6      	bne.n	8003a76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ac8:	61fa      	str	r2, [r7, #28]
 8003aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e011      	b.n	8003b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3758      	adds	r7, #88	@ 0x58
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2c:	e049      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d045      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fd f939 	bl	8000dac <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e048      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d031      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d110      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2208      	movs	r2, #8
 8003b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f838 	bl	8003bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e029      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9c:	d111      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f81e 	bl	8003bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e00f      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d0a6      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b095      	sub	sp, #84	@ 0x54
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e6      	bne.n	8003bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d118      	bne.n	8003c92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 0310 	bic.w	r3, r3, #16
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e6      	bne.n	8003c60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ca6:	bf00      	nop
 8003ca8:	3754      	adds	r7, #84	@ 0x54
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fb0b 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b088      	sub	sp, #32
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6979      	ldr	r1, [r7, #20]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	613b      	str	r3, [r7, #16]
   return(result);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fad7 	bl	80032d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2a:	bf00      	nop
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <memset>:
 8003d46:	4402      	add	r2, r0
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d100      	bne.n	8003d50 <memset+0xa>
 8003d4e:	4770      	bx	lr
 8003d50:	f803 1b01 	strb.w	r1, [r3], #1
 8003d54:	e7f9      	b.n	8003d4a <memset+0x4>
	...

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d90 <__libc_init_array+0x38>)
 8003d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d94 <__libc_init_array+0x3c>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	2600      	movs	r6, #0
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	4d0b      	ldr	r5, [pc, #44]	@ (8003d98 <__libc_init_array+0x40>)
 8003d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d9c <__libc_init_array+0x44>)
 8003d6c:	f000 f818 	bl	8003da0 <_init>
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	2600      	movs	r6, #0
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	08003e08 	.word	0x08003e08
 8003d94:	08003e08 	.word	0x08003e08
 8003d98:	08003e08 	.word	0x08003e08
 8003d9c:	08003e0c 	.word	0x08003e0c

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
