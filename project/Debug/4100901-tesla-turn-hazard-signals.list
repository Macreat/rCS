
4100901-tesla-turn-hazard-signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000127c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800140c  0800140c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800147c  0800147c  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  0800147c  0800147c  0000247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001484  08001484  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001484  08001484  00002484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001488  08001488  00002488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800148c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  080014ec  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080014ec  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003197  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ade  00000000  00000000  00006227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00006d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000025f  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b65  00000000  00000000  000072bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003edb  00000000  00000000  0002ce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7814  00000000  00000000  00030cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001304  00000000  00000000  00118558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080013f4 	.word	0x080013f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080013f4 	.word	0x080013f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <little_to_big_endian>:
//definition of the function

/* Function to convert from little-endian to big-endian
/ Input: a 32-bit unsigned integer in little-endian format
Output: a 32-bit unsigned integer in big-endian format */
uint32_t little_to_big_endian(uint32_t little_endian_value) {
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    uint32_t byte0, byte1, byte2, byte3;

    // Extract individual bytes from the little-endian value
    // The mask (0x000000FF, 0x0000FF00, etc.) isolates each byte
    // The shift (>>, <<) moves bytes to the correct position
    byte0 = (little_endian_value & 0x000000FF) >> 0;  // Extract byte 0 (least significant byte)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	617b      	str	r3, [r7, #20]
    byte1 = (little_endian_value & 0x0000FF00) >> 8;  // Extract byte 1
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	0a1b      	lsrs	r3, r3, #8
 8000282:	b2db      	uxtb	r3, r3
 8000284:	613b      	str	r3, [r7, #16]
    byte2 = (little_endian_value & 0x00FF0000) >> 16; // Extract byte 2
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	0c1b      	lsrs	r3, r3, #16
 800028a:	b2db      	uxtb	r3, r3
 800028c:	60fb      	str	r3, [r7, #12]
    byte3 = (little_endian_value & 0xFF000000) >> 24; // Extract byte 3 (most significant byte)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	0e1b      	lsrs	r3, r3, #24
 8000292:	60bb      	str	r3, [r7, #8]

    // Rearrange the bytes in big-endian order
    // The bytes are shifted to their new positions and combined using bitwise OR (|)
    // Byte0 becomes the most significant byte, and byte3 becomes the least significant
    return (byte0 << 24) | (byte1 << 16) | (byte2 << 8) | (byte3 << 0);
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	061a      	lsls	r2, r3, #24
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	041b      	lsls	r3, r3, #16
 800029c:	431a      	orrs	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	431a      	orrs	r2, r3
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4313      	orrs	r3, r2
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	371c      	adds	r7, #28
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t little_endian_value = 0x12345678;  // Example little-endian value
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <main+0x2c>)
 80002bc:	607b      	str	r3, [r7, #4]
	uint32_t big_endian_value;

	    // Convert the little-endian value to big-endian format
	big_endian_value = little_to_big_endian(little_endian_value);
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ffd6 	bl	8000270 <little_to_big_endian>
 80002c4:	6038      	str	r0, [r7, #0]

	    // Print the original little-endian value
	    // The format specifier %08X ensures the output is 8 digits wide, padded with zeros if necessary
	printf("Little-endian value: 0x%08lX\n", little_endian_value);
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	4806      	ldr	r0, [pc, #24]	@ (80002e4 <main+0x30>)
 80002ca:	f000 fa25 	bl	8000718 <iprintf>

	    // Print on console the converted big-endian value
	printf("Big-endian value: 0x%08lX\n", big_endian_value);
 80002ce:	6839      	ldr	r1, [r7, #0]
 80002d0:	4805      	ldr	r0, [pc, #20]	@ (80002e8 <main+0x34>)
 80002d2:	f000 fa21 	bl	8000718 <iprintf>

	return 0;  // end
 80002d6:	2300      	movs	r3, #0



  }
  /* USER CODE END 3 */
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	12345678 	.word	0x12345678
 80002e4:	0800140c 	.word	0x0800140c
 80002e8:	0800142c 	.word	0x0800142c

080002ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <NMI_Handler+0x4>

080002f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <HardFault_Handler+0x4>

080002fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <MemManage_Handler+0x4>

08000304 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <BusFault_Handler+0x4>

0800030c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <UsageFault_Handler+0x4>

08000314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000342:	f000 f8ef 	bl	8000524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}

0800034a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 800034e:	2002      	movs	r0, #2
 8000350:	f000 f8fc 	bl	800054c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}

08000358 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 800035c:	2010      	movs	r0, #16
 800035e:	f000 f8f5 	bl	800054c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}

08000366 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b086      	sub	sp, #24
 800036a:	af00      	add	r7, sp, #0
 800036c:	60f8      	str	r0, [r7, #12]
 800036e:	60b9      	str	r1, [r7, #8]
 8000370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	e00a      	b.n	800038e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000378:	f3af 8000 	nop.w
 800037c:	4601      	mov	r1, r0
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	60ba      	str	r2, [r7, #8]
 8000384:	b2ca      	uxtb	r2, r1
 8000386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	3301      	adds	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
 800038e:	697a      	ldr	r2, [r7, #20]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	429a      	cmp	r2, r3
 8000394:	dbf0      	blt.n	8000378 <_read+0x12>
  }

  return len;
 8000396:	687b      	ldr	r3, [r7, #4]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e009      	b.n	80003c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	1c5a      	adds	r2, r3, #1
 80003b6:	60ba      	str	r2, [r7, #8]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	3301      	adds	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	dbf1      	blt.n	80003b2 <_write+0x12>
  }
  return len;
 80003ce:	687b      	ldr	r3, [r7, #4]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <_close>:

int _close(int file)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000400:	605a      	str	r2, [r3, #4]
  return 0;
 8000402:	2300      	movs	r3, #0
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <_isatty>:

int _isatty(int file)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000418:	2301      	movs	r3, #1
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000426:	b480      	push	{r7}
 8000428:	b085      	sub	sp, #20
 800042a:	af00      	add	r7, sp, #0
 800042c:	60f8      	str	r0, [r7, #12]
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000432:	2300      	movs	r3, #0
}
 8000434:	4618      	mov	r0, r3
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000448:	4a14      	ldr	r2, [pc, #80]	@ (800049c <_sbrk+0x5c>)
 800044a:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <_sbrk+0x60>)
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <_sbrk+0x64>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d102      	bne.n	8000462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <_sbrk+0x64>)
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <_sbrk+0x68>)
 8000460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <_sbrk+0x64>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	693a      	ldr	r2, [r7, #16]
 800046c:	429a      	cmp	r2, r3
 800046e:	d207      	bcs.n	8000480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000470:	f000 f9f6 	bl	8000860 <__errno>
 8000474:	4603      	mov	r3, r0
 8000476:	220c      	movs	r2, #12
 8000478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047a:	f04f 33ff 	mov.w	r3, #4294967295
 800047e:	e009      	b.n	8000494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000480:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000486:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <_sbrk+0x64>)
 8000490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000492:	68fb      	ldr	r3, [r7, #12]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20018000 	.word	0x20018000
 80004a0:	00000400 	.word	0x00000400
 80004a4:	2000007c 	.word	0x2000007c
 80004a8:	200001d0 	.word	0x200001d0

080004ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <SystemInit+0x20>)
 80004b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004b6:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <SystemInit+0x20>)
 80004b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000508 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d4:	f7ff ffea 	bl	80004ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fe:	f000 f9b5 	bl	800086c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000502:	f7ff fed7 	bl	80002b4 <main>

08000506 <LoopForever>:

LoopForever:
    b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000508:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000514:	0800148c 	.word	0x0800148c
  ldr r2, =_sbss
 8000518:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800051c:	200001d0 	.word	0x200001d0

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000080 	.word	0x20000080

0800054c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	4013      	ands	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d006      	beq.n	8000570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000564:	88fb      	ldrh	r3, [r7, #6]
 8000566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f806 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40010400 	.word	0x40010400

0800057c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <std>:
 8000594:	2300      	movs	r3, #0
 8000596:	b510      	push	{r4, lr}
 8000598:	4604      	mov	r4, r0
 800059a:	e9c0 3300 	strd	r3, r3, [r0]
 800059e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005a2:	6083      	str	r3, [r0, #8]
 80005a4:	8181      	strh	r1, [r0, #12]
 80005a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80005a8:	81c2      	strh	r2, [r0, #14]
 80005aa:	6183      	str	r3, [r0, #24]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2208      	movs	r2, #8
 80005b0:	305c      	adds	r0, #92	@ 0x5c
 80005b2:	f000 f906 	bl	80007c2 <memset>
 80005b6:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <std+0x58>)
 80005b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <std+0x5c>)
 80005bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005be:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <std+0x60>)
 80005c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <std+0x64>)
 80005c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <std+0x68>)
 80005c8:	6224      	str	r4, [r4, #32]
 80005ca:	429c      	cmp	r4, r3
 80005cc:	d006      	beq.n	80005dc <std+0x48>
 80005ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005d2:	4294      	cmp	r4, r2
 80005d4:	d002      	beq.n	80005dc <std+0x48>
 80005d6:	33d0      	adds	r3, #208	@ 0xd0
 80005d8:	429c      	cmp	r4, r3
 80005da:	d105      	bne.n	80005e8 <std+0x54>
 80005dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005e4:	f000 b966 	b.w	80008b4 <__retarget_lock_init_recursive>
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	bf00      	nop
 80005ec:	0800073d 	.word	0x0800073d
 80005f0:	0800075f 	.word	0x0800075f
 80005f4:	08000797 	.word	0x08000797
 80005f8:	080007bb 	.word	0x080007bb
 80005fc:	20000084 	.word	0x20000084

08000600 <stdio_exit_handler>:
 8000600:	4a02      	ldr	r2, [pc, #8]	@ (800060c <stdio_exit_handler+0xc>)
 8000602:	4903      	ldr	r1, [pc, #12]	@ (8000610 <stdio_exit_handler+0x10>)
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <stdio_exit_handler+0x14>)
 8000606:	f000 b869 	b.w	80006dc <_fwalk_sglue>
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004
 8000610:	08001155 	.word	0x08001155
 8000614:	20000014 	.word	0x20000014

08000618 <cleanup_stdio>:
 8000618:	6841      	ldr	r1, [r0, #4]
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <cleanup_stdio+0x34>)
 800061c:	4299      	cmp	r1, r3
 800061e:	b510      	push	{r4, lr}
 8000620:	4604      	mov	r4, r0
 8000622:	d001      	beq.n	8000628 <cleanup_stdio+0x10>
 8000624:	f000 fd96 	bl	8001154 <_fflush_r>
 8000628:	68a1      	ldr	r1, [r4, #8]
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <cleanup_stdio+0x38>)
 800062c:	4299      	cmp	r1, r3
 800062e:	d002      	beq.n	8000636 <cleanup_stdio+0x1e>
 8000630:	4620      	mov	r0, r4
 8000632:	f000 fd8f 	bl	8001154 <_fflush_r>
 8000636:	68e1      	ldr	r1, [r4, #12]
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <cleanup_stdio+0x3c>)
 800063a:	4299      	cmp	r1, r3
 800063c:	d004      	beq.n	8000648 <cleanup_stdio+0x30>
 800063e:	4620      	mov	r0, r4
 8000640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000644:	f000 bd86 	b.w	8001154 <_fflush_r>
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	20000084 	.word	0x20000084
 8000650:	200000ec 	.word	0x200000ec
 8000654:	20000154 	.word	0x20000154

08000658 <global_stdio_init.part.0>:
 8000658:	b510      	push	{r4, lr}
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <global_stdio_init.part.0+0x30>)
 800065c:	4c0b      	ldr	r4, [pc, #44]	@ (800068c <global_stdio_init.part.0+0x34>)
 800065e:	4a0c      	ldr	r2, [pc, #48]	@ (8000690 <global_stdio_init.part.0+0x38>)
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	4620      	mov	r0, r4
 8000664:	2200      	movs	r2, #0
 8000666:	2104      	movs	r1, #4
 8000668:	f7ff ff94 	bl	8000594 <std>
 800066c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000670:	2201      	movs	r2, #1
 8000672:	2109      	movs	r1, #9
 8000674:	f7ff ff8e 	bl	8000594 <std>
 8000678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800067c:	2202      	movs	r2, #2
 800067e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000682:	2112      	movs	r1, #18
 8000684:	f7ff bf86 	b.w	8000594 <std>
 8000688:	200001bc 	.word	0x200001bc
 800068c:	20000084 	.word	0x20000084
 8000690:	08000601 	.word	0x08000601

08000694 <__sfp_lock_acquire>:
 8000694:	4801      	ldr	r0, [pc, #4]	@ (800069c <__sfp_lock_acquire+0x8>)
 8000696:	f000 b90e 	b.w	80008b6 <__retarget_lock_acquire_recursive>
 800069a:	bf00      	nop
 800069c:	200001c5 	.word	0x200001c5

080006a0 <__sfp_lock_release>:
 80006a0:	4801      	ldr	r0, [pc, #4]	@ (80006a8 <__sfp_lock_release+0x8>)
 80006a2:	f000 b909 	b.w	80008b8 <__retarget_lock_release_recursive>
 80006a6:	bf00      	nop
 80006a8:	200001c5 	.word	0x200001c5

080006ac <__sinit>:
 80006ac:	b510      	push	{r4, lr}
 80006ae:	4604      	mov	r4, r0
 80006b0:	f7ff fff0 	bl	8000694 <__sfp_lock_acquire>
 80006b4:	6a23      	ldr	r3, [r4, #32]
 80006b6:	b11b      	cbz	r3, 80006c0 <__sinit+0x14>
 80006b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006bc:	f7ff bff0 	b.w	80006a0 <__sfp_lock_release>
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <__sinit+0x28>)
 80006c2:	6223      	str	r3, [r4, #32]
 80006c4:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <__sinit+0x2c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1f5      	bne.n	80006b8 <__sinit+0xc>
 80006cc:	f7ff ffc4 	bl	8000658 <global_stdio_init.part.0>
 80006d0:	e7f2      	b.n	80006b8 <__sinit+0xc>
 80006d2:	bf00      	nop
 80006d4:	08000619 	.word	0x08000619
 80006d8:	200001bc 	.word	0x200001bc

080006dc <_fwalk_sglue>:
 80006dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006e0:	4607      	mov	r7, r0
 80006e2:	4688      	mov	r8, r1
 80006e4:	4614      	mov	r4, r2
 80006e6:	2600      	movs	r6, #0
 80006e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006ec:	f1b9 0901 	subs.w	r9, r9, #1
 80006f0:	d505      	bpl.n	80006fe <_fwalk_sglue+0x22>
 80006f2:	6824      	ldr	r4, [r4, #0]
 80006f4:	2c00      	cmp	r4, #0
 80006f6:	d1f7      	bne.n	80006e8 <_fwalk_sglue+0xc>
 80006f8:	4630      	mov	r0, r6
 80006fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006fe:	89ab      	ldrh	r3, [r5, #12]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d907      	bls.n	8000714 <_fwalk_sglue+0x38>
 8000704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000708:	3301      	adds	r3, #1
 800070a:	d003      	beq.n	8000714 <_fwalk_sglue+0x38>
 800070c:	4629      	mov	r1, r5
 800070e:	4638      	mov	r0, r7
 8000710:	47c0      	blx	r8
 8000712:	4306      	orrs	r6, r0
 8000714:	3568      	adds	r5, #104	@ 0x68
 8000716:	e7e9      	b.n	80006ec <_fwalk_sglue+0x10>

08000718 <iprintf>:
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	b507      	push	{r0, r1, r2, lr}
 800071c:	4906      	ldr	r1, [pc, #24]	@ (8000738 <iprintf+0x20>)
 800071e:	ab04      	add	r3, sp, #16
 8000720:	6808      	ldr	r0, [r1, #0]
 8000722:	f853 2b04 	ldr.w	r2, [r3], #4
 8000726:	6881      	ldr	r1, [r0, #8]
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	f000 f9e9 	bl	8000b00 <_vfiprintf_r>
 800072e:	b003      	add	sp, #12
 8000730:	f85d eb04 	ldr.w	lr, [sp], #4
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr
 8000738:	20000010 	.word	0x20000010

0800073c <__sread>:
 800073c:	b510      	push	{r4, lr}
 800073e:	460c      	mov	r4, r1
 8000740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000744:	f000 f868 	bl	8000818 <_read_r>
 8000748:	2800      	cmp	r0, #0
 800074a:	bfab      	itete	ge
 800074c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800074e:	89a3      	ldrhlt	r3, [r4, #12]
 8000750:	181b      	addge	r3, r3, r0
 8000752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000756:	bfac      	ite	ge
 8000758:	6563      	strge	r3, [r4, #84]	@ 0x54
 800075a:	81a3      	strhlt	r3, [r4, #12]
 800075c:	bd10      	pop	{r4, pc}

0800075e <__swrite>:
 800075e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000762:	461f      	mov	r7, r3
 8000764:	898b      	ldrh	r3, [r1, #12]
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	4605      	mov	r5, r0
 800076a:	460c      	mov	r4, r1
 800076c:	4616      	mov	r6, r2
 800076e:	d505      	bpl.n	800077c <__swrite+0x1e>
 8000770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000774:	2302      	movs	r3, #2
 8000776:	2200      	movs	r2, #0
 8000778:	f000 f83c 	bl	80007f4 <_lseek_r>
 800077c:	89a3      	ldrh	r3, [r4, #12]
 800077e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000786:	81a3      	strh	r3, [r4, #12]
 8000788:	4632      	mov	r2, r6
 800078a:	463b      	mov	r3, r7
 800078c:	4628      	mov	r0, r5
 800078e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000792:	f000 b853 	b.w	800083c <_write_r>

08000796 <__sseek>:
 8000796:	b510      	push	{r4, lr}
 8000798:	460c      	mov	r4, r1
 800079a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800079e:	f000 f829 	bl	80007f4 <_lseek_r>
 80007a2:	1c43      	adds	r3, r0, #1
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	bf15      	itete	ne
 80007a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007b2:	81a3      	strheq	r3, [r4, #12]
 80007b4:	bf18      	it	ne
 80007b6:	81a3      	strhne	r3, [r4, #12]
 80007b8:	bd10      	pop	{r4, pc}

080007ba <__sclose>:
 80007ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007be:	f000 b809 	b.w	80007d4 <_close_r>

080007c2 <memset>:
 80007c2:	4402      	add	r2, r0
 80007c4:	4603      	mov	r3, r0
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d100      	bne.n	80007cc <memset+0xa>
 80007ca:	4770      	bx	lr
 80007cc:	f803 1b01 	strb.w	r1, [r3], #1
 80007d0:	e7f9      	b.n	80007c6 <memset+0x4>
	...

080007d4 <_close_r>:
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	4d06      	ldr	r5, [pc, #24]	@ (80007f0 <_close_r+0x1c>)
 80007d8:	2300      	movs	r3, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	602b      	str	r3, [r5, #0]
 80007e0:	f7ff fdfa 	bl	80003d8 <_close>
 80007e4:	1c43      	adds	r3, r0, #1
 80007e6:	d102      	bne.n	80007ee <_close_r+0x1a>
 80007e8:	682b      	ldr	r3, [r5, #0]
 80007ea:	b103      	cbz	r3, 80007ee <_close_r+0x1a>
 80007ec:	6023      	str	r3, [r4, #0]
 80007ee:	bd38      	pop	{r3, r4, r5, pc}
 80007f0:	200001c0 	.word	0x200001c0

080007f4 <_lseek_r>:
 80007f4:	b538      	push	{r3, r4, r5, lr}
 80007f6:	4d07      	ldr	r5, [pc, #28]	@ (8000814 <_lseek_r+0x20>)
 80007f8:	4604      	mov	r4, r0
 80007fa:	4608      	mov	r0, r1
 80007fc:	4611      	mov	r1, r2
 80007fe:	2200      	movs	r2, #0
 8000800:	602a      	str	r2, [r5, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	f7ff fe0f 	bl	8000426 <_lseek>
 8000808:	1c43      	adds	r3, r0, #1
 800080a:	d102      	bne.n	8000812 <_lseek_r+0x1e>
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	b103      	cbz	r3, 8000812 <_lseek_r+0x1e>
 8000810:	6023      	str	r3, [r4, #0]
 8000812:	bd38      	pop	{r3, r4, r5, pc}
 8000814:	200001c0 	.word	0x200001c0

08000818 <_read_r>:
 8000818:	b538      	push	{r3, r4, r5, lr}
 800081a:	4d07      	ldr	r5, [pc, #28]	@ (8000838 <_read_r+0x20>)
 800081c:	4604      	mov	r4, r0
 800081e:	4608      	mov	r0, r1
 8000820:	4611      	mov	r1, r2
 8000822:	2200      	movs	r2, #0
 8000824:	602a      	str	r2, [r5, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	f7ff fd9d 	bl	8000366 <_read>
 800082c:	1c43      	adds	r3, r0, #1
 800082e:	d102      	bne.n	8000836 <_read_r+0x1e>
 8000830:	682b      	ldr	r3, [r5, #0]
 8000832:	b103      	cbz	r3, 8000836 <_read_r+0x1e>
 8000834:	6023      	str	r3, [r4, #0]
 8000836:	bd38      	pop	{r3, r4, r5, pc}
 8000838:	200001c0 	.word	0x200001c0

0800083c <_write_r>:
 800083c:	b538      	push	{r3, r4, r5, lr}
 800083e:	4d07      	ldr	r5, [pc, #28]	@ (800085c <_write_r+0x20>)
 8000840:	4604      	mov	r4, r0
 8000842:	4608      	mov	r0, r1
 8000844:	4611      	mov	r1, r2
 8000846:	2200      	movs	r2, #0
 8000848:	602a      	str	r2, [r5, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	f7ff fda8 	bl	80003a0 <_write>
 8000850:	1c43      	adds	r3, r0, #1
 8000852:	d102      	bne.n	800085a <_write_r+0x1e>
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	b103      	cbz	r3, 800085a <_write_r+0x1e>
 8000858:	6023      	str	r3, [r4, #0]
 800085a:	bd38      	pop	{r3, r4, r5, pc}
 800085c:	200001c0 	.word	0x200001c0

08000860 <__errno>:
 8000860:	4b01      	ldr	r3, [pc, #4]	@ (8000868 <__errno+0x8>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000010 	.word	0x20000010

0800086c <__libc_init_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	4d0d      	ldr	r5, [pc, #52]	@ (80008a4 <__libc_init_array+0x38>)
 8000870:	4c0d      	ldr	r4, [pc, #52]	@ (80008a8 <__libc_init_array+0x3c>)
 8000872:	1b64      	subs	r4, r4, r5
 8000874:	10a4      	asrs	r4, r4, #2
 8000876:	2600      	movs	r6, #0
 8000878:	42a6      	cmp	r6, r4
 800087a:	d109      	bne.n	8000890 <__libc_init_array+0x24>
 800087c:	4d0b      	ldr	r5, [pc, #44]	@ (80008ac <__libc_init_array+0x40>)
 800087e:	4c0c      	ldr	r4, [pc, #48]	@ (80008b0 <__libc_init_array+0x44>)
 8000880:	f000 fdb8 	bl	80013f4 <_init>
 8000884:	1b64      	subs	r4, r4, r5
 8000886:	10a4      	asrs	r4, r4, #2
 8000888:	2600      	movs	r6, #0
 800088a:	42a6      	cmp	r6, r4
 800088c:	d105      	bne.n	800089a <__libc_init_array+0x2e>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f855 3b04 	ldr.w	r3, [r5], #4
 8000894:	4798      	blx	r3
 8000896:	3601      	adds	r6, #1
 8000898:	e7ee      	b.n	8000878 <__libc_init_array+0xc>
 800089a:	f855 3b04 	ldr.w	r3, [r5], #4
 800089e:	4798      	blx	r3
 80008a0:	3601      	adds	r6, #1
 80008a2:	e7f2      	b.n	800088a <__libc_init_array+0x1e>
 80008a4:	08001484 	.word	0x08001484
 80008a8:	08001484 	.word	0x08001484
 80008ac:	08001484 	.word	0x08001484
 80008b0:	08001488 	.word	0x08001488

080008b4 <__retarget_lock_init_recursive>:
 80008b4:	4770      	bx	lr

080008b6 <__retarget_lock_acquire_recursive>:
 80008b6:	4770      	bx	lr

080008b8 <__retarget_lock_release_recursive>:
 80008b8:	4770      	bx	lr
	...

080008bc <_free_r>:
 80008bc:	b538      	push	{r3, r4, r5, lr}
 80008be:	4605      	mov	r5, r0
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d041      	beq.n	8000948 <_free_r+0x8c>
 80008c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008c8:	1f0c      	subs	r4, r1, #4
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bfb8      	it	lt
 80008ce:	18e4      	addlt	r4, r4, r3
 80008d0:	f000 f8e0 	bl	8000a94 <__malloc_lock>
 80008d4:	4a1d      	ldr	r2, [pc, #116]	@ (800094c <_free_r+0x90>)
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	b933      	cbnz	r3, 80008e8 <_free_r+0x2c>
 80008da:	6063      	str	r3, [r4, #4]
 80008dc:	6014      	str	r4, [r2, #0]
 80008de:	4628      	mov	r0, r5
 80008e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008e4:	f000 b8dc 	b.w	8000aa0 <__malloc_unlock>
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d908      	bls.n	80008fe <_free_r+0x42>
 80008ec:	6820      	ldr	r0, [r4, #0]
 80008ee:	1821      	adds	r1, r4, r0
 80008f0:	428b      	cmp	r3, r1
 80008f2:	bf01      	itttt	eq
 80008f4:	6819      	ldreq	r1, [r3, #0]
 80008f6:	685b      	ldreq	r3, [r3, #4]
 80008f8:	1809      	addeq	r1, r1, r0
 80008fa:	6021      	streq	r1, [r4, #0]
 80008fc:	e7ed      	b.n	80008da <_free_r+0x1e>
 80008fe:	461a      	mov	r2, r3
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	b10b      	cbz	r3, 8000908 <_free_r+0x4c>
 8000904:	42a3      	cmp	r3, r4
 8000906:	d9fa      	bls.n	80008fe <_free_r+0x42>
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	1850      	adds	r0, r2, r1
 800090c:	42a0      	cmp	r0, r4
 800090e:	d10b      	bne.n	8000928 <_free_r+0x6c>
 8000910:	6820      	ldr	r0, [r4, #0]
 8000912:	4401      	add	r1, r0
 8000914:	1850      	adds	r0, r2, r1
 8000916:	4283      	cmp	r3, r0
 8000918:	6011      	str	r1, [r2, #0]
 800091a:	d1e0      	bne.n	80008de <_free_r+0x22>
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	6053      	str	r3, [r2, #4]
 8000922:	4408      	add	r0, r1
 8000924:	6010      	str	r0, [r2, #0]
 8000926:	e7da      	b.n	80008de <_free_r+0x22>
 8000928:	d902      	bls.n	8000930 <_free_r+0x74>
 800092a:	230c      	movs	r3, #12
 800092c:	602b      	str	r3, [r5, #0]
 800092e:	e7d6      	b.n	80008de <_free_r+0x22>
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	1821      	adds	r1, r4, r0
 8000934:	428b      	cmp	r3, r1
 8000936:	bf04      	itt	eq
 8000938:	6819      	ldreq	r1, [r3, #0]
 800093a:	685b      	ldreq	r3, [r3, #4]
 800093c:	6063      	str	r3, [r4, #4]
 800093e:	bf04      	itt	eq
 8000940:	1809      	addeq	r1, r1, r0
 8000942:	6021      	streq	r1, [r4, #0]
 8000944:	6054      	str	r4, [r2, #4]
 8000946:	e7ca      	b.n	80008de <_free_r+0x22>
 8000948:	bd38      	pop	{r3, r4, r5, pc}
 800094a:	bf00      	nop
 800094c:	200001cc 	.word	0x200001cc

08000950 <sbrk_aligned>:
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	4e0f      	ldr	r6, [pc, #60]	@ (8000990 <sbrk_aligned+0x40>)
 8000954:	460c      	mov	r4, r1
 8000956:	6831      	ldr	r1, [r6, #0]
 8000958:	4605      	mov	r5, r0
 800095a:	b911      	cbnz	r1, 8000962 <sbrk_aligned+0x12>
 800095c:	f000 fcb6 	bl	80012cc <_sbrk_r>
 8000960:	6030      	str	r0, [r6, #0]
 8000962:	4621      	mov	r1, r4
 8000964:	4628      	mov	r0, r5
 8000966:	f000 fcb1 	bl	80012cc <_sbrk_r>
 800096a:	1c43      	adds	r3, r0, #1
 800096c:	d103      	bne.n	8000976 <sbrk_aligned+0x26>
 800096e:	f04f 34ff 	mov.w	r4, #4294967295
 8000972:	4620      	mov	r0, r4
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	1cc4      	adds	r4, r0, #3
 8000978:	f024 0403 	bic.w	r4, r4, #3
 800097c:	42a0      	cmp	r0, r4
 800097e:	d0f8      	beq.n	8000972 <sbrk_aligned+0x22>
 8000980:	1a21      	subs	r1, r4, r0
 8000982:	4628      	mov	r0, r5
 8000984:	f000 fca2 	bl	80012cc <_sbrk_r>
 8000988:	3001      	adds	r0, #1
 800098a:	d1f2      	bne.n	8000972 <sbrk_aligned+0x22>
 800098c:	e7ef      	b.n	800096e <sbrk_aligned+0x1e>
 800098e:	bf00      	nop
 8000990:	200001c8 	.word	0x200001c8

08000994 <_malloc_r>:
 8000994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000998:	1ccd      	adds	r5, r1, #3
 800099a:	f025 0503 	bic.w	r5, r5, #3
 800099e:	3508      	adds	r5, #8
 80009a0:	2d0c      	cmp	r5, #12
 80009a2:	bf38      	it	cc
 80009a4:	250c      	movcc	r5, #12
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	4606      	mov	r6, r0
 80009aa:	db01      	blt.n	80009b0 <_malloc_r+0x1c>
 80009ac:	42a9      	cmp	r1, r5
 80009ae:	d904      	bls.n	80009ba <_malloc_r+0x26>
 80009b0:	230c      	movs	r3, #12
 80009b2:	6033      	str	r3, [r6, #0]
 80009b4:	2000      	movs	r0, #0
 80009b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a90 <_malloc_r+0xfc>
 80009be:	f000 f869 	bl	8000a94 <__malloc_lock>
 80009c2:	f8d8 3000 	ldr.w	r3, [r8]
 80009c6:	461c      	mov	r4, r3
 80009c8:	bb44      	cbnz	r4, 8000a1c <_malloc_r+0x88>
 80009ca:	4629      	mov	r1, r5
 80009cc:	4630      	mov	r0, r6
 80009ce:	f7ff ffbf 	bl	8000950 <sbrk_aligned>
 80009d2:	1c43      	adds	r3, r0, #1
 80009d4:	4604      	mov	r4, r0
 80009d6:	d158      	bne.n	8000a8a <_malloc_r+0xf6>
 80009d8:	f8d8 4000 	ldr.w	r4, [r8]
 80009dc:	4627      	mov	r7, r4
 80009de:	2f00      	cmp	r7, #0
 80009e0:	d143      	bne.n	8000a6a <_malloc_r+0xd6>
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d04b      	beq.n	8000a7e <_malloc_r+0xea>
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	4639      	mov	r1, r7
 80009ea:	4630      	mov	r0, r6
 80009ec:	eb04 0903 	add.w	r9, r4, r3
 80009f0:	f000 fc6c 	bl	80012cc <_sbrk_r>
 80009f4:	4581      	cmp	r9, r0
 80009f6:	d142      	bne.n	8000a7e <_malloc_r+0xea>
 80009f8:	6821      	ldr	r1, [r4, #0]
 80009fa:	1a6d      	subs	r5, r5, r1
 80009fc:	4629      	mov	r1, r5
 80009fe:	4630      	mov	r0, r6
 8000a00:	f7ff ffa6 	bl	8000950 <sbrk_aligned>
 8000a04:	3001      	adds	r0, #1
 8000a06:	d03a      	beq.n	8000a7e <_malloc_r+0xea>
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	442b      	add	r3, r5
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	bb62      	cbnz	r2, 8000a70 <_malloc_r+0xdc>
 8000a16:	f8c8 7000 	str.w	r7, [r8]
 8000a1a:	e00f      	b.n	8000a3c <_malloc_r+0xa8>
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	1b52      	subs	r2, r2, r5
 8000a20:	d420      	bmi.n	8000a64 <_malloc_r+0xd0>
 8000a22:	2a0b      	cmp	r2, #11
 8000a24:	d917      	bls.n	8000a56 <_malloc_r+0xc2>
 8000a26:	1961      	adds	r1, r4, r5
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	6025      	str	r5, [r4, #0]
 8000a2c:	bf18      	it	ne
 8000a2e:	6059      	strne	r1, [r3, #4]
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	bf08      	it	eq
 8000a34:	f8c8 1000 	streq.w	r1, [r8]
 8000a38:	5162      	str	r2, [r4, r5]
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	4630      	mov	r0, r6
 8000a3e:	f000 f82f 	bl	8000aa0 <__malloc_unlock>
 8000a42:	f104 000b 	add.w	r0, r4, #11
 8000a46:	1d23      	adds	r3, r4, #4
 8000a48:	f020 0007 	bic.w	r0, r0, #7
 8000a4c:	1ac2      	subs	r2, r0, r3
 8000a4e:	bf1c      	itt	ne
 8000a50:	1a1b      	subne	r3, r3, r0
 8000a52:	50a3      	strne	r3, [r4, r2]
 8000a54:	e7af      	b.n	80009b6 <_malloc_r+0x22>
 8000a56:	6862      	ldr	r2, [r4, #4]
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	bf0c      	ite	eq
 8000a5c:	f8c8 2000 	streq.w	r2, [r8]
 8000a60:	605a      	strne	r2, [r3, #4]
 8000a62:	e7eb      	b.n	8000a3c <_malloc_r+0xa8>
 8000a64:	4623      	mov	r3, r4
 8000a66:	6864      	ldr	r4, [r4, #4]
 8000a68:	e7ae      	b.n	80009c8 <_malloc_r+0x34>
 8000a6a:	463c      	mov	r4, r7
 8000a6c:	687f      	ldr	r7, [r7, #4]
 8000a6e:	e7b6      	b.n	80009de <_malloc_r+0x4a>
 8000a70:	461a      	mov	r2, r3
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d1fb      	bne.n	8000a70 <_malloc_r+0xdc>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	6053      	str	r3, [r2, #4]
 8000a7c:	e7de      	b.n	8000a3c <_malloc_r+0xa8>
 8000a7e:	230c      	movs	r3, #12
 8000a80:	6033      	str	r3, [r6, #0]
 8000a82:	4630      	mov	r0, r6
 8000a84:	f000 f80c 	bl	8000aa0 <__malloc_unlock>
 8000a88:	e794      	b.n	80009b4 <_malloc_r+0x20>
 8000a8a:	6005      	str	r5, [r0, #0]
 8000a8c:	e7d6      	b.n	8000a3c <_malloc_r+0xa8>
 8000a8e:	bf00      	nop
 8000a90:	200001cc 	.word	0x200001cc

08000a94 <__malloc_lock>:
 8000a94:	4801      	ldr	r0, [pc, #4]	@ (8000a9c <__malloc_lock+0x8>)
 8000a96:	f7ff bf0e 	b.w	80008b6 <__retarget_lock_acquire_recursive>
 8000a9a:	bf00      	nop
 8000a9c:	200001c4 	.word	0x200001c4

08000aa0 <__malloc_unlock>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	@ (8000aa8 <__malloc_unlock+0x8>)
 8000aa2:	f7ff bf09 	b.w	80008b8 <__retarget_lock_release_recursive>
 8000aa6:	bf00      	nop
 8000aa8:	200001c4 	.word	0x200001c4

08000aac <__sfputc_r>:
 8000aac:	6893      	ldr	r3, [r2, #8]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	b410      	push	{r4}
 8000ab4:	6093      	str	r3, [r2, #8]
 8000ab6:	da08      	bge.n	8000aca <__sfputc_r+0x1e>
 8000ab8:	6994      	ldr	r4, [r2, #24]
 8000aba:	42a3      	cmp	r3, r4
 8000abc:	db01      	blt.n	8000ac2 <__sfputc_r+0x16>
 8000abe:	290a      	cmp	r1, #10
 8000ac0:	d103      	bne.n	8000aca <__sfputc_r+0x1e>
 8000ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ac6:	f000 bb6d 	b.w	80011a4 <__swbuf_r>
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	1c58      	adds	r0, r3, #1
 8000ace:	6010      	str	r0, [r2, #0]
 8000ad0:	7019      	strb	r1, [r3, #0]
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <__sfputs_r>:
 8000ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000adc:	4606      	mov	r6, r0
 8000ade:	460f      	mov	r7, r1
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	18d5      	adds	r5, r2, r3
 8000ae4:	42ac      	cmp	r4, r5
 8000ae6:	d101      	bne.n	8000aec <__sfputs_r+0x12>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e007      	b.n	8000afc <__sfputs_r+0x22>
 8000aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000af0:	463a      	mov	r2, r7
 8000af2:	4630      	mov	r0, r6
 8000af4:	f7ff ffda 	bl	8000aac <__sfputc_r>
 8000af8:	1c43      	adds	r3, r0, #1
 8000afa:	d1f3      	bne.n	8000ae4 <__sfputs_r+0xa>
 8000afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b00 <_vfiprintf_r>:
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	460d      	mov	r5, r1
 8000b06:	b09d      	sub	sp, #116	@ 0x74
 8000b08:	4614      	mov	r4, r2
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	b118      	cbz	r0, 8000b18 <_vfiprintf_r+0x18>
 8000b10:	6a03      	ldr	r3, [r0, #32]
 8000b12:	b90b      	cbnz	r3, 8000b18 <_vfiprintf_r+0x18>
 8000b14:	f7ff fdca 	bl	80006ac <__sinit>
 8000b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b1a:	07d9      	lsls	r1, r3, #31
 8000b1c:	d405      	bmi.n	8000b2a <_vfiprintf_r+0x2a>
 8000b1e:	89ab      	ldrh	r3, [r5, #12]
 8000b20:	059a      	lsls	r2, r3, #22
 8000b22:	d402      	bmi.n	8000b2a <_vfiprintf_r+0x2a>
 8000b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b26:	f7ff fec6 	bl	80008b6 <__retarget_lock_acquire_recursive>
 8000b2a:	89ab      	ldrh	r3, [r5, #12]
 8000b2c:	071b      	lsls	r3, r3, #28
 8000b2e:	d501      	bpl.n	8000b34 <_vfiprintf_r+0x34>
 8000b30:	692b      	ldr	r3, [r5, #16]
 8000b32:	b99b      	cbnz	r3, 8000b5c <_vfiprintf_r+0x5c>
 8000b34:	4629      	mov	r1, r5
 8000b36:	4630      	mov	r0, r6
 8000b38:	f000 fb72 	bl	8001220 <__swsetup_r>
 8000b3c:	b170      	cbz	r0, 8000b5c <_vfiprintf_r+0x5c>
 8000b3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b40:	07dc      	lsls	r4, r3, #31
 8000b42:	d504      	bpl.n	8000b4e <_vfiprintf_r+0x4e>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	b01d      	add	sp, #116	@ 0x74
 8000b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b4e:	89ab      	ldrh	r3, [r5, #12]
 8000b50:	0598      	lsls	r0, r3, #22
 8000b52:	d4f7      	bmi.n	8000b44 <_vfiprintf_r+0x44>
 8000b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b56:	f7ff feaf 	bl	80008b8 <__retarget_lock_release_recursive>
 8000b5a:	e7f3      	b.n	8000b44 <_vfiprintf_r+0x44>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b60:	2320      	movs	r3, #32
 8000b62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b6a:	2330      	movs	r3, #48	@ 0x30
 8000b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000d1c <_vfiprintf_r+0x21c>
 8000b70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b74:	f04f 0901 	mov.w	r9, #1
 8000b78:	4623      	mov	r3, r4
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b80:	b10a      	cbz	r2, 8000b86 <_vfiprintf_r+0x86>
 8000b82:	2a25      	cmp	r2, #37	@ 0x25
 8000b84:	d1f9      	bne.n	8000b7a <_vfiprintf_r+0x7a>
 8000b86:	ebba 0b04 	subs.w	fp, sl, r4
 8000b8a:	d00b      	beq.n	8000ba4 <_vfiprintf_r+0xa4>
 8000b8c:	465b      	mov	r3, fp
 8000b8e:	4622      	mov	r2, r4
 8000b90:	4629      	mov	r1, r5
 8000b92:	4630      	mov	r0, r6
 8000b94:	f7ff ffa1 	bl	8000ada <__sfputs_r>
 8000b98:	3001      	adds	r0, #1
 8000b9a:	f000 80a7 	beq.w	8000cec <_vfiprintf_r+0x1ec>
 8000b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ba0:	445a      	add	r2, fp
 8000ba2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 809f 	beq.w	8000cec <_vfiprintf_r+0x1ec>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bb8:	f10a 0a01 	add.w	sl, sl, #1
 8000bbc:	9304      	str	r3, [sp, #16]
 8000bbe:	9307      	str	r3, [sp, #28]
 8000bc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bc6:	4654      	mov	r4, sl
 8000bc8:	2205      	movs	r2, #5
 8000bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bce:	4853      	ldr	r0, [pc, #332]	@ (8000d1c <_vfiprintf_r+0x21c>)
 8000bd0:	f7ff fafe 	bl	80001d0 <memchr>
 8000bd4:	9a04      	ldr	r2, [sp, #16]
 8000bd6:	b9d8      	cbnz	r0, 8000c10 <_vfiprintf_r+0x110>
 8000bd8:	06d1      	lsls	r1, r2, #27
 8000bda:	bf44      	itt	mi
 8000bdc:	2320      	movmi	r3, #32
 8000bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000be2:	0713      	lsls	r3, r2, #28
 8000be4:	bf44      	itt	mi
 8000be6:	232b      	movmi	r3, #43	@ 0x2b
 8000be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bec:	f89a 3000 	ldrb.w	r3, [sl]
 8000bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf2:	d015      	beq.n	8000c20 <_vfiprintf_r+0x120>
 8000bf4:	9a07      	ldr	r2, [sp, #28]
 8000bf6:	4654      	mov	r4, sl
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f04f 0c0a 	mov.w	ip, #10
 8000bfe:	4621      	mov	r1, r4
 8000c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c04:	3b30      	subs	r3, #48	@ 0x30
 8000c06:	2b09      	cmp	r3, #9
 8000c08:	d94b      	bls.n	8000ca2 <_vfiprintf_r+0x1a2>
 8000c0a:	b1b0      	cbz	r0, 8000c3a <_vfiprintf_r+0x13a>
 8000c0c:	9207      	str	r2, [sp, #28]
 8000c0e:	e014      	b.n	8000c3a <_vfiprintf_r+0x13a>
 8000c10:	eba0 0308 	sub.w	r3, r0, r8
 8000c14:	fa09 f303 	lsl.w	r3, r9, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	9304      	str	r3, [sp, #16]
 8000c1c:	46a2      	mov	sl, r4
 8000c1e:	e7d2      	b.n	8000bc6 <_vfiprintf_r+0xc6>
 8000c20:	9b03      	ldr	r3, [sp, #12]
 8000c22:	1d19      	adds	r1, r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	9103      	str	r1, [sp, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bfbb      	ittet	lt
 8000c2c:	425b      	neglt	r3, r3
 8000c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8000c32:	9307      	strge	r3, [sp, #28]
 8000c34:	9307      	strlt	r3, [sp, #28]
 8000c36:	bfb8      	it	lt
 8000c38:	9204      	strlt	r2, [sp, #16]
 8000c3a:	7823      	ldrb	r3, [r4, #0]
 8000c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c3e:	d10a      	bne.n	8000c56 <_vfiprintf_r+0x156>
 8000c40:	7863      	ldrb	r3, [r4, #1]
 8000c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c44:	d132      	bne.n	8000cac <_vfiprintf_r+0x1ac>
 8000c46:	9b03      	ldr	r3, [sp, #12]
 8000c48:	1d1a      	adds	r2, r3, #4
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	9203      	str	r2, [sp, #12]
 8000c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c52:	3402      	adds	r4, #2
 8000c54:	9305      	str	r3, [sp, #20]
 8000c56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000d2c <_vfiprintf_r+0x22c>
 8000c5a:	7821      	ldrb	r1, [r4, #0]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4650      	mov	r0, sl
 8000c60:	f7ff fab6 	bl	80001d0 <memchr>
 8000c64:	b138      	cbz	r0, 8000c76 <_vfiprintf_r+0x176>
 8000c66:	9b04      	ldr	r3, [sp, #16]
 8000c68:	eba0 000a 	sub.w	r0, r0, sl
 8000c6c:	2240      	movs	r2, #64	@ 0x40
 8000c6e:	4082      	lsls	r2, r0
 8000c70:	4313      	orrs	r3, r2
 8000c72:	3401      	adds	r4, #1
 8000c74:	9304      	str	r3, [sp, #16]
 8000c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c7a:	4829      	ldr	r0, [pc, #164]	@ (8000d20 <_vfiprintf_r+0x220>)
 8000c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c80:	2206      	movs	r2, #6
 8000c82:	f7ff faa5 	bl	80001d0 <memchr>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d03f      	beq.n	8000d0a <_vfiprintf_r+0x20a>
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <_vfiprintf_r+0x224>)
 8000c8c:	bb1b      	cbnz	r3, 8000cd6 <_vfiprintf_r+0x1d6>
 8000c8e:	9b03      	ldr	r3, [sp, #12]
 8000c90:	3307      	adds	r3, #7
 8000c92:	f023 0307 	bic.w	r3, r3, #7
 8000c96:	3308      	adds	r3, #8
 8000c98:	9303      	str	r3, [sp, #12]
 8000c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c9c:	443b      	add	r3, r7
 8000c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ca0:	e76a      	b.n	8000b78 <_vfiprintf_r+0x78>
 8000ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ca6:	460c      	mov	r4, r1
 8000ca8:	2001      	movs	r0, #1
 8000caa:	e7a8      	b.n	8000bfe <_vfiprintf_r+0xfe>
 8000cac:	2300      	movs	r3, #0
 8000cae:	3401      	adds	r4, #1
 8000cb0:	9305      	str	r3, [sp, #20]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 0c0a 	mov.w	ip, #10
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cbe:	3a30      	subs	r2, #48	@ 0x30
 8000cc0:	2a09      	cmp	r2, #9
 8000cc2:	d903      	bls.n	8000ccc <_vfiprintf_r+0x1cc>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0c6      	beq.n	8000c56 <_vfiprintf_r+0x156>
 8000cc8:	9105      	str	r1, [sp, #20]
 8000cca:	e7c4      	b.n	8000c56 <_vfiprintf_r+0x156>
 8000ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e7f0      	b.n	8000cb8 <_vfiprintf_r+0x1b8>
 8000cd6:	ab03      	add	r3, sp, #12
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	462a      	mov	r2, r5
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <_vfiprintf_r+0x228>)
 8000cde:	a904      	add	r1, sp, #16
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4607      	mov	r7, r0
 8000ce8:	1c78      	adds	r0, r7, #1
 8000cea:	d1d6      	bne.n	8000c9a <_vfiprintf_r+0x19a>
 8000cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cee:	07d9      	lsls	r1, r3, #31
 8000cf0:	d405      	bmi.n	8000cfe <_vfiprintf_r+0x1fe>
 8000cf2:	89ab      	ldrh	r3, [r5, #12]
 8000cf4:	059a      	lsls	r2, r3, #22
 8000cf6:	d402      	bmi.n	8000cfe <_vfiprintf_r+0x1fe>
 8000cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cfa:	f7ff fddd 	bl	80008b8 <__retarget_lock_release_recursive>
 8000cfe:	89ab      	ldrh	r3, [r5, #12]
 8000d00:	065b      	lsls	r3, r3, #25
 8000d02:	f53f af1f 	bmi.w	8000b44 <_vfiprintf_r+0x44>
 8000d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d08:	e71e      	b.n	8000b48 <_vfiprintf_r+0x48>
 8000d0a:	ab03      	add	r3, sp, #12
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	462a      	mov	r2, r5
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <_vfiprintf_r+0x228>)
 8000d12:	a904      	add	r1, sp, #16
 8000d14:	4630      	mov	r0, r6
 8000d16:	f000 f879 	bl	8000e0c <_printf_i>
 8000d1a:	e7e4      	b.n	8000ce6 <_vfiprintf_r+0x1e6>
 8000d1c:	08001447 	.word	0x08001447
 8000d20:	08001451 	.word	0x08001451
 8000d24:	00000000 	.word	0x00000000
 8000d28:	08000adb 	.word	0x08000adb
 8000d2c:	0800144d 	.word	0x0800144d

08000d30 <_printf_common>:
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d34:	4616      	mov	r6, r2
 8000d36:	4698      	mov	r8, r3
 8000d38:	688a      	ldr	r2, [r1, #8]
 8000d3a:	690b      	ldr	r3, [r1, #16]
 8000d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d40:	4293      	cmp	r3, r2
 8000d42:	bfb8      	it	lt
 8000d44:	4613      	movlt	r3, r2
 8000d46:	6033      	str	r3, [r6, #0]
 8000d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d4c:	4607      	mov	r7, r0
 8000d4e:	460c      	mov	r4, r1
 8000d50:	b10a      	cbz	r2, 8000d56 <_printf_common+0x26>
 8000d52:	3301      	adds	r3, #1
 8000d54:	6033      	str	r3, [r6, #0]
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	0699      	lsls	r1, r3, #26
 8000d5a:	bf42      	ittt	mi
 8000d5c:	6833      	ldrmi	r3, [r6, #0]
 8000d5e:	3302      	addmi	r3, #2
 8000d60:	6033      	strmi	r3, [r6, #0]
 8000d62:	6825      	ldr	r5, [r4, #0]
 8000d64:	f015 0506 	ands.w	r5, r5, #6
 8000d68:	d106      	bne.n	8000d78 <_printf_common+0x48>
 8000d6a:	f104 0a19 	add.w	sl, r4, #25
 8000d6e:	68e3      	ldr	r3, [r4, #12]
 8000d70:	6832      	ldr	r2, [r6, #0]
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	42ab      	cmp	r3, r5
 8000d76:	dc26      	bgt.n	8000dc6 <_printf_common+0x96>
 8000d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d7c:	6822      	ldr	r2, [r4, #0]
 8000d7e:	3b00      	subs	r3, #0
 8000d80:	bf18      	it	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	0692      	lsls	r2, r2, #26
 8000d86:	d42b      	bmi.n	8000de0 <_printf_common+0xb0>
 8000d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d8c:	4641      	mov	r1, r8
 8000d8e:	4638      	mov	r0, r7
 8000d90:	47c8      	blx	r9
 8000d92:	3001      	adds	r0, #1
 8000d94:	d01e      	beq.n	8000dd4 <_printf_common+0xa4>
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	6922      	ldr	r2, [r4, #16]
 8000d9a:	f003 0306 	and.w	r3, r3, #6
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf02      	ittt	eq
 8000da2:	68e5      	ldreq	r5, [r4, #12]
 8000da4:	6833      	ldreq	r3, [r6, #0]
 8000da6:	1aed      	subeq	r5, r5, r3
 8000da8:	68a3      	ldr	r3, [r4, #8]
 8000daa:	bf0c      	ite	eq
 8000dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000db0:	2500      	movne	r5, #0
 8000db2:	4293      	cmp	r3, r2
 8000db4:	bfc4      	itt	gt
 8000db6:	1a9b      	subgt	r3, r3, r2
 8000db8:	18ed      	addgt	r5, r5, r3
 8000dba:	2600      	movs	r6, #0
 8000dbc:	341a      	adds	r4, #26
 8000dbe:	42b5      	cmp	r5, r6
 8000dc0:	d11a      	bne.n	8000df8 <_printf_common+0xc8>
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	e008      	b.n	8000dd8 <_printf_common+0xa8>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	4652      	mov	r2, sl
 8000dca:	4641      	mov	r1, r8
 8000dcc:	4638      	mov	r0, r7
 8000dce:	47c8      	blx	r9
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	d103      	bne.n	8000ddc <_printf_common+0xac>
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	3501      	adds	r5, #1
 8000dde:	e7c6      	b.n	8000d6e <_printf_common+0x3e>
 8000de0:	18e1      	adds	r1, r4, r3
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	2030      	movs	r0, #48	@ 0x30
 8000de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000dea:	4422      	add	r2, r4
 8000dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000df4:	3302      	adds	r3, #2
 8000df6:	e7c7      	b.n	8000d88 <_printf_common+0x58>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	4638      	mov	r0, r7
 8000e00:	47c8      	blx	r9
 8000e02:	3001      	adds	r0, #1
 8000e04:	d0e6      	beq.n	8000dd4 <_printf_common+0xa4>
 8000e06:	3601      	adds	r6, #1
 8000e08:	e7d9      	b.n	8000dbe <_printf_common+0x8e>
	...

08000e0c <_printf_i>:
 8000e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	7e0f      	ldrb	r7, [r1, #24]
 8000e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e14:	2f78      	cmp	r7, #120	@ 0x78
 8000e16:	4691      	mov	r9, r2
 8000e18:	4680      	mov	r8, r0
 8000e1a:	460c      	mov	r4, r1
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e22:	d807      	bhi.n	8000e34 <_printf_i+0x28>
 8000e24:	2f62      	cmp	r7, #98	@ 0x62
 8000e26:	d80a      	bhi.n	8000e3e <_printf_i+0x32>
 8000e28:	2f00      	cmp	r7, #0
 8000e2a:	f000 80d2 	beq.w	8000fd2 <_printf_i+0x1c6>
 8000e2e:	2f58      	cmp	r7, #88	@ 0x58
 8000e30:	f000 80b9 	beq.w	8000fa6 <_printf_i+0x19a>
 8000e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e3c:	e03a      	b.n	8000eb4 <_printf_i+0xa8>
 8000e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e42:	2b15      	cmp	r3, #21
 8000e44:	d8f6      	bhi.n	8000e34 <_printf_i+0x28>
 8000e46:	a101      	add	r1, pc, #4	@ (adr r1, 8000e4c <_printf_i+0x40>)
 8000e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e4c:	08000ea5 	.word	0x08000ea5
 8000e50:	08000eb9 	.word	0x08000eb9
 8000e54:	08000e35 	.word	0x08000e35
 8000e58:	08000e35 	.word	0x08000e35
 8000e5c:	08000e35 	.word	0x08000e35
 8000e60:	08000e35 	.word	0x08000e35
 8000e64:	08000eb9 	.word	0x08000eb9
 8000e68:	08000e35 	.word	0x08000e35
 8000e6c:	08000e35 	.word	0x08000e35
 8000e70:	08000e35 	.word	0x08000e35
 8000e74:	08000e35 	.word	0x08000e35
 8000e78:	08000fb9 	.word	0x08000fb9
 8000e7c:	08000ee3 	.word	0x08000ee3
 8000e80:	08000f73 	.word	0x08000f73
 8000e84:	08000e35 	.word	0x08000e35
 8000e88:	08000e35 	.word	0x08000e35
 8000e8c:	08000fdb 	.word	0x08000fdb
 8000e90:	08000e35 	.word	0x08000e35
 8000e94:	08000ee3 	.word	0x08000ee3
 8000e98:	08000e35 	.word	0x08000e35
 8000e9c:	08000e35 	.word	0x08000e35
 8000ea0:	08000f7b 	.word	0x08000f7b
 8000ea4:	6833      	ldr	r3, [r6, #0]
 8000ea6:	1d1a      	adds	r2, r3, #4
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6032      	str	r2, [r6, #0]
 8000eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e09d      	b.n	8000ff4 <_printf_i+0x1e8>
 8000eb8:	6833      	ldr	r3, [r6, #0]
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	1d19      	adds	r1, r3, #4
 8000ebe:	6031      	str	r1, [r6, #0]
 8000ec0:	0606      	lsls	r6, r0, #24
 8000ec2:	d501      	bpl.n	8000ec8 <_printf_i+0xbc>
 8000ec4:	681d      	ldr	r5, [r3, #0]
 8000ec6:	e003      	b.n	8000ed0 <_printf_i+0xc4>
 8000ec8:	0645      	lsls	r5, r0, #25
 8000eca:	d5fb      	bpl.n	8000ec4 <_printf_i+0xb8>
 8000ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ed0:	2d00      	cmp	r5, #0
 8000ed2:	da03      	bge.n	8000edc <_printf_i+0xd0>
 8000ed4:	232d      	movs	r3, #45	@ 0x2d
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000edc:	4859      	ldr	r0, [pc, #356]	@ (8001044 <_printf_i+0x238>)
 8000ede:	230a      	movs	r3, #10
 8000ee0:	e011      	b.n	8000f06 <_printf_i+0xfa>
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	0608      	lsls	r0, r1, #24
 8000ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000eec:	d402      	bmi.n	8000ef4 <_printf_i+0xe8>
 8000eee:	0649      	lsls	r1, r1, #25
 8000ef0:	bf48      	it	mi
 8000ef2:	b2ad      	uxthmi	r5, r5
 8000ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ef6:	4853      	ldr	r0, [pc, #332]	@ (8001044 <_printf_i+0x238>)
 8000ef8:	6033      	str	r3, [r6, #0]
 8000efa:	bf14      	ite	ne
 8000efc:	230a      	movne	r3, #10
 8000efe:	2308      	moveq	r3, #8
 8000f00:	2100      	movs	r1, #0
 8000f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f06:	6866      	ldr	r6, [r4, #4]
 8000f08:	60a6      	str	r6, [r4, #8]
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	bfa2      	ittt	ge
 8000f0e:	6821      	ldrge	r1, [r4, #0]
 8000f10:	f021 0104 	bicge.w	r1, r1, #4
 8000f14:	6021      	strge	r1, [r4, #0]
 8000f16:	b90d      	cbnz	r5, 8000f1c <_printf_i+0x110>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d04b      	beq.n	8000fb4 <_printf_i+0x1a8>
 8000f1c:	4616      	mov	r6, r2
 8000f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f22:	fb03 5711 	mls	r7, r3, r1, r5
 8000f26:	5dc7      	ldrb	r7, [r0, r7]
 8000f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f2c:	462f      	mov	r7, r5
 8000f2e:	42bb      	cmp	r3, r7
 8000f30:	460d      	mov	r5, r1
 8000f32:	d9f4      	bls.n	8000f1e <_printf_i+0x112>
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d10b      	bne.n	8000f50 <_printf_i+0x144>
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	07df      	lsls	r7, r3, #31
 8000f3c:	d508      	bpl.n	8000f50 <_printf_i+0x144>
 8000f3e:	6923      	ldr	r3, [r4, #16]
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	4299      	cmp	r1, r3
 8000f44:	bfde      	ittt	le
 8000f46:	2330      	movle	r3, #48	@ 0x30
 8000f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f50:	1b92      	subs	r2, r2, r6
 8000f52:	6122      	str	r2, [r4, #16]
 8000f54:	f8cd a000 	str.w	sl, [sp]
 8000f58:	464b      	mov	r3, r9
 8000f5a:	aa03      	add	r2, sp, #12
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	4640      	mov	r0, r8
 8000f60:	f7ff fee6 	bl	8000d30 <_printf_common>
 8000f64:	3001      	adds	r0, #1
 8000f66:	d14a      	bne.n	8000ffe <_printf_i+0x1f2>
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	b004      	add	sp, #16
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	4833      	ldr	r0, [pc, #204]	@ (8001048 <_printf_i+0x23c>)
 8000f7c:	2778      	movs	r7, #120	@ 0x78
 8000f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	6831      	ldr	r1, [r6, #0]
 8000f86:	061f      	lsls	r7, r3, #24
 8000f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f8c:	d402      	bmi.n	8000f94 <_printf_i+0x188>
 8000f8e:	065f      	lsls	r7, r3, #25
 8000f90:	bf48      	it	mi
 8000f92:	b2ad      	uxthmi	r5, r5
 8000f94:	6031      	str	r1, [r6, #0]
 8000f96:	07d9      	lsls	r1, r3, #31
 8000f98:	bf44      	itt	mi
 8000f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8000f9e:	6023      	strmi	r3, [r4, #0]
 8000fa0:	b11d      	cbz	r5, 8000faa <_printf_i+0x19e>
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	e7ac      	b.n	8000f00 <_printf_i+0xf4>
 8000fa6:	4827      	ldr	r0, [pc, #156]	@ (8001044 <_printf_i+0x238>)
 8000fa8:	e7e9      	b.n	8000f7e <_printf_i+0x172>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f023 0320 	bic.w	r3, r3, #32
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	e7f6      	b.n	8000fa2 <_printf_i+0x196>
 8000fb4:	4616      	mov	r6, r2
 8000fb6:	e7bd      	b.n	8000f34 <_printf_i+0x128>
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	6825      	ldr	r5, [r4, #0]
 8000fbc:	6961      	ldr	r1, [r4, #20]
 8000fbe:	1d18      	adds	r0, r3, #4
 8000fc0:	6030      	str	r0, [r6, #0]
 8000fc2:	062e      	lsls	r6, r5, #24
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	d501      	bpl.n	8000fcc <_printf_i+0x1c0>
 8000fc8:	6019      	str	r1, [r3, #0]
 8000fca:	e002      	b.n	8000fd2 <_printf_i+0x1c6>
 8000fcc:	0668      	lsls	r0, r5, #25
 8000fce:	d5fb      	bpl.n	8000fc8 <_printf_i+0x1bc>
 8000fd0:	8019      	strh	r1, [r3, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	6123      	str	r3, [r4, #16]
 8000fd6:	4616      	mov	r6, r2
 8000fd8:	e7bc      	b.n	8000f54 <_printf_i+0x148>
 8000fda:	6833      	ldr	r3, [r6, #0]
 8000fdc:	1d1a      	adds	r2, r3, #4
 8000fde:	6032      	str	r2, [r6, #0]
 8000fe0:	681e      	ldr	r6, [r3, #0]
 8000fe2:	6862      	ldr	r2, [r4, #4]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f7ff f8f2 	bl	80001d0 <memchr>
 8000fec:	b108      	cbz	r0, 8000ff2 <_printf_i+0x1e6>
 8000fee:	1b80      	subs	r0, r0, r6
 8000ff0:	6060      	str	r0, [r4, #4]
 8000ff2:	6863      	ldr	r3, [r4, #4]
 8000ff4:	6123      	str	r3, [r4, #16]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ffc:	e7aa      	b.n	8000f54 <_printf_i+0x148>
 8000ffe:	6923      	ldr	r3, [r4, #16]
 8001000:	4632      	mov	r2, r6
 8001002:	4649      	mov	r1, r9
 8001004:	4640      	mov	r0, r8
 8001006:	47d0      	blx	sl
 8001008:	3001      	adds	r0, #1
 800100a:	d0ad      	beq.n	8000f68 <_printf_i+0x15c>
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	079b      	lsls	r3, r3, #30
 8001010:	d413      	bmi.n	800103a <_printf_i+0x22e>
 8001012:	68e0      	ldr	r0, [r4, #12]
 8001014:	9b03      	ldr	r3, [sp, #12]
 8001016:	4298      	cmp	r0, r3
 8001018:	bfb8      	it	lt
 800101a:	4618      	movlt	r0, r3
 800101c:	e7a6      	b.n	8000f6c <_printf_i+0x160>
 800101e:	2301      	movs	r3, #1
 8001020:	4632      	mov	r2, r6
 8001022:	4649      	mov	r1, r9
 8001024:	4640      	mov	r0, r8
 8001026:	47d0      	blx	sl
 8001028:	3001      	adds	r0, #1
 800102a:	d09d      	beq.n	8000f68 <_printf_i+0x15c>
 800102c:	3501      	adds	r5, #1
 800102e:	68e3      	ldr	r3, [r4, #12]
 8001030:	9903      	ldr	r1, [sp, #12]
 8001032:	1a5b      	subs	r3, r3, r1
 8001034:	42ab      	cmp	r3, r5
 8001036:	dcf2      	bgt.n	800101e <_printf_i+0x212>
 8001038:	e7eb      	b.n	8001012 <_printf_i+0x206>
 800103a:	2500      	movs	r5, #0
 800103c:	f104 0619 	add.w	r6, r4, #25
 8001040:	e7f5      	b.n	800102e <_printf_i+0x222>
 8001042:	bf00      	nop
 8001044:	08001458 	.word	0x08001458
 8001048:	08001469 	.word	0x08001469

0800104c <__sflush_r>:
 800104c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001054:	0716      	lsls	r6, r2, #28
 8001056:	4605      	mov	r5, r0
 8001058:	460c      	mov	r4, r1
 800105a:	d454      	bmi.n	8001106 <__sflush_r+0xba>
 800105c:	684b      	ldr	r3, [r1, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dc02      	bgt.n	8001068 <__sflush_r+0x1c>
 8001062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd48      	ble.n	80010fa <__sflush_r+0xae>
 8001068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800106a:	2e00      	cmp	r6, #0
 800106c:	d045      	beq.n	80010fa <__sflush_r+0xae>
 800106e:	2300      	movs	r3, #0
 8001070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001074:	682f      	ldr	r7, [r5, #0]
 8001076:	6a21      	ldr	r1, [r4, #32]
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	d030      	beq.n	80010de <__sflush_r+0x92>
 800107c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800107e:	89a3      	ldrh	r3, [r4, #12]
 8001080:	0759      	lsls	r1, r3, #29
 8001082:	d505      	bpl.n	8001090 <__sflush_r+0x44>
 8001084:	6863      	ldr	r3, [r4, #4]
 8001086:	1ad2      	subs	r2, r2, r3
 8001088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800108a:	b10b      	cbz	r3, 8001090 <__sflush_r+0x44>
 800108c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	2300      	movs	r3, #0
 8001092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001094:	6a21      	ldr	r1, [r4, #32]
 8001096:	4628      	mov	r0, r5
 8001098:	47b0      	blx	r6
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	d106      	bne.n	80010ae <__sflush_r+0x62>
 80010a0:	6829      	ldr	r1, [r5, #0]
 80010a2:	291d      	cmp	r1, #29
 80010a4:	d82b      	bhi.n	80010fe <__sflush_r+0xb2>
 80010a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001150 <__sflush_r+0x104>)
 80010a8:	410a      	asrs	r2, r1
 80010aa:	07d6      	lsls	r6, r2, #31
 80010ac:	d427      	bmi.n	80010fe <__sflush_r+0xb2>
 80010ae:	2200      	movs	r2, #0
 80010b0:	6062      	str	r2, [r4, #4]
 80010b2:	04d9      	lsls	r1, r3, #19
 80010b4:	6922      	ldr	r2, [r4, #16]
 80010b6:	6022      	str	r2, [r4, #0]
 80010b8:	d504      	bpl.n	80010c4 <__sflush_r+0x78>
 80010ba:	1c42      	adds	r2, r0, #1
 80010bc:	d101      	bne.n	80010c2 <__sflush_r+0x76>
 80010be:	682b      	ldr	r3, [r5, #0]
 80010c0:	b903      	cbnz	r3, 80010c4 <__sflush_r+0x78>
 80010c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80010c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010c6:	602f      	str	r7, [r5, #0]
 80010c8:	b1b9      	cbz	r1, 80010fa <__sflush_r+0xae>
 80010ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010ce:	4299      	cmp	r1, r3
 80010d0:	d002      	beq.n	80010d8 <__sflush_r+0x8c>
 80010d2:	4628      	mov	r0, r5
 80010d4:	f7ff fbf2 	bl	80008bc <_free_r>
 80010d8:	2300      	movs	r3, #0
 80010da:	6363      	str	r3, [r4, #52]	@ 0x34
 80010dc:	e00d      	b.n	80010fa <__sflush_r+0xae>
 80010de:	2301      	movs	r3, #1
 80010e0:	4628      	mov	r0, r5
 80010e2:	47b0      	blx	r6
 80010e4:	4602      	mov	r2, r0
 80010e6:	1c50      	adds	r0, r2, #1
 80010e8:	d1c9      	bne.n	800107e <__sflush_r+0x32>
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0c6      	beq.n	800107e <__sflush_r+0x32>
 80010f0:	2b1d      	cmp	r3, #29
 80010f2:	d001      	beq.n	80010f8 <__sflush_r+0xac>
 80010f4:	2b16      	cmp	r3, #22
 80010f6:	d11e      	bne.n	8001136 <__sflush_r+0xea>
 80010f8:	602f      	str	r7, [r5, #0]
 80010fa:	2000      	movs	r0, #0
 80010fc:	e022      	b.n	8001144 <__sflush_r+0xf8>
 80010fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001102:	b21b      	sxth	r3, r3
 8001104:	e01b      	b.n	800113e <__sflush_r+0xf2>
 8001106:	690f      	ldr	r7, [r1, #16]
 8001108:	2f00      	cmp	r7, #0
 800110a:	d0f6      	beq.n	80010fa <__sflush_r+0xae>
 800110c:	0793      	lsls	r3, r2, #30
 800110e:	680e      	ldr	r6, [r1, #0]
 8001110:	bf08      	it	eq
 8001112:	694b      	ldreq	r3, [r1, #20]
 8001114:	600f      	str	r7, [r1, #0]
 8001116:	bf18      	it	ne
 8001118:	2300      	movne	r3, #0
 800111a:	eba6 0807 	sub.w	r8, r6, r7
 800111e:	608b      	str	r3, [r1, #8]
 8001120:	f1b8 0f00 	cmp.w	r8, #0
 8001124:	dde9      	ble.n	80010fa <__sflush_r+0xae>
 8001126:	6a21      	ldr	r1, [r4, #32]
 8001128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800112a:	4643      	mov	r3, r8
 800112c:	463a      	mov	r2, r7
 800112e:	4628      	mov	r0, r5
 8001130:	47b0      	blx	r6
 8001132:	2800      	cmp	r0, #0
 8001134:	dc08      	bgt.n	8001148 <__sflush_r+0xfc>
 8001136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113e:	81a3      	strh	r3, [r4, #12]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001148:	4407      	add	r7, r0
 800114a:	eba8 0800 	sub.w	r8, r8, r0
 800114e:	e7e7      	b.n	8001120 <__sflush_r+0xd4>
 8001150:	dfbffffe 	.word	0xdfbffffe

08001154 <_fflush_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	690b      	ldr	r3, [r1, #16]
 8001158:	4605      	mov	r5, r0
 800115a:	460c      	mov	r4, r1
 800115c:	b913      	cbnz	r3, 8001164 <_fflush_r+0x10>
 800115e:	2500      	movs	r5, #0
 8001160:	4628      	mov	r0, r5
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	b118      	cbz	r0, 800116e <_fflush_r+0x1a>
 8001166:	6a03      	ldr	r3, [r0, #32]
 8001168:	b90b      	cbnz	r3, 800116e <_fflush_r+0x1a>
 800116a:	f7ff fa9f 	bl	80006ac <__sinit>
 800116e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f3      	beq.n	800115e <_fflush_r+0xa>
 8001176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001178:	07d0      	lsls	r0, r2, #31
 800117a:	d404      	bmi.n	8001186 <_fflush_r+0x32>
 800117c:	0599      	lsls	r1, r3, #22
 800117e:	d402      	bmi.n	8001186 <_fflush_r+0x32>
 8001180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001182:	f7ff fb98 	bl	80008b6 <__retarget_lock_acquire_recursive>
 8001186:	4628      	mov	r0, r5
 8001188:	4621      	mov	r1, r4
 800118a:	f7ff ff5f 	bl	800104c <__sflush_r>
 800118e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001190:	07da      	lsls	r2, r3, #31
 8001192:	4605      	mov	r5, r0
 8001194:	d4e4      	bmi.n	8001160 <_fflush_r+0xc>
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	059b      	lsls	r3, r3, #22
 800119a:	d4e1      	bmi.n	8001160 <_fflush_r+0xc>
 800119c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800119e:	f7ff fb8b 	bl	80008b8 <__retarget_lock_release_recursive>
 80011a2:	e7dd      	b.n	8001160 <_fflush_r+0xc>

080011a4 <__swbuf_r>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	460e      	mov	r6, r1
 80011a8:	4614      	mov	r4, r2
 80011aa:	4605      	mov	r5, r0
 80011ac:	b118      	cbz	r0, 80011b6 <__swbuf_r+0x12>
 80011ae:	6a03      	ldr	r3, [r0, #32]
 80011b0:	b90b      	cbnz	r3, 80011b6 <__swbuf_r+0x12>
 80011b2:	f7ff fa7b 	bl	80006ac <__sinit>
 80011b6:	69a3      	ldr	r3, [r4, #24]
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	071a      	lsls	r2, r3, #28
 80011be:	d501      	bpl.n	80011c4 <__swbuf_r+0x20>
 80011c0:	6923      	ldr	r3, [r4, #16]
 80011c2:	b943      	cbnz	r3, 80011d6 <__swbuf_r+0x32>
 80011c4:	4621      	mov	r1, r4
 80011c6:	4628      	mov	r0, r5
 80011c8:	f000 f82a 	bl	8001220 <__swsetup_r>
 80011cc:	b118      	cbz	r0, 80011d6 <__swbuf_r+0x32>
 80011ce:	f04f 37ff 	mov.w	r7, #4294967295
 80011d2:	4638      	mov	r0, r7
 80011d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	6922      	ldr	r2, [r4, #16]
 80011da:	1a98      	subs	r0, r3, r2
 80011dc:	6963      	ldr	r3, [r4, #20]
 80011de:	b2f6      	uxtb	r6, r6
 80011e0:	4283      	cmp	r3, r0
 80011e2:	4637      	mov	r7, r6
 80011e4:	dc05      	bgt.n	80011f2 <__swbuf_r+0x4e>
 80011e6:	4621      	mov	r1, r4
 80011e8:	4628      	mov	r0, r5
 80011ea:	f7ff ffb3 	bl	8001154 <_fflush_r>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d1ed      	bne.n	80011ce <__swbuf_r+0x2a>
 80011f2:	68a3      	ldr	r3, [r4, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60a3      	str	r3, [r4, #8]
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	6022      	str	r2, [r4, #0]
 80011fe:	701e      	strb	r6, [r3, #0]
 8001200:	6962      	ldr	r2, [r4, #20]
 8001202:	1c43      	adds	r3, r0, #1
 8001204:	429a      	cmp	r2, r3
 8001206:	d004      	beq.n	8001212 <__swbuf_r+0x6e>
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	07db      	lsls	r3, r3, #31
 800120c:	d5e1      	bpl.n	80011d2 <__swbuf_r+0x2e>
 800120e:	2e0a      	cmp	r6, #10
 8001210:	d1df      	bne.n	80011d2 <__swbuf_r+0x2e>
 8001212:	4621      	mov	r1, r4
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff ff9d 	bl	8001154 <_fflush_r>
 800121a:	2800      	cmp	r0, #0
 800121c:	d0d9      	beq.n	80011d2 <__swbuf_r+0x2e>
 800121e:	e7d6      	b.n	80011ce <__swbuf_r+0x2a>

08001220 <__swsetup_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <__swsetup_r+0xa8>)
 8001224:	4605      	mov	r5, r0
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	460c      	mov	r4, r1
 800122a:	b118      	cbz	r0, 8001234 <__swsetup_r+0x14>
 800122c:	6a03      	ldr	r3, [r0, #32]
 800122e:	b90b      	cbnz	r3, 8001234 <__swsetup_r+0x14>
 8001230:	f7ff fa3c 	bl	80006ac <__sinit>
 8001234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001238:	0719      	lsls	r1, r3, #28
 800123a:	d422      	bmi.n	8001282 <__swsetup_r+0x62>
 800123c:	06da      	lsls	r2, r3, #27
 800123e:	d407      	bmi.n	8001250 <__swsetup_r+0x30>
 8001240:	2209      	movs	r2, #9
 8001242:	602a      	str	r2, [r5, #0]
 8001244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001248:	81a3      	strh	r3, [r4, #12]
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	e033      	b.n	80012b8 <__swsetup_r+0x98>
 8001250:	0758      	lsls	r0, r3, #29
 8001252:	d512      	bpl.n	800127a <__swsetup_r+0x5a>
 8001254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001256:	b141      	cbz	r1, 800126a <__swsetup_r+0x4a>
 8001258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800125c:	4299      	cmp	r1, r3
 800125e:	d002      	beq.n	8001266 <__swsetup_r+0x46>
 8001260:	4628      	mov	r0, r5
 8001262:	f7ff fb2b 	bl	80008bc <_free_r>
 8001266:	2300      	movs	r3, #0
 8001268:	6363      	str	r3, [r4, #52]	@ 0x34
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	6063      	str	r3, [r4, #4]
 8001276:	6923      	ldr	r3, [r4, #16]
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	b94b      	cbnz	r3, 800129a <__swsetup_r+0x7a>
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800128c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001290:	d003      	beq.n	800129a <__swsetup_r+0x7a>
 8001292:	4621      	mov	r1, r4
 8001294:	4628      	mov	r0, r5
 8001296:	f000 f84f 	bl	8001338 <__smakebuf_r>
 800129a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129e:	f013 0201 	ands.w	r2, r3, #1
 80012a2:	d00a      	beq.n	80012ba <__swsetup_r+0x9a>
 80012a4:	2200      	movs	r2, #0
 80012a6:	60a2      	str	r2, [r4, #8]
 80012a8:	6962      	ldr	r2, [r4, #20]
 80012aa:	4252      	negs	r2, r2
 80012ac:	61a2      	str	r2, [r4, #24]
 80012ae:	6922      	ldr	r2, [r4, #16]
 80012b0:	b942      	cbnz	r2, 80012c4 <__swsetup_r+0xa4>
 80012b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012b6:	d1c5      	bne.n	8001244 <__swsetup_r+0x24>
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	0799      	lsls	r1, r3, #30
 80012bc:	bf58      	it	pl
 80012be:	6962      	ldrpl	r2, [r4, #20]
 80012c0:	60a2      	str	r2, [r4, #8]
 80012c2:	e7f4      	b.n	80012ae <__swsetup_r+0x8e>
 80012c4:	2000      	movs	r0, #0
 80012c6:	e7f7      	b.n	80012b8 <__swsetup_r+0x98>
 80012c8:	20000010 	.word	0x20000010

080012cc <_sbrk_r>:
 80012cc:	b538      	push	{r3, r4, r5, lr}
 80012ce:	4d06      	ldr	r5, [pc, #24]	@ (80012e8 <_sbrk_r+0x1c>)
 80012d0:	2300      	movs	r3, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	602b      	str	r3, [r5, #0]
 80012d8:	f7ff f8b2 	bl	8000440 <_sbrk>
 80012dc:	1c43      	adds	r3, r0, #1
 80012de:	d102      	bne.n	80012e6 <_sbrk_r+0x1a>
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	b103      	cbz	r3, 80012e6 <_sbrk_r+0x1a>
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	bd38      	pop	{r3, r4, r5, pc}
 80012e8:	200001c0 	.word	0x200001c0

080012ec <__swhatbuf_r>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	460c      	mov	r4, r1
 80012f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f4:	2900      	cmp	r1, #0
 80012f6:	b096      	sub	sp, #88	@ 0x58
 80012f8:	4615      	mov	r5, r2
 80012fa:	461e      	mov	r6, r3
 80012fc:	da0d      	bge.n	800131a <__swhatbuf_r+0x2e>
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001304:	f04f 0100 	mov.w	r1, #0
 8001308:	bf14      	ite	ne
 800130a:	2340      	movne	r3, #64	@ 0x40
 800130c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001310:	2000      	movs	r0, #0
 8001312:	6031      	str	r1, [r6, #0]
 8001314:	602b      	str	r3, [r5, #0]
 8001316:	b016      	add	sp, #88	@ 0x58
 8001318:	bd70      	pop	{r4, r5, r6, pc}
 800131a:	466a      	mov	r2, sp
 800131c:	f000 f848 	bl	80013b0 <_fstat_r>
 8001320:	2800      	cmp	r0, #0
 8001322:	dbec      	blt.n	80012fe <__swhatbuf_r+0x12>
 8001324:	9901      	ldr	r1, [sp, #4]
 8001326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800132a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800132e:	4259      	negs	r1, r3
 8001330:	4159      	adcs	r1, r3
 8001332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001336:	e7eb      	b.n	8001310 <__swhatbuf_r+0x24>

08001338 <__smakebuf_r>:
 8001338:	898b      	ldrh	r3, [r1, #12]
 800133a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800133c:	079d      	lsls	r5, r3, #30
 800133e:	4606      	mov	r6, r0
 8001340:	460c      	mov	r4, r1
 8001342:	d507      	bpl.n	8001354 <__smakebuf_r+0x1c>
 8001344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	6123      	str	r3, [r4, #16]
 800134c:	2301      	movs	r3, #1
 800134e:	6163      	str	r3, [r4, #20]
 8001350:	b003      	add	sp, #12
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001354:	ab01      	add	r3, sp, #4
 8001356:	466a      	mov	r2, sp
 8001358:	f7ff ffc8 	bl	80012ec <__swhatbuf_r>
 800135c:	9f00      	ldr	r7, [sp, #0]
 800135e:	4605      	mov	r5, r0
 8001360:	4639      	mov	r1, r7
 8001362:	4630      	mov	r0, r6
 8001364:	f7ff fb16 	bl	8000994 <_malloc_r>
 8001368:	b948      	cbnz	r0, 800137e <__smakebuf_r+0x46>
 800136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136e:	059a      	lsls	r2, r3, #22
 8001370:	d4ee      	bmi.n	8001350 <__smakebuf_r+0x18>
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	81a3      	strh	r3, [r4, #12]
 800137c:	e7e2      	b.n	8001344 <__smakebuf_r+0xc>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	6020      	str	r0, [r4, #0]
 8001382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	9b01      	ldr	r3, [sp, #4]
 800138a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800138e:	b15b      	cbz	r3, 80013a8 <__smakebuf_r+0x70>
 8001390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001394:	4630      	mov	r0, r6
 8001396:	f000 f81d 	bl	80013d4 <_isatty_r>
 800139a:	b128      	cbz	r0, 80013a8 <__smakebuf_r+0x70>
 800139c:	89a3      	ldrh	r3, [r4, #12]
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	81a3      	strh	r3, [r4, #12]
 80013a8:	89a3      	ldrh	r3, [r4, #12]
 80013aa:	431d      	orrs	r5, r3
 80013ac:	81a5      	strh	r5, [r4, #12]
 80013ae:	e7cf      	b.n	8001350 <__smakebuf_r+0x18>

080013b0 <_fstat_r>:
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	4d07      	ldr	r5, [pc, #28]	@ (80013d0 <_fstat_r+0x20>)
 80013b4:	2300      	movs	r3, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	602b      	str	r3, [r5, #0]
 80013be:	f7ff f817 	bl	80003f0 <_fstat>
 80013c2:	1c43      	adds	r3, r0, #1
 80013c4:	d102      	bne.n	80013cc <_fstat_r+0x1c>
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	b103      	cbz	r3, 80013cc <_fstat_r+0x1c>
 80013ca:	6023      	str	r3, [r4, #0]
 80013cc:	bd38      	pop	{r3, r4, r5, pc}
 80013ce:	bf00      	nop
 80013d0:	200001c0 	.word	0x200001c0

080013d4 <_isatty_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d06      	ldr	r5, [pc, #24]	@ (80013f0 <_isatty_r+0x1c>)
 80013d8:	2300      	movs	r3, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	602b      	str	r3, [r5, #0]
 80013e0:	f7ff f816 	bl	8000410 <_isatty>
 80013e4:	1c43      	adds	r3, r0, #1
 80013e6:	d102      	bne.n	80013ee <_isatty_r+0x1a>
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	b103      	cbz	r3, 80013ee <_isatty_r+0x1a>
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	200001c0 	.word	0x200001c0

080013f4 <_init>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr

08001400 <_fini>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	bf00      	nop
 8001404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001406:	bc08      	pop	{r3}
 8001408:	469e      	mov	lr, r3
 800140a:	4770      	bx	lr
